
sd_card_2.elf:     file format elf32-littlenios2
sd_card_2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0000cc1c memsz 0x0000cc1c flags r-x
    LOAD off    0x0000dc3c vaddr 0x0100cc3c paddr 0x0100e6dc align 2**12
         filesz 0x00001aa0 memsz 0x00001aa0 flags rw-
    LOAD off    0x0001017c vaddr 0x0101017c paddr 0x0101017c align 2**12
         filesz 0x00000000 memsz 0x0000087c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c694  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003f4  0100c848  0100c848  0000d848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aa0  0100cc3c  0100e6dc  0000dc3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000087c  0101017c  0101017c  0001017c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000f6dc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a98  00000000  00000000  0000f708  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001727  00000000  00000000  000101a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002154d  00000000  00000000  000118c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000061cc  00000000  00000000  00032e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00010f3c  00000000  00000000  00038fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000018f4  00000000  00000000  00049f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001eab  00000000  00000000  0004b810  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000078d8  00000000  00000000  0004d6bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00054f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000698  00000000  00000000  00054fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000589ba  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000589bd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000589c9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000589ca  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000589cb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000589d6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000589e1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000589ec  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000021  00000000  00000000  000589f7  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0004aef2  00000000  00000000  00058a18  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
0100c848 l    d  .rodata	00000000 .rodata
0100cc3c l    d  .rwdata	00000000 .rwdata
0101017c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0100cc3c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01001df0 l     F .text	00000058 std
01001efc l     F .text	00000008 __fp_lock
01001f04 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
01002f34 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01002f94 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01003098 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
010031bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100329c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
010033fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100362c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0100e6cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
010038e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100d5ec l     O .rwdata	00001060 jtag_uart_0
0100e64c l     O .rwdata	0000002c character_lcd_0
0100e678 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
010039e0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
0100ca30 l     O .rodata	00000016 __func__.4813
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100823c l     F .text	00000228 altera_avalon_jtag_uart_irq
01008464 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01009234 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
010096d8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01009828 l     F .text	000000f8 alt_file_locked
01009aac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0100a1b4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100a6d0 l     F .text	00000058 __sprint_r
0100cb2c l     O .rodata	00000010 blanks.3391
0100cb1c l     O .rodata	00000010 zeroes.3392
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0100c4d8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
0100c624 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
0100c7e4 l     F .text	00000060 alt_get_errno
010101a0 g     O .bss	00000004 aux_status_register
01002c9c g     F .text	00000070 _isatty_r
0100345c g     F .text	0000006c alt_main
010004b8 g     F .text	000000a0 _puts_r
01010768 g     O .bss	00000100 alt_irq
01002d0c g     F .text	00000078 _lseek_r
0100e6dc g       *ABS*	00000000 __flash_rwdata_start
01008b5c g     F .text	00000034 alt_up_character_lcd_send_cmd
01003dc8 g     F .text	000001b0 Check_for_Master_Boot_Record
010109f8 g       *ABS*	00000000 __alt_heap_start
01007ca8 g     F .text	00000200 alt_up_sd_card_fclose
0100a65c g     F .text	00000074 _kill_r
0100a59c g     F .text	000000a0 _signal_r
010028d8 g     F .text	00000068 __sseek
01001e58 g     F .text	000000a4 __sinit
01001f58 g     F .text	0000009c __sfmoreglue
010034e8 g     F .text	00000020 __malloc_unlock
010101c4 g     O .bss	00000004 current_sector_modified
01007fa4 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
01001340 g     F .text	000000e0 memmove
01001f48 g     F .text	00000010 _cleanup
0100684c g     F .text	000000c8 alt_up_sd_card_is_Present
01003ae0 g     F .text	00000050 Save_Modified_Sector
00000000  w      *UND*	00000000 __errno
01008ae0 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000000c __reset
010101bc g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
01000020 g       *ABS*	00000000 __flash_exceptions_start
01002c28 g     F .text	00000074 _fstat_r
01010188 g     O .bss	00000004 errno
01010190 g     O .bss	00000004 alt_argv
010166a4 g       *ABS*	00000000 _gp
01006e0c g     F .text	000003a8 alt_up_sd_card_fopen
01006988 g     F .text	000000d4 alt_up_sd_card_find_first
010101b0 g     O .bss	00000004 command_argument_register
0100c684 g     F .text	00000020 getpid
0100d46c g     O .rwdata	00000180 alt_fd_list
01006074 g     F .text	0000012c find_first_empty_record_in_root_directory
0100935c g     F .text	00000094 alt_find_dev
010012a0 g     F .text	000000a0 memcpy
01008cf4 g     F .text	0000004c alt_up_character_lcd_write_fd
01001f3c g     F .text	0000000c _cleanup_r
010097b0 g     F .text	00000078 alt_io_redirect
0100c848 g       *ABS*	00000000 __DTOR_END__
01000558 g     F .text	00000014 puts
01005c84 g     F .text	000001a4 find_first_empty_cluster
01006788 g     F .text	000000c4 alt_up_sd_card_open_dev
0100b7e8 g     F .text	00000024 __vfiprintf_internal
0100867c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100c614 g     F .text	00000008 __udivsi3
010030f8 g     F .text	000000c4 isatty
0100a380 g     F .text	000000cc _raise_r
01009ec0 g     F .text	00000064 __assert_func
0101017c g     O .bss	00000004 __malloc_top_pad
0100a658 g     F .text	00000004 _getpid_r
010005e0 g     F .text	0000049c __sfvwrite_r
0100a4d4 g     F .text	000000b4 __sigtramp_r
01004f60 g     F .text	000000c0 get_dir_divider_location
01001a14 g     F .text	00000070 _sbrk_r
01004c00 g     F .text	000000d0 filename_to_upper_case
010071b4 g     F .text	00000090 alt_up_sd_card_set_attributes
01003f78 g     F .text	00000284 Read_File_Record_At_Offset
01002d84 g     F .text	00000078 _read_r
0100e6c4 g     O .rwdata	00000004 alt_max_fd
01005820 g     F .text	00000464 find_file_in_directory
01002b04 g     F .text	00000110 _fclose_r
01001dbc g     F .text	00000034 fflush
01010180 g     O .bss	00000004 __malloc_max_sbrked_mem
01006914 g     F .text	00000074 alt_up_sd_card_is_FAT16
0100be78 g     F .text	00000660 __umoddi3
01003308 g     F .text	000000f4 lseek
0100e6a8 g     O .rwdata	00000004 _global_impure_ptr
0100530c g     F .text	00000514 get_home_directory_cluster_for_file
01001420 g     F .text	000005f4 _realloc_r
010109f8 g       *ABS*	00000000 __bss_end
010095e0 g     F .text	000000f8 alt_iic_isr_register
01009ba4 g     F .text	0000010c alt_tick
0100b80c g     F .text	0000066c __udivdi3
0100a368 g     F .text	00000018 abort
010101c8 g     O .bss	00000004 current_sector_index
01001f24 g     F .text	00000018 __fp_lock_all
01009598 g     F .text	00000048 alt_ic_irq_enabled
01009b0c g     F .text	00000098 alt_alarm_stop
01003ce4 g     F .text	000000e4 mark_cluster
010101cc g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
0100d444 g     O .rwdata	00000028 alt_dev_null
010061a0 g     F .text	000001b8 convert_filename_to_name_extension
01008fdc g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
01009164 g     F .text	0000001c alt_dcache_flush_all
0101019c g     O .bss	00000004 is_sd_card_formated_as_FAT16
01005e28 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0100e6dc g       *ABS*	00000000 __ram_rwdata_end
0100e6bc g     O .rwdata	00000008 alt_dev_list
010037c0 g     F .text	00000124 write
010101c0 g     O .bss	00000004 device_pointer
0100cc3c g       *ABS*	00000000 __ram_rodata_end
01002fc0 g     F .text	000000d8 fstat
010001f0 g     F .text	000000f8 look_for_other_files
0100c6a4 g     F .text	00000140 kill
0100a728 g     F .text	000010c0 ___vfiprintf_internal_r
0100c61c g     F .text	00000008 __umodsi3
010109f8 g       *ABS*	00000000 end
0100817c g     F .text	000000c0 altera_avalon_jtag_uart_init
0100c844 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
010088a0 g     F .text	00000240 altera_avalon_jtag_uart_write
01001e48 g     F .text	00000004 __sfp_lock_acquire
010011bc g     F .text	000000e4 memchr
01008c04 g     F .text	00000078 alt_up_character_lcd_write
01002210 g     F .text	00000314 _free_r
0100a1b8 g     F .text	000001b0 __call_exitprocs
0100e6b0 g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000003c _start
010101d0 g     O .bss	00000004 _alt_tick_rate
010101d4 g     O .bss	00000004 _alt_nticks
0100a63c g     F .text	0000001c signal
01003508 g     F .text	00000124 read
01003978 g     F .text	00000068 alt_sys_init
01008e68 g     F .text	000000b0 alt_up_character_lcd_shift_display
0100a080 g     F .text	00000134 __register_exitproc
01008f18 g     F .text	00000090 alt_up_character_lcd_erase_pos
01008514 g     F .text	00000074 altera_avalon_jtag_uart_close
01002dfc g     F .text	00000038 __mulsi3
0100cc3c g       *ABS*	00000000 __ram_rwdata_start
0100c848 g       *ABS*	00000000 __ram_rodata_start
010101d8 g     O .bss	00000028 __malloc_current_mallinfo
01010198 g     O .bss	00000004 initialized
01008034 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01009df0 g     F .text	000000d0 alt_get_fd
01010200 g     O .bss	00000014 search_data
01002a94 g     F .text	00000070 _close_r
01009ff0 g     F .text	00000074 memcmp
010080e4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
010109f8 g       *ABS*	00000000 __alt_stack_base
0100812c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01001a84 g     F .text	0000013c __swsetup_r
01001ff4 g     F .text	000000f0 __sfp
01010214 g     O .bss	00000054 boot_sector_data
0100d03c g     O .rwdata	00000408 __malloc_av_
01001e54 g     F .text	00000004 __sinit_lock_release
010029bc g     F .text	00000060 __sread
01009cd0 g     F .text	00000120 alt_find_file
01009180 g     F .text	000000b4 alt_dev_llist_insert
010034c8 g     F .text	00000020 __malloc_lock
01003704 g     F .text	000000bc sbrk
01001bc0 g     F .text	000001fc _fflush_r
0101017c g       *ABS*	00000000 __bss_start
01002838 g     F .text	00000098 memset
010003b4 g     F .text	00000104 main
01010194 g     O .bss	00000004 alt_envp
01010184 g     O .bss	00000004 __malloc_max_total_mem
0100808c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01007244 g     F .text	0000008c alt_up_sd_card_get_attributes
01003a18 g     F .text	000000c8 Write_Sector_Data
0100766c g     F .text	0000063c alt_up_sd_card_write
01008db8 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
010028d0 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01002c14 g     F .text	00000014 fclose
01010868 g     O .bss	00000190 _atexit0
01000a7c g     F .text	00000740 _malloc_r
0100e6c8 g     O .rwdata	00000004 alt_errno
01009fc8 g     F .text	00000028 _fiprintf_r
0100a4c4 g     F .text	00000010 _init_signal
010025ec g     F .text	000000b8 _fwalk
0100c554 g     F .text	00000060 __divsi3
01008bc4 g     F .text	00000040 alt_up_character_lcd_open_dev
010020e4 g     F .text	0000012c _malloc_trim_r
0100c848 g       *ABS*	00000000 __CTOR_END__
010101a4 g     O .bss	00000004 status_register
01008b90 g     F .text	00000034 alt_up_character_lcd_init
010101ac g     O .bss	00000004 command_register
0100c848 g       *ABS*	00000000 __flash_rodata_start
0100c848 g       *ABS*	00000000 __DTOR_LIST__
01003944 g     F .text	00000034 alt_irq_init
0100368c g     F .text	00000078 alt_release_fd
01003c2c g     F .text	000000b8 get_cluster_flag
01008fa8 g     F .text	00000034 alt_up_character_lcd_cursor_off
0100cb3c g     O .rodata	00000100 __clz_tab
010041fc g     F .text	000002b8 Write_File_Record_At_Offset
01009f38 g     F .text	00000014 atexit
01002a1c g     F .text	00000078 _write_r
010044b4 g     F .text	00000648 Check_for_DOS_FAT
01006358 g     F .text	000002dc create_file
0100e6a4 g     O .rwdata	00000004 _impure_ptr
010101a8 g     O .bss	00000004 CSD_register_w0
0101018c g     O .bss	00000004 alt_argc
010092f8 g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01001f0c g     F .text	00000018 __fp_unlock_all
0100e6b4 g     O .rwdata	00000008 alt_fs_list
01004cd0 g     F .text	00000290 check_file_name_for_FAT16_compliance
010101b4 g     O .bss	00000004 buffer_memory
01000020 g       *ABS*	00000000 __ram_exceptions_start
0100940c g     F .text	00000050 alt_ic_isr_register
010002e8 g     F .text	000000cc scan_sd_card
010101b8 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
0100e6dc g       *ABS*	00000000 _edata
010109f8 g       *ABS*	00000000 _end
01010268 g     O .bss	00000500 active_files
010001b4 g       *ABS*	00000000 __ram_exceptions_end
01006634 g     F .text	00000154 copy_file_record_name_to_string
01008588 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01004afc g     F .text	00000104 Look_for_FAT16
010094f8 g     F .text	000000a0 alt_ic_irq_disable
01002940 g     F .text	0000007c __swrite
0100e6ac g     O .rwdata	00000004 __malloc_trim_threshold
01009cb0 g     F .text	00000020 altera_nios2_qsys_irq_init
01009f4c g     F .text	00000038 exit
01009f84 g     F .text	00000044 fiprintf
0100a064 g     F .text	0000001c _vfiprintf_r
01006a5c g     F .text	000003b0 alt_up_sd_card_find_next
01002524 g     F .text	000000c8 _fwalk_reent
0100c5b4 g     F .text	00000060 __modsi3
01003b30 g     F .text	000000fc Read_Sector_Data
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01001e4c g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
01008c7c g     F .text	00000078 alt_up_character_lcd_string
0100c664 g     F .text	00000020 _exit
01009010 g     F .text	00000154 alt_alarm_start
01007ea8 g     F .text	000000fc Read_Sector_Data_CRC
010072d0 g     F .text	0000039c alt_up_sd_card_read
010026a4 g     F .text	00000194 __smakebuf_r
0100056c g     F .text	00000074 strlen
0100a460 g     F .text	00000064 _init_signal_r
01009920 g     F .text	0000018c open
01009f24 g     F .text	00000014 __assert
010093f0 g     F .text	0000001c alt_icache_flush_all
01008d40 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0100e6d0 g     O .rwdata	00000004 alt_priority_mask
0100945c g     F .text	0000009c alt_ic_irq_enable
0100e6d4 g     O .rwdata	00000008 alt_alarm_list
01009294 g     F .text	00000064 _do_ctors
0100a588 g     F .text	00000014 __sigtramp
01002e34 g     F .text	00000100 close
0100321c g     F .text	00000080 alt_load
01005020 g     F .text	000002ec match_file_record_to_name_ext
0100a44c g     F .text	00000014 raise
00000000  w      *UND*	00000000 free
01001e50 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08406d14 	ori	at,at,436
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18c1da04 	addi	r3,r3,1896
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18c1da04 	addi	r3,r3,1896
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c0:	d699a914 	ori	gp,gp,26276
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001c8:	10805f14 	ori	r2,r2,380

    movhi r3, %hi(__bss_end)
 10001cc:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001d0:	18c27e14 	ori	r3,r3,2552

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	100321c0 	call	100321c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	100345c0 	call	100345c <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <look_for_other_files>:
#include <stdio.h>
#include <altera_up_sd_card_avalon_interface.h>

void look_for_other_files(char *filename){
 10001f0:	defffb04 	addi	sp,sp,-20
 10001f4:	dfc00415 	stw	ra,16(sp)
 10001f8:	df000315 	stw	fp,12(sp)
 10001fc:	df000304 	addi	fp,sp,12
 1000200:	e13ffe15 	stw	r4,-8(fp)
	int status = alt_up_sd_card_find_next(filename);
 1000204:	e13ffe17 	ldw	r4,-8(fp)
 1000208:	1006a5c0 	call	1006a5c <alt_up_sd_card_find_next>
 100020c:	10bfffcc 	andi	r2,r2,65535
 1000210:	10a0001c 	xori	r2,r2,32768
 1000214:	10a00004 	addi	r2,r2,-32768
 1000218:	e0bffd15 	stw	r2,-12(fp)
	while(status == 0){
 100021c:	00000806 	br	1000240 <look_for_other_files+0x50>
		printf("%s\n", filename);
 1000220:	e13ffe17 	ldw	r4,-8(fp)
 1000224:	10005580 	call	1000558 <puts>
		status = alt_up_sd_card_find_next(filename);
 1000228:	e13ffe17 	ldw	r4,-8(fp)
 100022c:	1006a5c0 	call	1006a5c <alt_up_sd_card_find_next>
 1000230:	10bfffcc 	andi	r2,r2,65535
 1000234:	10a0001c 	xori	r2,r2,32768
 1000238:	10a00004 	addi	r2,r2,-32768
 100023c:	e0bffd15 	stw	r2,-12(fp)
#include <stdio.h>
#include <altera_up_sd_card_avalon_interface.h>

void look_for_other_files(char *filename){
	int status = alt_up_sd_card_find_next(filename);
	while(status == 0){
 1000240:	e0bffd17 	ldw	r2,-12(fp)
 1000244:	1005003a 	cmpeq	r2,r2,zero
 1000248:	103ff51e 	bne	r2,zero,1000220 <look_for_other_files+0x30>
		printf("%s\n", filename);
		status = alt_up_sd_card_find_next(filename);
	}

	switch (status){
 100024c:	e0bffd17 	ldw	r2,-12(fp)
 1000250:	e0bfff15 	stw	r2,-4(fp)
 1000254:	e0ffff17 	ldw	r3,-4(fp)
 1000258:	18800060 	cmpeqi	r2,r3,1
 100025c:	10000e1e 	bne	r2,zero,1000298 <look_for_other_files+0xa8>
 1000260:	e0ffff17 	ldw	r3,-4(fp)
 1000264:	18800088 	cmpgei	r2,r3,2
 1000268:	1000041e 	bne	r2,zero,100027c <look_for_other_files+0x8c>
 100026c:	e0ffff17 	ldw	r3,-4(fp)
 1000270:	18bfffe0 	cmpeqi	r2,r3,-1
 1000274:	1000141e 	bne	r2,zero,10002c8 <look_for_other_files+0xd8>
 1000278:	00001606 	br	10002d4 <look_for_other_files+0xe4>
 100027c:	e0ffff17 	ldw	r3,-4(fp)
 1000280:	188000a0 	cmpeqi	r2,r3,2
 1000284:	1000081e 	bne	r2,zero,10002a8 <look_for_other_files+0xb8>
 1000288:	e0ffff17 	ldw	r3,-4(fp)
 100028c:	188000e0 	cmpeqi	r2,r3,3
 1000290:	1000091e 	bne	r2,zero,10002b8 <look_for_other_files+0xc8>
 1000294:	00000f06 	br	10002d4 <look_for_other_files+0xe4>
		case 1: //invalid directory
			printf("Invalid Directory.\n");
 1000298:	01004074 	movhi	r4,257
 100029c:	21321204 	addi	r4,r4,-14264
 10002a0:	10005580 	call	1000558 <puts>
			break;
 10002a4:	00000b06 	br	10002d4 <look_for_other_files+0xe4>
		case 2: //no card present or no FAT 16 partition
			printf("Card not present or no FAT 16 partition.\n");
 10002a8:	01004074 	movhi	r4,257
 10002ac:	21321704 	addi	r4,r4,-14244
 10002b0:	10005580 	call	1000558 <puts>
			break;
 10002b4:	00000706 	br	10002d4 <look_for_other_files+0xe4>
		case 3: //Function alt_up_sd_card_find_first should be called first
			printf("Function alt_up_sd_card_find_first should be called first.\n");
 10002b8:	01004074 	movhi	r4,257
 10002bc:	21322204 	addi	r4,r4,-14200
 10002c0:	10005580 	call	1000558 <puts>
			break;
 10002c4:	00000306 	br	10002d4 <look_for_other_files+0xe4>
		case -1: //No files were found in the directory
			printf("No (more) files were found.\n");
 10002c8:	01004074 	movhi	r4,257
 10002cc:	21323104 	addi	r4,r4,-14140
 10002d0:	10005580 	call	1000558 <puts>
			break;
	}
}
 10002d4:	e037883a 	mov	sp,fp
 10002d8:	dfc00117 	ldw	ra,4(sp)
 10002dc:	df000017 	ldw	fp,0(sp)
 10002e0:	dec00204 	addi	sp,sp,8
 10002e4:	f800283a 	ret

010002e8 <scan_sd_card>:

void scan_sd_card(char *directory, char *filename){
 10002e8:	defffb04 	addi	sp,sp,-20
 10002ec:	dfc00415 	stw	ra,16(sp)
 10002f0:	df000315 	stw	fp,12(sp)
 10002f4:	df000304 	addi	fp,sp,12
 10002f8:	e13ffd15 	stw	r4,-12(fp)
 10002fc:	e17ffe15 	stw	r5,-8(fp)
	switch (alt_up_sd_card_find_first(directory, filename)){
 1000300:	e13ffd17 	ldw	r4,-12(fp)
 1000304:	e17ffe17 	ldw	r5,-8(fp)
 1000308:	10069880 	call	1006988 <alt_up_sd_card_find_first>
 100030c:	10bfffcc 	andi	r2,r2,65535
 1000310:	10a0001c 	xori	r2,r2,32768
 1000314:	10a00004 	addi	r2,r2,-32768
 1000318:	e0bfff15 	stw	r2,-4(fp)
 100031c:	e0ffff17 	ldw	r3,-4(fp)
 1000320:	1805003a 	cmpeq	r2,r3,zero
 1000324:	10000e1e 	bne	r2,zero,1000360 <scan_sd_card+0x78>
 1000328:	e0ffff17 	ldw	r3,-4(fp)
 100032c:	18800048 	cmpgei	r2,r3,1
 1000330:	1000041e 	bne	r2,zero,1000344 <scan_sd_card+0x5c>
 1000334:	e0ffff17 	ldw	r3,-4(fp)
 1000338:	18bfffe0 	cmpeqi	r2,r3,-1
 100033c:	1000151e 	bne	r2,zero,1000394 <scan_sd_card+0xac>
 1000340:	00001706 	br	10003a0 <scan_sd_card+0xb8>
 1000344:	e0ffff17 	ldw	r3,-4(fp)
 1000348:	18800060 	cmpeqi	r2,r3,1
 100034c:	1000091e 	bne	r2,zero,1000374 <scan_sd_card+0x8c>
 1000350:	e0ffff17 	ldw	r3,-4(fp)
 1000354:	188000a0 	cmpeqi	r2,r3,2
 1000358:	10000a1e 	bne	r2,zero,1000384 <scan_sd_card+0x9c>
 100035c:	00001006 	br	10003a0 <scan_sd_card+0xb8>
		case 0: //sucess
			printf("%s\n", filename);
 1000360:	e13ffe17 	ldw	r4,-8(fp)
 1000364:	10005580 	call	1000558 <puts>
			look_for_other_files(filename);
 1000368:	e13ffe17 	ldw	r4,-8(fp)
 100036c:	10001f00 	call	10001f0 <look_for_other_files>
			break;
 1000370:	00000b06 	br	10003a0 <scan_sd_card+0xb8>
		case 1: //invalid directory
			printf("Invalid Directory.\n");
 1000374:	01004074 	movhi	r4,257
 1000378:	21321204 	addi	r4,r4,-14264
 100037c:	10005580 	call	1000558 <puts>
			break;
 1000380:	00000706 	br	10003a0 <scan_sd_card+0xb8>
		case 2: //no card present or no FAT 16 partition
			printf("Card not present or no FAT 16 partition.\n");
 1000384:	01004074 	movhi	r4,257
 1000388:	21321704 	addi	r4,r4,-14244
 100038c:	10005580 	call	1000558 <puts>
			break;
 1000390:	00000306 	br	10003a0 <scan_sd_card+0xb8>
		case -1: //No files were found in the directory
			printf("The directory is empty.\n");
 1000394:	01004074 	movhi	r4,257
 1000398:	21323804 	addi	r4,r4,-14112
 100039c:	10005580 	call	1000558 <puts>
			break;
	}
}
 10003a0:	e037883a 	mov	sp,fp
 10003a4:	dfc00117 	ldw	ra,4(sp)
 10003a8:	df000017 	ldw	fp,0(sp)
 10003ac:	dec00204 	addi	sp,sp,8
 10003b0:	f800283a 	ret

010003b4 <main>:


int main(void) {
 10003b4:	defffa04 	addi	sp,sp,-24
 10003b8:	dfc00515 	stw	ra,20(sp)
 10003bc:	df000415 	stw	fp,16(sp)
 10003c0:	df000404 	addi	fp,sp,16
	alt_up_sd_card_dev *device_reference = NULL;
 10003c4:	e03fff15 	stw	zero,-4(fp)
	int connected = 0;
 10003c8:	e03ffe15 	stw	zero,-8(fp)
	char *filename;
	char *directory = "folder/"; // root directory
 10003cc:	00804074 	movhi	r2,257
 10003d0:	10b23e04 	addi	r2,r2,-14088
 10003d4:	e0bffc15 	stw	r2,-16(fp)

	device_reference = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0");
 10003d8:	01004074 	movhi	r4,257
 10003dc:	21324004 	addi	r4,r4,-14080
 10003e0:	10067880 	call	1006788 <alt_up_sd_card_open_dev>
 10003e4:	e0bfff15 	stw	r2,-4(fp)
	printf("Program running\n");
 10003e8:	01004074 	movhi	r4,257
 10003ec:	21324b04 	addi	r4,r4,-14036
 10003f0:	10005580 	call	1000558 <puts>

	if (device_reference != NULL) {
 10003f4:	e0bfff17 	ldw	r2,-4(fp)
 10003f8:	1005003a 	cmpeq	r2,r2,zero
 10003fc:	1000251e 	bne	r2,zero,1000494 <main+0xe0>
 1000400:	00000006 	br	1000404 <main+0x50>
		while(1) {
			if ((connected == 0) && (alt_up_sd_card_is_Present())) {
 1000404:	e0bffe17 	ldw	r2,-8(fp)
 1000408:	1004c03a 	cmpne	r2,r2,zero
 100040c:	1000161e 	bne	r2,zero,1000468 <main+0xb4>
 1000410:	100684c0 	call	100684c <alt_up_sd_card_is_Present>
 1000414:	1005003a 	cmpeq	r2,r2,zero
 1000418:	1000131e 	bne	r2,zero,1000468 <main+0xb4>
				printf("Card connected.\n");
 100041c:	01004074 	movhi	r4,257
 1000420:	21324f04 	addi	r4,r4,-14020
 1000424:	10005580 	call	1000558 <puts>
				if (alt_up_sd_card_is_FAT16()) {
 1000428:	10069140 	call	1006914 <alt_up_sd_card_is_FAT16>
 100042c:	1005003a 	cmpeq	r2,r2,zero
 1000430:	1000071e 	bne	r2,zero,1000450 <main+0x9c>
					printf("FAT16 file system detected.\n");
 1000434:	01004074 	movhi	r4,257
 1000438:	21325304 	addi	r4,r4,-14004
 100043c:	10005580 	call	1000558 <puts>
					scan_sd_card(directory, filename);
 1000440:	e13ffc17 	ldw	r4,-16(fp)
 1000444:	e17ffd17 	ldw	r5,-12(fp)
 1000448:	10002e80 	call	10002e8 <scan_sd_card>
 100044c:	00000306 	br	100045c <main+0xa8>
				} else {
					printf("Unknown file system.\n");
 1000450:	01004074 	movhi	r4,257
 1000454:	21325a04 	addi	r4,r4,-13976
 1000458:	10005580 	call	1000558 <puts>
				}
				connected = 1;
 100045c:	00800044 	movi	r2,1
 1000460:	e0bffe15 	stw	r2,-8(fp)
	device_reference = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0");
	printf("Program running\n");

	if (device_reference != NULL) {
		while(1) {
			if ((connected == 0) && (alt_up_sd_card_is_Present())) {
 1000464:	003fe706 	br	1000404 <main+0x50>
				} else {
					printf("Unknown file system.\n");
				}
				connected = 1;
			}
			else if ((connected == 1) && (alt_up_sd_card_is_Present() == false)) {
 1000468:	e0bffe17 	ldw	r2,-8(fp)
 100046c:	10800058 	cmpnei	r2,r2,1
 1000470:	103fe41e 	bne	r2,zero,1000404 <main+0x50>
 1000474:	100684c0 	call	100684c <alt_up_sd_card_is_Present>
 1000478:	1004c03a 	cmpne	r2,r2,zero
 100047c:	103fe11e 	bne	r2,zero,1000404 <main+0x50>
				printf("Card disconnected.\n");
 1000480:	01004074 	movhi	r4,257
 1000484:	21326004 	addi	r4,r4,-13952
 1000488:	10005580 	call	1000558 <puts>
				connected = 0;
 100048c:	e03ffe15 	stw	zero,-8(fp)
			}
		}
 1000490:	003fdc06 	br	1000404 <main+0x50>
	}

	printf("Device reference is wrong\n");
 1000494:	01004074 	movhi	r4,257
 1000498:	21326504 	addi	r4,r4,-13932
 100049c:	10005580 	call	1000558 <puts>

	return 0;
 10004a0:	0005883a 	mov	r2,zero
}
 10004a4:	e037883a 	mov	sp,fp
 10004a8:	dfc00117 	ldw	ra,4(sp)
 10004ac:	df000017 	ldw	fp,0(sp)
 10004b0:	dec00204 	addi	sp,sp,8
 10004b4:	f800283a 	ret

010004b8 <_puts_r>:
 10004b8:	defff604 	addi	sp,sp,-40
 10004bc:	dc400715 	stw	r17,28(sp)
 10004c0:	2023883a 	mov	r17,r4
 10004c4:	2809883a 	mov	r4,r5
 10004c8:	dfc00915 	stw	ra,36(sp)
 10004cc:	dcc00815 	stw	r19,32(sp)
 10004d0:	2827883a 	mov	r19,r5
 10004d4:	100056c0 	call	100056c <strlen>
 10004d8:	89400217 	ldw	r5,8(r17)
 10004dc:	00c04074 	movhi	r3,257
 10004e0:	18f26c04 	addi	r3,r3,-13904
 10004e4:	01c00044 	movi	r7,1
 10004e8:	12000044 	addi	r8,r2,1
 10004ec:	d8c00515 	stw	r3,20(sp)
 10004f0:	d9c00615 	stw	r7,24(sp)
 10004f4:	d8c00304 	addi	r3,sp,12
 10004f8:	01c00084 	movi	r7,2
 10004fc:	8809883a 	mov	r4,r17
 1000500:	d80d883a 	mov	r6,sp
 1000504:	d8c00015 	stw	r3,0(sp)
 1000508:	dcc00315 	stw	r19,12(sp)
 100050c:	da000215 	stw	r8,8(sp)
 1000510:	d9c00115 	stw	r7,4(sp)
 1000514:	d8800415 	stw	r2,16(sp)
 1000518:	10005e00 	call	10005e0 <__sfvwrite_r>
 100051c:	00ffffc4 	movi	r3,-1
 1000520:	10000626 	beq	r2,zero,100053c <_puts_r+0x84>
 1000524:	1805883a 	mov	r2,r3
 1000528:	dfc00917 	ldw	ra,36(sp)
 100052c:	dcc00817 	ldw	r19,32(sp)
 1000530:	dc400717 	ldw	r17,28(sp)
 1000534:	dec00a04 	addi	sp,sp,40
 1000538:	f800283a 	ret
 100053c:	00c00284 	movi	r3,10
 1000540:	1805883a 	mov	r2,r3
 1000544:	dfc00917 	ldw	ra,36(sp)
 1000548:	dcc00817 	ldw	r19,32(sp)
 100054c:	dc400717 	ldw	r17,28(sp)
 1000550:	dec00a04 	addi	sp,sp,40
 1000554:	f800283a 	ret

01000558 <puts>:
 1000558:	00804074 	movhi	r2,257
 100055c:	10b9a904 	addi	r2,r2,-6492
 1000560:	200b883a 	mov	r5,r4
 1000564:	11000017 	ldw	r4,0(r2)
 1000568:	10004b81 	jmpi	10004b8 <_puts_r>

0100056c <strlen>:
 100056c:	208000cc 	andi	r2,r4,3
 1000570:	2011883a 	mov	r8,r4
 1000574:	1000161e 	bne	r2,zero,10005d0 <strlen+0x64>
 1000578:	20c00017 	ldw	r3,0(r4)
 100057c:	017fbff4 	movhi	r5,65279
 1000580:	297fbfc4 	addi	r5,r5,-257
 1000584:	01e02074 	movhi	r7,32897
 1000588:	39e02004 	addi	r7,r7,-32640
 100058c:	1945883a 	add	r2,r3,r5
 1000590:	11c4703a 	and	r2,r2,r7
 1000594:	00c6303a 	nor	r3,zero,r3
 1000598:	1886703a 	and	r3,r3,r2
 100059c:	18000c1e 	bne	r3,zero,10005d0 <strlen+0x64>
 10005a0:	280d883a 	mov	r6,r5
 10005a4:	380b883a 	mov	r5,r7
 10005a8:	21000104 	addi	r4,r4,4
 10005ac:	20800017 	ldw	r2,0(r4)
 10005b0:	1187883a 	add	r3,r2,r6
 10005b4:	1946703a 	and	r3,r3,r5
 10005b8:	0084303a 	nor	r2,zero,r2
 10005bc:	10c4703a 	and	r2,r2,r3
 10005c0:	103ff926 	beq	r2,zero,10005a8 <strlen+0x3c>
 10005c4:	20800007 	ldb	r2,0(r4)
 10005c8:	10000326 	beq	r2,zero,10005d8 <strlen+0x6c>
 10005cc:	21000044 	addi	r4,r4,1
 10005d0:	20800007 	ldb	r2,0(r4)
 10005d4:	103ffd1e 	bne	r2,zero,10005cc <strlen+0x60>
 10005d8:	2205c83a 	sub	r2,r4,r8
 10005dc:	f800283a 	ret

010005e0 <__sfvwrite_r>:
 10005e0:	30800217 	ldw	r2,8(r6)
 10005e4:	defff504 	addi	sp,sp,-44
 10005e8:	df000915 	stw	fp,36(sp)
 10005ec:	dd800715 	stw	r22,28(sp)
 10005f0:	dc800315 	stw	r18,12(sp)
 10005f4:	dfc00a15 	stw	ra,40(sp)
 10005f8:	ddc00815 	stw	r23,32(sp)
 10005fc:	dd400615 	stw	r21,24(sp)
 1000600:	dd000515 	stw	r20,20(sp)
 1000604:	dcc00415 	stw	r19,16(sp)
 1000608:	dc400215 	stw	r17,8(sp)
 100060c:	dc000115 	stw	r16,4(sp)
 1000610:	302d883a 	mov	r22,r6
 1000614:	2039883a 	mov	fp,r4
 1000618:	2825883a 	mov	r18,r5
 100061c:	10001c26 	beq	r2,zero,1000690 <__sfvwrite_r+0xb0>
 1000620:	29c0030b 	ldhu	r7,12(r5)
 1000624:	3880020c 	andi	r2,r7,8
 1000628:	10002726 	beq	r2,zero,10006c8 <__sfvwrite_r+0xe8>
 100062c:	28800417 	ldw	r2,16(r5)
 1000630:	10002526 	beq	r2,zero,10006c8 <__sfvwrite_r+0xe8>
 1000634:	3880008c 	andi	r2,r7,2
 1000638:	b5400017 	ldw	r21,0(r22)
 100063c:	10002826 	beq	r2,zero,10006e0 <__sfvwrite_r+0x100>
 1000640:	0021883a 	mov	r16,zero
 1000644:	0023883a 	mov	r17,zero
 1000648:	880d883a 	mov	r6,r17
 100064c:	e009883a 	mov	r4,fp
 1000650:	00810004 	movi	r2,1024
 1000654:	80006e26 	beq	r16,zero,1000810 <__sfvwrite_r+0x230>
 1000658:	800f883a 	mov	r7,r16
 100065c:	91400717 	ldw	r5,28(r18)
 1000660:	1400012e 	bgeu	r2,r16,1000668 <__sfvwrite_r+0x88>
 1000664:	100f883a 	mov	r7,r2
 1000668:	90c00917 	ldw	r3,36(r18)
 100066c:	183ee83a 	callr	r3
 1000670:	1007883a 	mov	r3,r2
 1000674:	80a1c83a 	sub	r16,r16,r2
 1000678:	88a3883a 	add	r17,r17,r2
 100067c:	00806d0e 	bge	zero,r2,1000834 <__sfvwrite_r+0x254>
 1000680:	b0800217 	ldw	r2,8(r22)
 1000684:	10c5c83a 	sub	r2,r2,r3
 1000688:	b0800215 	stw	r2,8(r22)
 100068c:	103fee1e 	bne	r2,zero,1000648 <__sfvwrite_r+0x68>
 1000690:	0009883a 	mov	r4,zero
 1000694:	2005883a 	mov	r2,r4
 1000698:	dfc00a17 	ldw	ra,40(sp)
 100069c:	df000917 	ldw	fp,36(sp)
 10006a0:	ddc00817 	ldw	r23,32(sp)
 10006a4:	dd800717 	ldw	r22,28(sp)
 10006a8:	dd400617 	ldw	r21,24(sp)
 10006ac:	dd000517 	ldw	r20,20(sp)
 10006b0:	dcc00417 	ldw	r19,16(sp)
 10006b4:	dc800317 	ldw	r18,12(sp)
 10006b8:	dc400217 	ldw	r17,8(sp)
 10006bc:	dc000117 	ldw	r16,4(sp)
 10006c0:	dec00b04 	addi	sp,sp,44
 10006c4:	f800283a 	ret
 10006c8:	1001a840 	call	1001a84 <__swsetup_r>
 10006cc:	1000e41e 	bne	r2,zero,1000a60 <__sfvwrite_r+0x480>
 10006d0:	91c0030b 	ldhu	r7,12(r18)
 10006d4:	b5400017 	ldw	r21,0(r22)
 10006d8:	3880008c 	andi	r2,r7,2
 10006dc:	103fd81e 	bne	r2,zero,1000640 <__sfvwrite_r+0x60>
 10006e0:	3880004c 	andi	r2,r7,1
 10006e4:	1005003a 	cmpeq	r2,r2,zero
 10006e8:	10005726 	beq	r2,zero,1000848 <__sfvwrite_r+0x268>
 10006ec:	0029883a 	mov	r20,zero
 10006f0:	002f883a 	mov	r23,zero
 10006f4:	a0004226 	beq	r20,zero,1000800 <__sfvwrite_r+0x220>
 10006f8:	3880800c 	andi	r2,r7,512
 10006fc:	94000217 	ldw	r16,8(r18)
 1000700:	10008b26 	beq	r2,zero,1000930 <__sfvwrite_r+0x350>
 1000704:	800d883a 	mov	r6,r16
 1000708:	a400a536 	bltu	r20,r16,10009a0 <__sfvwrite_r+0x3c0>
 100070c:	3881200c 	andi	r2,r7,1152
 1000710:	10002726 	beq	r2,zero,10007b0 <__sfvwrite_r+0x1d0>
 1000714:	90800517 	ldw	r2,20(r18)
 1000718:	92000417 	ldw	r8,16(r18)
 100071c:	91400017 	ldw	r5,0(r18)
 1000720:	1087883a 	add	r3,r2,r2
 1000724:	1887883a 	add	r3,r3,r2
 1000728:	1808d7fa 	srli	r4,r3,31
 100072c:	2a21c83a 	sub	r16,r5,r8
 1000730:	80800044 	addi	r2,r16,1
 1000734:	20c9883a 	add	r4,r4,r3
 1000738:	2027d07a 	srai	r19,r4,1
 100073c:	a085883a 	add	r2,r20,r2
 1000740:	980d883a 	mov	r6,r19
 1000744:	9880022e 	bgeu	r19,r2,1000750 <__sfvwrite_r+0x170>
 1000748:	1027883a 	mov	r19,r2
 100074c:	100d883a 	mov	r6,r2
 1000750:	3881000c 	andi	r2,r7,1024
 1000754:	1000b826 	beq	r2,zero,1000a38 <__sfvwrite_r+0x458>
 1000758:	300b883a 	mov	r5,r6
 100075c:	e009883a 	mov	r4,fp
 1000760:	1000a7c0 	call	1000a7c <_malloc_r>
 1000764:	10003126 	beq	r2,zero,100082c <__sfvwrite_r+0x24c>
 1000768:	91400417 	ldw	r5,16(r18)
 100076c:	1009883a 	mov	r4,r2
 1000770:	800d883a 	mov	r6,r16
 1000774:	1023883a 	mov	r17,r2
 1000778:	10012a00 	call	10012a0 <memcpy>
 100077c:	90c0030b 	ldhu	r3,12(r18)
 1000780:	00beffc4 	movi	r2,-1025
 1000784:	1886703a 	and	r3,r3,r2
 1000788:	18c02014 	ori	r3,r3,128
 100078c:	90c0030d 	sth	r3,12(r18)
 1000790:	9c07c83a 	sub	r3,r19,r16
 1000794:	8c05883a 	add	r2,r17,r16
 1000798:	a00d883a 	mov	r6,r20
 100079c:	a021883a 	mov	r16,r20
 10007a0:	90800015 	stw	r2,0(r18)
 10007a4:	90c00215 	stw	r3,8(r18)
 10007a8:	94400415 	stw	r17,16(r18)
 10007ac:	94c00515 	stw	r19,20(r18)
 10007b0:	91000017 	ldw	r4,0(r18)
 10007b4:	b80b883a 	mov	r5,r23
 10007b8:	a023883a 	mov	r17,r20
 10007bc:	10013400 	call	1001340 <memmove>
 10007c0:	90c00217 	ldw	r3,8(r18)
 10007c4:	90800017 	ldw	r2,0(r18)
 10007c8:	a027883a 	mov	r19,r20
 10007cc:	1c07c83a 	sub	r3,r3,r16
 10007d0:	1405883a 	add	r2,r2,r16
 10007d4:	90c00215 	stw	r3,8(r18)
 10007d8:	a021883a 	mov	r16,r20
 10007dc:	90800015 	stw	r2,0(r18)
 10007e0:	b0800217 	ldw	r2,8(r22)
 10007e4:	1405c83a 	sub	r2,r2,r16
 10007e8:	b0800215 	stw	r2,8(r22)
 10007ec:	103fa826 	beq	r2,zero,1000690 <__sfvwrite_r+0xb0>
 10007f0:	a469c83a 	sub	r20,r20,r17
 10007f4:	91c0030b 	ldhu	r7,12(r18)
 10007f8:	bcef883a 	add	r23,r23,r19
 10007fc:	a03fbe1e 	bne	r20,zero,10006f8 <__sfvwrite_r+0x118>
 1000800:	adc00017 	ldw	r23,0(r21)
 1000804:	ad000117 	ldw	r20,4(r21)
 1000808:	ad400204 	addi	r21,r21,8
 100080c:	003fb906 	br	10006f4 <__sfvwrite_r+0x114>
 1000810:	ac400017 	ldw	r17,0(r21)
 1000814:	ac000117 	ldw	r16,4(r21)
 1000818:	ad400204 	addi	r21,r21,8
 100081c:	003f8a06 	br	1000648 <__sfvwrite_r+0x68>
 1000820:	91400417 	ldw	r5,16(r18)
 1000824:	e009883a 	mov	r4,fp
 1000828:	10022100 	call	1002210 <_free_r>
 100082c:	00800304 	movi	r2,12
 1000830:	e0800015 	stw	r2,0(fp)
 1000834:	9080030b 	ldhu	r2,12(r18)
 1000838:	013fffc4 	movi	r4,-1
 100083c:	10801014 	ori	r2,r2,64
 1000840:	9080030d 	sth	r2,12(r18)
 1000844:	003f9306 	br	1000694 <__sfvwrite_r+0xb4>
 1000848:	0027883a 	mov	r19,zero
 100084c:	002f883a 	mov	r23,zero
 1000850:	d8000015 	stw	zero,0(sp)
 1000854:	0029883a 	mov	r20,zero
 1000858:	98001e26 	beq	r19,zero,10008d4 <__sfvwrite_r+0x2f4>
 100085c:	d8c00017 	ldw	r3,0(sp)
 1000860:	1804c03a 	cmpne	r2,r3,zero
 1000864:	10005e26 	beq	r2,zero,10009e0 <__sfvwrite_r+0x400>
 1000868:	9821883a 	mov	r16,r19
 100086c:	a4c0012e 	bgeu	r20,r19,1000874 <__sfvwrite_r+0x294>
 1000870:	a021883a 	mov	r16,r20
 1000874:	91000017 	ldw	r4,0(r18)
 1000878:	90800417 	ldw	r2,16(r18)
 100087c:	91800217 	ldw	r6,8(r18)
 1000880:	91c00517 	ldw	r7,20(r18)
 1000884:	1100022e 	bgeu	r2,r4,1000890 <__sfvwrite_r+0x2b0>
 1000888:	31e3883a 	add	r17,r6,r7
 100088c:	8c001616 	blt	r17,r16,10008e8 <__sfvwrite_r+0x308>
 1000890:	81c03816 	blt	r16,r7,1000974 <__sfvwrite_r+0x394>
 1000894:	90c00917 	ldw	r3,36(r18)
 1000898:	91400717 	ldw	r5,28(r18)
 100089c:	e009883a 	mov	r4,fp
 10008a0:	b80d883a 	mov	r6,r23
 10008a4:	183ee83a 	callr	r3
 10008a8:	1023883a 	mov	r17,r2
 10008ac:	00bfe10e 	bge	zero,r2,1000834 <__sfvwrite_r+0x254>
 10008b0:	a469c83a 	sub	r20,r20,r17
 10008b4:	a0001826 	beq	r20,zero,1000918 <__sfvwrite_r+0x338>
 10008b8:	b0800217 	ldw	r2,8(r22)
 10008bc:	1445c83a 	sub	r2,r2,r17
 10008c0:	b0800215 	stw	r2,8(r22)
 10008c4:	103f7226 	beq	r2,zero,1000690 <__sfvwrite_r+0xb0>
 10008c8:	9c67c83a 	sub	r19,r19,r17
 10008cc:	bc6f883a 	add	r23,r23,r17
 10008d0:	983fe21e 	bne	r19,zero,100085c <__sfvwrite_r+0x27c>
 10008d4:	adc00017 	ldw	r23,0(r21)
 10008d8:	acc00117 	ldw	r19,4(r21)
 10008dc:	ad400204 	addi	r21,r21,8
 10008e0:	d8000015 	stw	zero,0(sp)
 10008e4:	003fdc06 	br	1000858 <__sfvwrite_r+0x278>
 10008e8:	b80b883a 	mov	r5,r23
 10008ec:	880d883a 	mov	r6,r17
 10008f0:	10013400 	call	1001340 <memmove>
 10008f4:	90c00017 	ldw	r3,0(r18)
 10008f8:	e009883a 	mov	r4,fp
 10008fc:	900b883a 	mov	r5,r18
 1000900:	1c47883a 	add	r3,r3,r17
 1000904:	90c00015 	stw	r3,0(r18)
 1000908:	1001bc00 	call	1001bc0 <_fflush_r>
 100090c:	103fc91e 	bne	r2,zero,1000834 <__sfvwrite_r+0x254>
 1000910:	a469c83a 	sub	r20,r20,r17
 1000914:	a03fe81e 	bne	r20,zero,10008b8 <__sfvwrite_r+0x2d8>
 1000918:	e009883a 	mov	r4,fp
 100091c:	900b883a 	mov	r5,r18
 1000920:	1001bc00 	call	1001bc0 <_fflush_r>
 1000924:	103fc31e 	bne	r2,zero,1000834 <__sfvwrite_r+0x254>
 1000928:	d8000015 	stw	zero,0(sp)
 100092c:	003fe206 	br	10008b8 <__sfvwrite_r+0x2d8>
 1000930:	91000017 	ldw	r4,0(r18)
 1000934:	90800417 	ldw	r2,16(r18)
 1000938:	1100022e 	bgeu	r2,r4,1000944 <__sfvwrite_r+0x364>
 100093c:	8023883a 	mov	r17,r16
 1000940:	85003136 	bltu	r16,r20,1000a08 <__sfvwrite_r+0x428>
 1000944:	91c00517 	ldw	r7,20(r18)
 1000948:	a1c01836 	bltu	r20,r7,10009ac <__sfvwrite_r+0x3cc>
 100094c:	90c00917 	ldw	r3,36(r18)
 1000950:	91400717 	ldw	r5,28(r18)
 1000954:	e009883a 	mov	r4,fp
 1000958:	b80d883a 	mov	r6,r23
 100095c:	183ee83a 	callr	r3
 1000960:	1021883a 	mov	r16,r2
 1000964:	00bfb30e 	bge	zero,r2,1000834 <__sfvwrite_r+0x254>
 1000968:	1023883a 	mov	r17,r2
 100096c:	1027883a 	mov	r19,r2
 1000970:	003f9b06 	br	10007e0 <__sfvwrite_r+0x200>
 1000974:	b80b883a 	mov	r5,r23
 1000978:	800d883a 	mov	r6,r16
 100097c:	10013400 	call	1001340 <memmove>
 1000980:	90c00217 	ldw	r3,8(r18)
 1000984:	90800017 	ldw	r2,0(r18)
 1000988:	8023883a 	mov	r17,r16
 100098c:	1c07c83a 	sub	r3,r3,r16
 1000990:	1405883a 	add	r2,r2,r16
 1000994:	90c00215 	stw	r3,8(r18)
 1000998:	90800015 	stw	r2,0(r18)
 100099c:	003fc406 	br	10008b0 <__sfvwrite_r+0x2d0>
 10009a0:	a00d883a 	mov	r6,r20
 10009a4:	a021883a 	mov	r16,r20
 10009a8:	003f8106 	br	10007b0 <__sfvwrite_r+0x1d0>
 10009ac:	b80b883a 	mov	r5,r23
 10009b0:	a00d883a 	mov	r6,r20
 10009b4:	10013400 	call	1001340 <memmove>
 10009b8:	90c00217 	ldw	r3,8(r18)
 10009bc:	90800017 	ldw	r2,0(r18)
 10009c0:	a021883a 	mov	r16,r20
 10009c4:	1d07c83a 	sub	r3,r3,r20
 10009c8:	1505883a 	add	r2,r2,r20
 10009cc:	a023883a 	mov	r17,r20
 10009d0:	a027883a 	mov	r19,r20
 10009d4:	90c00215 	stw	r3,8(r18)
 10009d8:	90800015 	stw	r2,0(r18)
 10009dc:	003f8006 	br	10007e0 <__sfvwrite_r+0x200>
 10009e0:	b809883a 	mov	r4,r23
 10009e4:	01400284 	movi	r5,10
 10009e8:	980d883a 	mov	r6,r19
 10009ec:	10011bc0 	call	10011bc <memchr>
 10009f0:	10001726 	beq	r2,zero,1000a50 <__sfvwrite_r+0x470>
 10009f4:	15c5c83a 	sub	r2,r2,r23
 10009f8:	15000044 	addi	r20,r2,1
 10009fc:	00800044 	movi	r2,1
 1000a00:	d8800015 	stw	r2,0(sp)
 1000a04:	003f9806 	br	1000868 <__sfvwrite_r+0x288>
 1000a08:	b80b883a 	mov	r5,r23
 1000a0c:	800d883a 	mov	r6,r16
 1000a10:	10013400 	call	1001340 <memmove>
 1000a14:	90c00017 	ldw	r3,0(r18)
 1000a18:	e009883a 	mov	r4,fp
 1000a1c:	900b883a 	mov	r5,r18
 1000a20:	1c07883a 	add	r3,r3,r16
 1000a24:	90c00015 	stw	r3,0(r18)
 1000a28:	8027883a 	mov	r19,r16
 1000a2c:	1001bc00 	call	1001bc0 <_fflush_r>
 1000a30:	103f6b26 	beq	r2,zero,10007e0 <__sfvwrite_r+0x200>
 1000a34:	003f7f06 	br	1000834 <__sfvwrite_r+0x254>
 1000a38:	400b883a 	mov	r5,r8
 1000a3c:	e009883a 	mov	r4,fp
 1000a40:	10014200 	call	1001420 <_realloc_r>
 1000a44:	103f7626 	beq	r2,zero,1000820 <__sfvwrite_r+0x240>
 1000a48:	1023883a 	mov	r17,r2
 1000a4c:	003f5006 	br	1000790 <__sfvwrite_r+0x1b0>
 1000a50:	00c00044 	movi	r3,1
 1000a54:	9d000044 	addi	r20,r19,1
 1000a58:	d8c00015 	stw	r3,0(sp)
 1000a5c:	003f8206 	br	1000868 <__sfvwrite_r+0x288>
 1000a60:	9080030b 	ldhu	r2,12(r18)
 1000a64:	00c00244 	movi	r3,9
 1000a68:	013fffc4 	movi	r4,-1
 1000a6c:	10801014 	ori	r2,r2,64
 1000a70:	9080030d 	sth	r2,12(r18)
 1000a74:	e0c00015 	stw	r3,0(fp)
 1000a78:	003f0606 	br	1000694 <__sfvwrite_r+0xb4>

01000a7c <_malloc_r>:
 1000a7c:	defff604 	addi	sp,sp,-40
 1000a80:	28c002c4 	addi	r3,r5,11
 1000a84:	00800584 	movi	r2,22
 1000a88:	dc800215 	stw	r18,8(sp)
 1000a8c:	dfc00915 	stw	ra,36(sp)
 1000a90:	df000815 	stw	fp,32(sp)
 1000a94:	ddc00715 	stw	r23,28(sp)
 1000a98:	dd800615 	stw	r22,24(sp)
 1000a9c:	dd400515 	stw	r21,20(sp)
 1000aa0:	dd000415 	stw	r20,16(sp)
 1000aa4:	dcc00315 	stw	r19,12(sp)
 1000aa8:	dc400115 	stw	r17,4(sp)
 1000aac:	dc000015 	stw	r16,0(sp)
 1000ab0:	2025883a 	mov	r18,r4
 1000ab4:	10c01236 	bltu	r2,r3,1000b00 <_malloc_r+0x84>
 1000ab8:	04400404 	movi	r17,16
 1000abc:	8940142e 	bgeu	r17,r5,1000b10 <_malloc_r+0x94>
 1000ac0:	00800304 	movi	r2,12
 1000ac4:	0007883a 	mov	r3,zero
 1000ac8:	90800015 	stw	r2,0(r18)
 1000acc:	1805883a 	mov	r2,r3
 1000ad0:	dfc00917 	ldw	ra,36(sp)
 1000ad4:	df000817 	ldw	fp,32(sp)
 1000ad8:	ddc00717 	ldw	r23,28(sp)
 1000adc:	dd800617 	ldw	r22,24(sp)
 1000ae0:	dd400517 	ldw	r21,20(sp)
 1000ae4:	dd000417 	ldw	r20,16(sp)
 1000ae8:	dcc00317 	ldw	r19,12(sp)
 1000aec:	dc800217 	ldw	r18,8(sp)
 1000af0:	dc400117 	ldw	r17,4(sp)
 1000af4:	dc000017 	ldw	r16,0(sp)
 1000af8:	dec00a04 	addi	sp,sp,40
 1000afc:	f800283a 	ret
 1000b00:	00bffe04 	movi	r2,-8
 1000b04:	18a2703a 	and	r17,r3,r2
 1000b08:	883fed16 	blt	r17,zero,1000ac0 <_malloc_r+0x44>
 1000b0c:	897fec36 	bltu	r17,r5,1000ac0 <_malloc_r+0x44>
 1000b10:	9009883a 	mov	r4,r18
 1000b14:	10034c80 	call	10034c8 <__malloc_lock>
 1000b18:	00807dc4 	movi	r2,503
 1000b1c:	14402b2e 	bgeu	r2,r17,1000bcc <_malloc_r+0x150>
 1000b20:	8806d27a 	srli	r3,r17,9
 1000b24:	18003f1e 	bne	r3,zero,1000c24 <_malloc_r+0x1a8>
 1000b28:	880cd0fa 	srli	r6,r17,3
 1000b2c:	300490fa 	slli	r2,r6,3
 1000b30:	02c04074 	movhi	r11,257
 1000b34:	5af40f04 	addi	r11,r11,-12228
 1000b38:	12cb883a 	add	r5,r2,r11
 1000b3c:	2c000317 	ldw	r16,12(r5)
 1000b40:	580f883a 	mov	r7,r11
 1000b44:	2c00041e 	bne	r5,r16,1000b58 <_malloc_r+0xdc>
 1000b48:	00000a06 	br	1000b74 <_malloc_r+0xf8>
 1000b4c:	1800860e 	bge	r3,zero,1000d68 <_malloc_r+0x2ec>
 1000b50:	84000317 	ldw	r16,12(r16)
 1000b54:	2c000726 	beq	r5,r16,1000b74 <_malloc_r+0xf8>
 1000b58:	80800117 	ldw	r2,4(r16)
 1000b5c:	00ffff04 	movi	r3,-4
 1000b60:	10c8703a 	and	r4,r2,r3
 1000b64:	2447c83a 	sub	r3,r4,r17
 1000b68:	008003c4 	movi	r2,15
 1000b6c:	10fff70e 	bge	r2,r3,1000b4c <_malloc_r+0xd0>
 1000b70:	31bfffc4 	addi	r6,r6,-1
 1000b74:	32400044 	addi	r9,r6,1
 1000b78:	02804074 	movhi	r10,257
 1000b7c:	52b41104 	addi	r10,r10,-12220
 1000b80:	54000217 	ldw	r16,8(r10)
 1000b84:	8280a026 	beq	r16,r10,1000e08 <_malloc_r+0x38c>
 1000b88:	80800117 	ldw	r2,4(r16)
 1000b8c:	00ffff04 	movi	r3,-4
 1000b90:	10ca703a 	and	r5,r2,r3
 1000b94:	2c4dc83a 	sub	r6,r5,r17
 1000b98:	008003c4 	movi	r2,15
 1000b9c:	11808316 	blt	r2,r6,1000dac <_malloc_r+0x330>
 1000ba0:	52800315 	stw	r10,12(r10)
 1000ba4:	52800215 	stw	r10,8(r10)
 1000ba8:	30002916 	blt	r6,zero,1000c50 <_malloc_r+0x1d4>
 1000bac:	8147883a 	add	r3,r16,r5
 1000bb0:	18800117 	ldw	r2,4(r3)
 1000bb4:	9009883a 	mov	r4,r18
 1000bb8:	10800054 	ori	r2,r2,1
 1000bbc:	18800115 	stw	r2,4(r3)
 1000bc0:	10034e80 	call	10034e8 <__malloc_unlock>
 1000bc4:	80c00204 	addi	r3,r16,8
 1000bc8:	003fc006 	br	1000acc <_malloc_r+0x50>
 1000bcc:	02c04074 	movhi	r11,257
 1000bd0:	5af40f04 	addi	r11,r11,-12228
 1000bd4:	8ac5883a 	add	r2,r17,r11
 1000bd8:	14000317 	ldw	r16,12(r2)
 1000bdc:	580f883a 	mov	r7,r11
 1000be0:	8806d0fa 	srli	r3,r17,3
 1000be4:	14006c26 	beq	r2,r16,1000d98 <_malloc_r+0x31c>
 1000be8:	80c00117 	ldw	r3,4(r16)
 1000bec:	00bfff04 	movi	r2,-4
 1000bf0:	81800317 	ldw	r6,12(r16)
 1000bf4:	1886703a 	and	r3,r3,r2
 1000bf8:	80c7883a 	add	r3,r16,r3
 1000bfc:	18800117 	ldw	r2,4(r3)
 1000c00:	81400217 	ldw	r5,8(r16)
 1000c04:	9009883a 	mov	r4,r18
 1000c08:	10800054 	ori	r2,r2,1
 1000c0c:	18800115 	stw	r2,4(r3)
 1000c10:	31400215 	stw	r5,8(r6)
 1000c14:	29800315 	stw	r6,12(r5)
 1000c18:	10034e80 	call	10034e8 <__malloc_unlock>
 1000c1c:	80c00204 	addi	r3,r16,8
 1000c20:	003faa06 	br	1000acc <_malloc_r+0x50>
 1000c24:	00800104 	movi	r2,4
 1000c28:	10c0052e 	bgeu	r2,r3,1000c40 <_malloc_r+0x1c4>
 1000c2c:	00800504 	movi	r2,20
 1000c30:	10c07836 	bltu	r2,r3,1000e14 <_malloc_r+0x398>
 1000c34:	198016c4 	addi	r6,r3,91
 1000c38:	300490fa 	slli	r2,r6,3
 1000c3c:	003fbc06 	br	1000b30 <_malloc_r+0xb4>
 1000c40:	8804d1ba 	srli	r2,r17,6
 1000c44:	11800e04 	addi	r6,r2,56
 1000c48:	300490fa 	slli	r2,r6,3
 1000c4c:	003fb806 	br	1000b30 <_malloc_r+0xb4>
 1000c50:	00807fc4 	movi	r2,511
 1000c54:	1140bb36 	bltu	r2,r5,1000f44 <_malloc_r+0x4c8>
 1000c58:	2806d0fa 	srli	r3,r5,3
 1000c5c:	573ffe04 	addi	fp,r10,-8
 1000c60:	00800044 	movi	r2,1
 1000c64:	180890fa 	slli	r4,r3,3
 1000c68:	1807d0ba 	srai	r3,r3,2
 1000c6c:	e1c00117 	ldw	r7,4(fp)
 1000c70:	5909883a 	add	r4,r11,r4
 1000c74:	21400217 	ldw	r5,8(r4)
 1000c78:	10c4983a 	sll	r2,r2,r3
 1000c7c:	81000315 	stw	r4,12(r16)
 1000c80:	81400215 	stw	r5,8(r16)
 1000c84:	388eb03a 	or	r7,r7,r2
 1000c88:	2c000315 	stw	r16,12(r5)
 1000c8c:	24000215 	stw	r16,8(r4)
 1000c90:	e1c00115 	stw	r7,4(fp)
 1000c94:	4807883a 	mov	r3,r9
 1000c98:	4800cd16 	blt	r9,zero,1000fd0 <_malloc_r+0x554>
 1000c9c:	1807d0ba 	srai	r3,r3,2
 1000ca0:	00800044 	movi	r2,1
 1000ca4:	10c8983a 	sll	r4,r2,r3
 1000ca8:	39004436 	bltu	r7,r4,1000dbc <_malloc_r+0x340>
 1000cac:	21c4703a 	and	r2,r4,r7
 1000cb0:	10000a1e 	bne	r2,zero,1000cdc <_malloc_r+0x260>
 1000cb4:	2109883a 	add	r4,r4,r4
 1000cb8:	00bfff04 	movi	r2,-4
 1000cbc:	4884703a 	and	r2,r9,r2
 1000cc0:	3906703a 	and	r3,r7,r4
 1000cc4:	12400104 	addi	r9,r2,4
 1000cc8:	1800041e 	bne	r3,zero,1000cdc <_malloc_r+0x260>
 1000ccc:	2109883a 	add	r4,r4,r4
 1000cd0:	3904703a 	and	r2,r7,r4
 1000cd4:	4a400104 	addi	r9,r9,4
 1000cd8:	103ffc26 	beq	r2,zero,1000ccc <_malloc_r+0x250>
 1000cdc:	480490fa 	slli	r2,r9,3
 1000ce0:	4819883a 	mov	r12,r9
 1000ce4:	023fff04 	movi	r8,-4
 1000ce8:	589b883a 	add	r13,r11,r2
 1000cec:	6807883a 	mov	r3,r13
 1000cf0:	014003c4 	movi	r5,15
 1000cf4:	1c000317 	ldw	r16,12(r3)
 1000cf8:	1c00041e 	bne	r3,r16,1000d0c <_malloc_r+0x290>
 1000cfc:	0000a706 	br	1000f9c <_malloc_r+0x520>
 1000d00:	3000ab0e 	bge	r6,zero,1000fb0 <_malloc_r+0x534>
 1000d04:	84000317 	ldw	r16,12(r16)
 1000d08:	1c00a426 	beq	r3,r16,1000f9c <_malloc_r+0x520>
 1000d0c:	80800117 	ldw	r2,4(r16)
 1000d10:	1204703a 	and	r2,r2,r8
 1000d14:	144dc83a 	sub	r6,r2,r17
 1000d18:	29bff90e 	bge	r5,r6,1000d00 <_malloc_r+0x284>
 1000d1c:	81000317 	ldw	r4,12(r16)
 1000d20:	80c00217 	ldw	r3,8(r16)
 1000d24:	89400054 	ori	r5,r17,1
 1000d28:	8445883a 	add	r2,r16,r17
 1000d2c:	20c00215 	stw	r3,8(r4)
 1000d30:	19000315 	stw	r4,12(r3)
 1000d34:	81400115 	stw	r5,4(r16)
 1000d38:	1187883a 	add	r3,r2,r6
 1000d3c:	31000054 	ori	r4,r6,1
 1000d40:	50800315 	stw	r2,12(r10)
 1000d44:	50800215 	stw	r2,8(r10)
 1000d48:	19800015 	stw	r6,0(r3)
 1000d4c:	11000115 	stw	r4,4(r2)
 1000d50:	12800215 	stw	r10,8(r2)
 1000d54:	12800315 	stw	r10,12(r2)
 1000d58:	9009883a 	mov	r4,r18
 1000d5c:	10034e80 	call	10034e8 <__malloc_unlock>
 1000d60:	80c00204 	addi	r3,r16,8
 1000d64:	003f5906 	br	1000acc <_malloc_r+0x50>
 1000d68:	8109883a 	add	r4,r16,r4
 1000d6c:	20800117 	ldw	r2,4(r4)
 1000d70:	80c00217 	ldw	r3,8(r16)
 1000d74:	81400317 	ldw	r5,12(r16)
 1000d78:	10800054 	ori	r2,r2,1
 1000d7c:	20800115 	stw	r2,4(r4)
 1000d80:	28c00215 	stw	r3,8(r5)
 1000d84:	19400315 	stw	r5,12(r3)
 1000d88:	9009883a 	mov	r4,r18
 1000d8c:	10034e80 	call	10034e8 <__malloc_unlock>
 1000d90:	80c00204 	addi	r3,r16,8
 1000d94:	003f4d06 	br	1000acc <_malloc_r+0x50>
 1000d98:	80800204 	addi	r2,r16,8
 1000d9c:	14000317 	ldw	r16,12(r2)
 1000da0:	143f911e 	bne	r2,r16,1000be8 <_malloc_r+0x16c>
 1000da4:	1a400084 	addi	r9,r3,2
 1000da8:	003f7306 	br	1000b78 <_malloc_r+0xfc>
 1000dac:	88c00054 	ori	r3,r17,1
 1000db0:	8445883a 	add	r2,r16,r17
 1000db4:	80c00115 	stw	r3,4(r16)
 1000db8:	003fdf06 	br	1000d38 <_malloc_r+0x2bc>
 1000dbc:	e4000217 	ldw	r16,8(fp)
 1000dc0:	00bfff04 	movi	r2,-4
 1000dc4:	80c00117 	ldw	r3,4(r16)
 1000dc8:	802d883a 	mov	r22,r16
 1000dcc:	18aa703a 	and	r21,r3,r2
 1000dd0:	ac401636 	bltu	r21,r17,1000e2c <_malloc_r+0x3b0>
 1000dd4:	ac49c83a 	sub	r4,r21,r17
 1000dd8:	008003c4 	movi	r2,15
 1000ddc:	1100130e 	bge	r2,r4,1000e2c <_malloc_r+0x3b0>
 1000de0:	88800054 	ori	r2,r17,1
 1000de4:	8447883a 	add	r3,r16,r17
 1000de8:	80800115 	stw	r2,4(r16)
 1000dec:	20800054 	ori	r2,r4,1
 1000df0:	18800115 	stw	r2,4(r3)
 1000df4:	e0c00215 	stw	r3,8(fp)
 1000df8:	9009883a 	mov	r4,r18
 1000dfc:	10034e80 	call	10034e8 <__malloc_unlock>
 1000e00:	80c00204 	addi	r3,r16,8
 1000e04:	003f3106 	br	1000acc <_malloc_r+0x50>
 1000e08:	39c00117 	ldw	r7,4(r7)
 1000e0c:	573ffe04 	addi	fp,r10,-8
 1000e10:	003fa006 	br	1000c94 <_malloc_r+0x218>
 1000e14:	00801504 	movi	r2,84
 1000e18:	10c06736 	bltu	r2,r3,1000fb8 <_malloc_r+0x53c>
 1000e1c:	8804d33a 	srli	r2,r17,12
 1000e20:	11801b84 	addi	r6,r2,110
 1000e24:	300490fa 	slli	r2,r6,3
 1000e28:	003f4106 	br	1000b30 <_malloc_r+0xb4>
 1000e2c:	d0a6b617 	ldw	r2,-25896(gp)
 1000e30:	d0e00317 	ldw	r3,-32756(gp)
 1000e34:	053fffc4 	movi	r20,-1
 1000e38:	10800404 	addi	r2,r2,16
 1000e3c:	88a7883a 	add	r19,r17,r2
 1000e40:	1d000326 	beq	r3,r20,1000e50 <_malloc_r+0x3d4>
 1000e44:	98c3ffc4 	addi	r3,r19,4095
 1000e48:	00bc0004 	movi	r2,-4096
 1000e4c:	18a6703a 	and	r19,r3,r2
 1000e50:	9009883a 	mov	r4,r18
 1000e54:	980b883a 	mov	r5,r19
 1000e58:	1001a140 	call	1001a14 <_sbrk_r>
 1000e5c:	1009883a 	mov	r4,r2
 1000e60:	15000426 	beq	r2,r20,1000e74 <_malloc_r+0x3f8>
 1000e64:	854b883a 	add	r5,r16,r21
 1000e68:	1029883a 	mov	r20,r2
 1000e6c:	11405a2e 	bgeu	r2,r5,1000fd8 <_malloc_r+0x55c>
 1000e70:	87000c26 	beq	r16,fp,1000ea4 <_malloc_r+0x428>
 1000e74:	e4000217 	ldw	r16,8(fp)
 1000e78:	80c00117 	ldw	r3,4(r16)
 1000e7c:	00bfff04 	movi	r2,-4
 1000e80:	1884703a 	and	r2,r3,r2
 1000e84:	14400336 	bltu	r2,r17,1000e94 <_malloc_r+0x418>
 1000e88:	1449c83a 	sub	r4,r2,r17
 1000e8c:	008003c4 	movi	r2,15
 1000e90:	113fd316 	blt	r2,r4,1000de0 <_malloc_r+0x364>
 1000e94:	9009883a 	mov	r4,r18
 1000e98:	10034e80 	call	10034e8 <__malloc_unlock>
 1000e9c:	0007883a 	mov	r3,zero
 1000ea0:	003f0a06 	br	1000acc <_malloc_r+0x50>
 1000ea4:	05c04074 	movhi	r23,257
 1000ea8:	bdc07604 	addi	r23,r23,472
 1000eac:	b8800017 	ldw	r2,0(r23)
 1000eb0:	988d883a 	add	r6,r19,r2
 1000eb4:	b9800015 	stw	r6,0(r23)
 1000eb8:	d0e00317 	ldw	r3,-32756(gp)
 1000ebc:	00bfffc4 	movi	r2,-1
 1000ec0:	18808e26 	beq	r3,r2,10010fc <_malloc_r+0x680>
 1000ec4:	2145c83a 	sub	r2,r4,r5
 1000ec8:	3085883a 	add	r2,r6,r2
 1000ecc:	b8800015 	stw	r2,0(r23)
 1000ed0:	20c001cc 	andi	r3,r4,7
 1000ed4:	18005f1e 	bne	r3,zero,1001054 <_malloc_r+0x5d8>
 1000ed8:	000b883a 	mov	r5,zero
 1000edc:	a4c5883a 	add	r2,r20,r19
 1000ee0:	1083ffcc 	andi	r2,r2,4095
 1000ee4:	00c40004 	movi	r3,4096
 1000ee8:	1887c83a 	sub	r3,r3,r2
 1000eec:	28e7883a 	add	r19,r5,r3
 1000ef0:	9009883a 	mov	r4,r18
 1000ef4:	980b883a 	mov	r5,r19
 1000ef8:	1001a140 	call	1001a14 <_sbrk_r>
 1000efc:	1007883a 	mov	r3,r2
 1000f00:	00bfffc4 	movi	r2,-1
 1000f04:	18807a26 	beq	r3,r2,10010f0 <_malloc_r+0x674>
 1000f08:	1d05c83a 	sub	r2,r3,r20
 1000f0c:	9885883a 	add	r2,r19,r2
 1000f10:	10c00054 	ori	r3,r2,1
 1000f14:	b8800017 	ldw	r2,0(r23)
 1000f18:	a021883a 	mov	r16,r20
 1000f1c:	a0c00115 	stw	r3,4(r20)
 1000f20:	9885883a 	add	r2,r19,r2
 1000f24:	b8800015 	stw	r2,0(r23)
 1000f28:	e5000215 	stw	r20,8(fp)
 1000f2c:	b7003626 	beq	r22,fp,1001008 <_malloc_r+0x58c>
 1000f30:	018003c4 	movi	r6,15
 1000f34:	35404b36 	bltu	r6,r21,1001064 <_malloc_r+0x5e8>
 1000f38:	00800044 	movi	r2,1
 1000f3c:	a0800115 	stw	r2,4(r20)
 1000f40:	003fcd06 	br	1000e78 <_malloc_r+0x3fc>
 1000f44:	2808d27a 	srli	r4,r5,9
 1000f48:	2000371e 	bne	r4,zero,1001028 <_malloc_r+0x5ac>
 1000f4c:	2808d0fa 	srli	r4,r5,3
 1000f50:	200690fa 	slli	r3,r4,3
 1000f54:	1ad1883a 	add	r8,r3,r11
 1000f58:	41800217 	ldw	r6,8(r8)
 1000f5c:	41805b26 	beq	r8,r6,10010cc <_malloc_r+0x650>
 1000f60:	30800117 	ldw	r2,4(r6)
 1000f64:	00ffff04 	movi	r3,-4
 1000f68:	10c4703a 	and	r2,r2,r3
 1000f6c:	2880022e 	bgeu	r5,r2,1000f78 <_malloc_r+0x4fc>
 1000f70:	31800217 	ldw	r6,8(r6)
 1000f74:	41bffa1e 	bne	r8,r6,1000f60 <_malloc_r+0x4e4>
 1000f78:	32000317 	ldw	r8,12(r6)
 1000f7c:	39c00117 	ldw	r7,4(r7)
 1000f80:	82000315 	stw	r8,12(r16)
 1000f84:	81800215 	stw	r6,8(r16)
 1000f88:	07004074 	movhi	fp,257
 1000f8c:	e7340f04 	addi	fp,fp,-12228
 1000f90:	34000315 	stw	r16,12(r6)
 1000f94:	44000215 	stw	r16,8(r8)
 1000f98:	003f3e06 	br	1000c94 <_malloc_r+0x218>
 1000f9c:	63000044 	addi	r12,r12,1
 1000fa0:	608000cc 	andi	r2,r12,3
 1000fa4:	10005d26 	beq	r2,zero,100111c <_malloc_r+0x6a0>
 1000fa8:	18c00204 	addi	r3,r3,8
 1000fac:	003f5106 	br	1000cf4 <_malloc_r+0x278>
 1000fb0:	8089883a 	add	r4,r16,r2
 1000fb4:	003f6d06 	br	1000d6c <_malloc_r+0x2f0>
 1000fb8:	00805504 	movi	r2,340
 1000fbc:	10c02036 	bltu	r2,r3,1001040 <_malloc_r+0x5c4>
 1000fc0:	8804d3fa 	srli	r2,r17,15
 1000fc4:	11801dc4 	addi	r6,r2,119
 1000fc8:	300490fa 	slli	r2,r6,3
 1000fcc:	003ed806 	br	1000b30 <_malloc_r+0xb4>
 1000fd0:	48c000c4 	addi	r3,r9,3
 1000fd4:	003f3106 	br	1000c9c <_malloc_r+0x220>
 1000fd8:	05c04074 	movhi	r23,257
 1000fdc:	bdc07604 	addi	r23,r23,472
 1000fe0:	b8800017 	ldw	r2,0(r23)
 1000fe4:	988d883a 	add	r6,r19,r2
 1000fe8:	b9800015 	stw	r6,0(r23)
 1000fec:	293fb21e 	bne	r5,r4,1000eb8 <_malloc_r+0x43c>
 1000ff0:	2083ffcc 	andi	r2,r4,4095
 1000ff4:	103fb01e 	bne	r2,zero,1000eb8 <_malloc_r+0x43c>
 1000ff8:	e4000217 	ldw	r16,8(fp)
 1000ffc:	9d45883a 	add	r2,r19,r21
 1001000:	10800054 	ori	r2,r2,1
 1001004:	80800115 	stw	r2,4(r16)
 1001008:	b8c00017 	ldw	r3,0(r23)
 100100c:	d0a6b717 	ldw	r2,-25892(gp)
 1001010:	10c0012e 	bgeu	r2,r3,1001018 <_malloc_r+0x59c>
 1001014:	d0e6b715 	stw	r3,-25892(gp)
 1001018:	d0a6b817 	ldw	r2,-25888(gp)
 100101c:	10ff962e 	bgeu	r2,r3,1000e78 <_malloc_r+0x3fc>
 1001020:	d0e6b815 	stw	r3,-25888(gp)
 1001024:	003f9406 	br	1000e78 <_malloc_r+0x3fc>
 1001028:	00800104 	movi	r2,4
 100102c:	11001e36 	bltu	r2,r4,10010a8 <_malloc_r+0x62c>
 1001030:	2804d1ba 	srli	r2,r5,6
 1001034:	11000e04 	addi	r4,r2,56
 1001038:	200690fa 	slli	r3,r4,3
 100103c:	003fc506 	br	1000f54 <_malloc_r+0x4d8>
 1001040:	00815504 	movi	r2,1364
 1001044:	10c01d2e 	bgeu	r2,r3,10010bc <_malloc_r+0x640>
 1001048:	01801f84 	movi	r6,126
 100104c:	0080fc04 	movi	r2,1008
 1001050:	003eb706 	br	1000b30 <_malloc_r+0xb4>
 1001054:	00800204 	movi	r2,8
 1001058:	10cbc83a 	sub	r5,r2,r3
 100105c:	2169883a 	add	r20,r4,r5
 1001060:	003f9e06 	br	1000edc <_malloc_r+0x460>
 1001064:	00bffe04 	movi	r2,-8
 1001068:	a93ffd04 	addi	r4,r21,-12
 100106c:	2088703a 	and	r4,r4,r2
 1001070:	b10b883a 	add	r5,r22,r4
 1001074:	00c00144 	movi	r3,5
 1001078:	28c00215 	stw	r3,8(r5)
 100107c:	28c00115 	stw	r3,4(r5)
 1001080:	b0800117 	ldw	r2,4(r22)
 1001084:	1080004c 	andi	r2,r2,1
 1001088:	2084b03a 	or	r2,r4,r2
 100108c:	b0800115 	stw	r2,4(r22)
 1001090:	313fdd2e 	bgeu	r6,r4,1001008 <_malloc_r+0x58c>
 1001094:	b1400204 	addi	r5,r22,8
 1001098:	9009883a 	mov	r4,r18
 100109c:	10022100 	call	1002210 <_free_r>
 10010a0:	e4000217 	ldw	r16,8(fp)
 10010a4:	003fd806 	br	1001008 <_malloc_r+0x58c>
 10010a8:	00800504 	movi	r2,20
 10010ac:	11001536 	bltu	r2,r4,1001104 <_malloc_r+0x688>
 10010b0:	210016c4 	addi	r4,r4,91
 10010b4:	200690fa 	slli	r3,r4,3
 10010b8:	003fa606 	br	1000f54 <_malloc_r+0x4d8>
 10010bc:	8804d4ba 	srli	r2,r17,18
 10010c0:	11801f04 	addi	r6,r2,124
 10010c4:	300490fa 	slli	r2,r6,3
 10010c8:	003e9906 	br	1000b30 <_malloc_r+0xb4>
 10010cc:	2009d0ba 	srai	r4,r4,2
 10010d0:	01404074 	movhi	r5,257
 10010d4:	29740f04 	addi	r5,r5,-12228
 10010d8:	00c00044 	movi	r3,1
 10010dc:	28800117 	ldw	r2,4(r5)
 10010e0:	1906983a 	sll	r3,r3,r4
 10010e4:	10c4b03a 	or	r2,r2,r3
 10010e8:	28800115 	stw	r2,4(r5)
 10010ec:	003fa306 	br	1000f7c <_malloc_r+0x500>
 10010f0:	0027883a 	mov	r19,zero
 10010f4:	00c00044 	movi	r3,1
 10010f8:	003f8606 	br	1000f14 <_malloc_r+0x498>
 10010fc:	d1200315 	stw	r4,-32756(gp)
 1001100:	003f7306 	br	1000ed0 <_malloc_r+0x454>
 1001104:	00801504 	movi	r2,84
 1001108:	11001936 	bltu	r2,r4,1001170 <_malloc_r+0x6f4>
 100110c:	2804d33a 	srli	r2,r5,12
 1001110:	11001b84 	addi	r4,r2,110
 1001114:	200690fa 	slli	r3,r4,3
 1001118:	003f8e06 	br	1000f54 <_malloc_r+0x4d8>
 100111c:	480b883a 	mov	r5,r9
 1001120:	6807883a 	mov	r3,r13
 1001124:	288000cc 	andi	r2,r5,3
 1001128:	18fffe04 	addi	r3,r3,-8
 100112c:	297fffc4 	addi	r5,r5,-1
 1001130:	10001526 	beq	r2,zero,1001188 <_malloc_r+0x70c>
 1001134:	18800217 	ldw	r2,8(r3)
 1001138:	10fffa26 	beq	r2,r3,1001124 <_malloc_r+0x6a8>
 100113c:	2109883a 	add	r4,r4,r4
 1001140:	393f1e36 	bltu	r7,r4,1000dbc <_malloc_r+0x340>
 1001144:	203f1d26 	beq	r4,zero,1000dbc <_malloc_r+0x340>
 1001148:	21c4703a 	and	r2,r4,r7
 100114c:	10000226 	beq	r2,zero,1001158 <_malloc_r+0x6dc>
 1001150:	6013883a 	mov	r9,r12
 1001154:	003ee106 	br	1000cdc <_malloc_r+0x260>
 1001158:	2109883a 	add	r4,r4,r4
 100115c:	3904703a 	and	r2,r7,r4
 1001160:	63000104 	addi	r12,r12,4
 1001164:	103ffc26 	beq	r2,zero,1001158 <_malloc_r+0x6dc>
 1001168:	6013883a 	mov	r9,r12
 100116c:	003edb06 	br	1000cdc <_malloc_r+0x260>
 1001170:	00805504 	movi	r2,340
 1001174:	11000836 	bltu	r2,r4,1001198 <_malloc_r+0x71c>
 1001178:	2804d3fa 	srli	r2,r5,15
 100117c:	11001dc4 	addi	r4,r2,119
 1001180:	200690fa 	slli	r3,r4,3
 1001184:	003f7306 	br	1000f54 <_malloc_r+0x4d8>
 1001188:	0104303a 	nor	r2,zero,r4
 100118c:	388e703a 	and	r7,r7,r2
 1001190:	e1c00115 	stw	r7,4(fp)
 1001194:	003fe906 	br	100113c <_malloc_r+0x6c0>
 1001198:	00815504 	movi	r2,1364
 100119c:	1100032e 	bgeu	r2,r4,10011ac <_malloc_r+0x730>
 10011a0:	01001f84 	movi	r4,126
 10011a4:	00c0fc04 	movi	r3,1008
 10011a8:	003f6a06 	br	1000f54 <_malloc_r+0x4d8>
 10011ac:	2804d4ba 	srli	r2,r5,18
 10011b0:	11001f04 	addi	r4,r2,124
 10011b4:	200690fa 	slli	r3,r4,3
 10011b8:	003f6606 	br	1000f54 <_malloc_r+0x4d8>

010011bc <memchr>:
 10011bc:	008000c4 	movi	r2,3
 10011c0:	29403fcc 	andi	r5,r5,255
 10011c4:	2007883a 	mov	r3,r4
 10011c8:	1180022e 	bgeu	r2,r6,10011d4 <memchr+0x18>
 10011cc:	2084703a 	and	r2,r4,r2
 10011d0:	10000b26 	beq	r2,zero,1001200 <memchr+0x44>
 10011d4:	313fffc4 	addi	r4,r6,-1
 10011d8:	3000051e 	bne	r6,zero,10011f0 <memchr+0x34>
 10011dc:	00002c06 	br	1001290 <memchr+0xd4>
 10011e0:	213fffc4 	addi	r4,r4,-1
 10011e4:	00bfffc4 	movi	r2,-1
 10011e8:	18c00044 	addi	r3,r3,1
 10011ec:	20802826 	beq	r4,r2,1001290 <memchr+0xd4>
 10011f0:	18800003 	ldbu	r2,0(r3)
 10011f4:	28bffa1e 	bne	r5,r2,10011e0 <memchr+0x24>
 10011f8:	1805883a 	mov	r2,r3
 10011fc:	f800283a 	ret
 1001200:	0011883a 	mov	r8,zero
 1001204:	0007883a 	mov	r3,zero
 1001208:	01c00104 	movi	r7,4
 100120c:	4004923a 	slli	r2,r8,8
 1001210:	18c00044 	addi	r3,r3,1
 1001214:	1151883a 	add	r8,r2,r5
 1001218:	19fffc1e 	bne	r3,r7,100120c <memchr+0x50>
 100121c:	02bfbff4 	movhi	r10,65279
 1001220:	52bfbfc4 	addi	r10,r10,-257
 1001224:	02602074 	movhi	r9,32897
 1001228:	4a602004 	addi	r9,r9,-32640
 100122c:	02c000c4 	movi	r11,3
 1001230:	20800017 	ldw	r2,0(r4)
 1001234:	31bfff04 	addi	r6,r6,-4
 1001238:	200f883a 	mov	r7,r4
 100123c:	1204f03a 	xor	r2,r2,r8
 1001240:	1287883a 	add	r3,r2,r10
 1001244:	1a46703a 	and	r3,r3,r9
 1001248:	0084303a 	nor	r2,zero,r2
 100124c:	10c4703a 	and	r2,r2,r3
 1001250:	10000b26 	beq	r2,zero,1001280 <memchr+0xc4>
 1001254:	20800003 	ldbu	r2,0(r4)
 1001258:	28800f26 	beq	r5,r2,1001298 <memchr+0xdc>
 100125c:	20800043 	ldbu	r2,1(r4)
 1001260:	21c00044 	addi	r7,r4,1
 1001264:	28800c26 	beq	r5,r2,1001298 <memchr+0xdc>
 1001268:	20800083 	ldbu	r2,2(r4)
 100126c:	21c00084 	addi	r7,r4,2
 1001270:	28800926 	beq	r5,r2,1001298 <memchr+0xdc>
 1001274:	208000c3 	ldbu	r2,3(r4)
 1001278:	21c000c4 	addi	r7,r4,3
 100127c:	28800626 	beq	r5,r2,1001298 <memchr+0xdc>
 1001280:	21000104 	addi	r4,r4,4
 1001284:	59bfea36 	bltu	r11,r6,1001230 <memchr+0x74>
 1001288:	2007883a 	mov	r3,r4
 100128c:	003fd106 	br	10011d4 <memchr+0x18>
 1001290:	0005883a 	mov	r2,zero
 1001294:	f800283a 	ret
 1001298:	3805883a 	mov	r2,r7
 100129c:	f800283a 	ret

010012a0 <memcpy>:
 10012a0:	01c003c4 	movi	r7,15
 10012a4:	2007883a 	mov	r3,r4
 10012a8:	3980032e 	bgeu	r7,r6,10012b8 <memcpy+0x18>
 10012ac:	2904b03a 	or	r2,r5,r4
 10012b0:	108000cc 	andi	r2,r2,3
 10012b4:	10000926 	beq	r2,zero,10012dc <memcpy+0x3c>
 10012b8:	30000626 	beq	r6,zero,10012d4 <memcpy+0x34>
 10012bc:	30cd883a 	add	r6,r6,r3
 10012c0:	28800003 	ldbu	r2,0(r5)
 10012c4:	29400044 	addi	r5,r5,1
 10012c8:	18800005 	stb	r2,0(r3)
 10012cc:	18c00044 	addi	r3,r3,1
 10012d0:	30fffb1e 	bne	r6,r3,10012c0 <memcpy+0x20>
 10012d4:	2005883a 	mov	r2,r4
 10012d8:	f800283a 	ret
 10012dc:	3811883a 	mov	r8,r7
 10012e0:	200f883a 	mov	r7,r4
 10012e4:	28c00017 	ldw	r3,0(r5)
 10012e8:	31bffc04 	addi	r6,r6,-16
 10012ec:	38c00015 	stw	r3,0(r7)
 10012f0:	28800117 	ldw	r2,4(r5)
 10012f4:	38800115 	stw	r2,4(r7)
 10012f8:	28c00217 	ldw	r3,8(r5)
 10012fc:	38c00215 	stw	r3,8(r7)
 1001300:	28800317 	ldw	r2,12(r5)
 1001304:	29400404 	addi	r5,r5,16
 1001308:	38800315 	stw	r2,12(r7)
 100130c:	39c00404 	addi	r7,r7,16
 1001310:	41bff436 	bltu	r8,r6,10012e4 <memcpy+0x44>
 1001314:	008000c4 	movi	r2,3
 1001318:	1180072e 	bgeu	r2,r6,1001338 <memcpy+0x98>
 100131c:	1007883a 	mov	r3,r2
 1001320:	28800017 	ldw	r2,0(r5)
 1001324:	31bfff04 	addi	r6,r6,-4
 1001328:	29400104 	addi	r5,r5,4
 100132c:	38800015 	stw	r2,0(r7)
 1001330:	39c00104 	addi	r7,r7,4
 1001334:	19bffa36 	bltu	r3,r6,1001320 <memcpy+0x80>
 1001338:	3807883a 	mov	r3,r7
 100133c:	003fde06 	br	10012b8 <memcpy+0x18>

01001340 <memmove>:
 1001340:	2807883a 	mov	r3,r5
 1001344:	2011883a 	mov	r8,r4
 1001348:	29000c2e 	bgeu	r5,r4,100137c <memmove+0x3c>
 100134c:	298f883a 	add	r7,r5,r6
 1001350:	21c00a2e 	bgeu	r4,r7,100137c <memmove+0x3c>
 1001354:	30000726 	beq	r6,zero,1001374 <memmove+0x34>
 1001358:	2187883a 	add	r3,r4,r6
 100135c:	198dc83a 	sub	r6,r3,r6
 1001360:	39ffffc4 	addi	r7,r7,-1
 1001364:	38800003 	ldbu	r2,0(r7)
 1001368:	18ffffc4 	addi	r3,r3,-1
 100136c:	18800005 	stb	r2,0(r3)
 1001370:	19bffb1e 	bne	r3,r6,1001360 <memmove+0x20>
 1001374:	2005883a 	mov	r2,r4
 1001378:	f800283a 	ret
 100137c:	01c003c4 	movi	r7,15
 1001380:	39800a36 	bltu	r7,r6,10013ac <memmove+0x6c>
 1001384:	303ffb26 	beq	r6,zero,1001374 <memmove+0x34>
 1001388:	400f883a 	mov	r7,r8
 100138c:	320d883a 	add	r6,r6,r8
 1001390:	28800003 	ldbu	r2,0(r5)
 1001394:	29400044 	addi	r5,r5,1
 1001398:	38800005 	stb	r2,0(r7)
 100139c:	39c00044 	addi	r7,r7,1
 10013a0:	39bffb1e 	bne	r7,r6,1001390 <memmove+0x50>
 10013a4:	2005883a 	mov	r2,r4
 10013a8:	f800283a 	ret
 10013ac:	1904b03a 	or	r2,r3,r4
 10013b0:	108000cc 	andi	r2,r2,3
 10013b4:	103ff31e 	bne	r2,zero,1001384 <memmove+0x44>
 10013b8:	3811883a 	mov	r8,r7
 10013bc:	180b883a 	mov	r5,r3
 10013c0:	200f883a 	mov	r7,r4
 10013c4:	28c00017 	ldw	r3,0(r5)
 10013c8:	31bffc04 	addi	r6,r6,-16
 10013cc:	38c00015 	stw	r3,0(r7)
 10013d0:	28800117 	ldw	r2,4(r5)
 10013d4:	38800115 	stw	r2,4(r7)
 10013d8:	28c00217 	ldw	r3,8(r5)
 10013dc:	38c00215 	stw	r3,8(r7)
 10013e0:	28800317 	ldw	r2,12(r5)
 10013e4:	29400404 	addi	r5,r5,16
 10013e8:	38800315 	stw	r2,12(r7)
 10013ec:	39c00404 	addi	r7,r7,16
 10013f0:	41bff436 	bltu	r8,r6,10013c4 <memmove+0x84>
 10013f4:	008000c4 	movi	r2,3
 10013f8:	1180072e 	bgeu	r2,r6,1001418 <memmove+0xd8>
 10013fc:	1007883a 	mov	r3,r2
 1001400:	28800017 	ldw	r2,0(r5)
 1001404:	31bfff04 	addi	r6,r6,-4
 1001408:	29400104 	addi	r5,r5,4
 100140c:	38800015 	stw	r2,0(r7)
 1001410:	39c00104 	addi	r7,r7,4
 1001414:	19bffa36 	bltu	r3,r6,1001400 <memmove+0xc0>
 1001418:	3811883a 	mov	r8,r7
 100141c:	003fd906 	br	1001384 <memmove+0x44>

01001420 <_realloc_r>:
 1001420:	defff404 	addi	sp,sp,-48
 1001424:	dd800815 	stw	r22,32(sp)
 1001428:	dc800415 	stw	r18,16(sp)
 100142c:	dc400315 	stw	r17,12(sp)
 1001430:	dfc00b15 	stw	ra,44(sp)
 1001434:	df000a15 	stw	fp,40(sp)
 1001438:	ddc00915 	stw	r23,36(sp)
 100143c:	dd400715 	stw	r21,28(sp)
 1001440:	dd000615 	stw	r20,24(sp)
 1001444:	dcc00515 	stw	r19,20(sp)
 1001448:	dc000215 	stw	r16,8(sp)
 100144c:	2825883a 	mov	r18,r5
 1001450:	3023883a 	mov	r17,r6
 1001454:	202d883a 	mov	r22,r4
 1001458:	2800c926 	beq	r5,zero,1001780 <_realloc_r+0x360>
 100145c:	10034c80 	call	10034c8 <__malloc_lock>
 1001460:	943ffe04 	addi	r16,r18,-8
 1001464:	88c002c4 	addi	r3,r17,11
 1001468:	00800584 	movi	r2,22
 100146c:	82000117 	ldw	r8,4(r16)
 1001470:	10c01b2e 	bgeu	r2,r3,10014e0 <_realloc_r+0xc0>
 1001474:	00bffe04 	movi	r2,-8
 1001478:	188e703a 	and	r7,r3,r2
 100147c:	3839883a 	mov	fp,r7
 1001480:	38001a16 	blt	r7,zero,10014ec <_realloc_r+0xcc>
 1001484:	e4401936 	bltu	fp,r17,10014ec <_realloc_r+0xcc>
 1001488:	013fff04 	movi	r4,-4
 100148c:	4126703a 	and	r19,r8,r4
 1001490:	99c02616 	blt	r19,r7,100152c <_realloc_r+0x10c>
 1001494:	802b883a 	mov	r21,r16
 1001498:	9829883a 	mov	r20,r19
 100149c:	84000204 	addi	r16,r16,8
 10014a0:	a80f883a 	mov	r7,r21
 10014a4:	a70dc83a 	sub	r6,r20,fp
 10014a8:	008003c4 	movi	r2,15
 10014ac:	1180c136 	bltu	r2,r6,10017b4 <_realloc_r+0x394>
 10014b0:	38800117 	ldw	r2,4(r7)
 10014b4:	a549883a 	add	r4,r20,r21
 10014b8:	1080004c 	andi	r2,r2,1
 10014bc:	a084b03a 	or	r2,r20,r2
 10014c0:	38800115 	stw	r2,4(r7)
 10014c4:	20c00117 	ldw	r3,4(r4)
 10014c8:	18c00054 	ori	r3,r3,1
 10014cc:	20c00115 	stw	r3,4(r4)
 10014d0:	b009883a 	mov	r4,r22
 10014d4:	10034e80 	call	10034e8 <__malloc_unlock>
 10014d8:	8023883a 	mov	r17,r16
 10014dc:	00000606 	br	10014f8 <_realloc_r+0xd8>
 10014e0:	01c00404 	movi	r7,16
 10014e4:	3839883a 	mov	fp,r7
 10014e8:	e47fe72e 	bgeu	fp,r17,1001488 <_realloc_r+0x68>
 10014ec:	00800304 	movi	r2,12
 10014f0:	0023883a 	mov	r17,zero
 10014f4:	b0800015 	stw	r2,0(r22)
 10014f8:	8805883a 	mov	r2,r17
 10014fc:	dfc00b17 	ldw	ra,44(sp)
 1001500:	df000a17 	ldw	fp,40(sp)
 1001504:	ddc00917 	ldw	r23,36(sp)
 1001508:	dd800817 	ldw	r22,32(sp)
 100150c:	dd400717 	ldw	r21,28(sp)
 1001510:	dd000617 	ldw	r20,24(sp)
 1001514:	dcc00517 	ldw	r19,20(sp)
 1001518:	dc800417 	ldw	r18,16(sp)
 100151c:	dc400317 	ldw	r17,12(sp)
 1001520:	dc000217 	ldw	r16,8(sp)
 1001524:	dec00c04 	addi	sp,sp,48
 1001528:	f800283a 	ret
 100152c:	00804074 	movhi	r2,257
 1001530:	10b40f04 	addi	r2,r2,-12228
 1001534:	12400217 	ldw	r9,8(r2)
 1001538:	84cd883a 	add	r6,r16,r19
 100153c:	802b883a 	mov	r21,r16
 1001540:	3240b926 	beq	r6,r9,1001828 <_realloc_r+0x408>
 1001544:	31400117 	ldw	r5,4(r6)
 1001548:	00bfff84 	movi	r2,-2
 100154c:	2884703a 	and	r2,r5,r2
 1001550:	1185883a 	add	r2,r2,r6
 1001554:	10c00117 	ldw	r3,4(r2)
 1001558:	18c0004c 	andi	r3,r3,1
 100155c:	1807003a 	cmpeq	r3,r3,zero
 1001560:	1800a326 	beq	r3,zero,10017f0 <_realloc_r+0x3d0>
 1001564:	2908703a 	and	r4,r5,r4
 1001568:	9929883a 	add	r20,r19,r4
 100156c:	a1c0a30e 	bge	r20,r7,10017fc <_realloc_r+0x3dc>
 1001570:	4080004c 	andi	r2,r8,1
 1001574:	1000551e 	bne	r2,zero,10016cc <_realloc_r+0x2ac>
 1001578:	80800017 	ldw	r2,0(r16)
 100157c:	80afc83a 	sub	r23,r16,r2
 1001580:	b8c00117 	ldw	r3,4(r23)
 1001584:	00bfff04 	movi	r2,-4
 1001588:	1884703a 	and	r2,r3,r2
 100158c:	30002e26 	beq	r6,zero,1001648 <_realloc_r+0x228>
 1001590:	3240b926 	beq	r6,r9,1001878 <_realloc_r+0x458>
 1001594:	98a9883a 	add	r20,r19,r2
 1001598:	2509883a 	add	r4,r4,r20
 100159c:	d9000015 	stw	r4,0(sp)
 10015a0:	21c02a16 	blt	r4,r7,100164c <_realloc_r+0x22c>
 10015a4:	30800317 	ldw	r2,12(r6)
 10015a8:	30c00217 	ldw	r3,8(r6)
 10015ac:	01400904 	movi	r5,36
 10015b0:	99bfff04 	addi	r6,r19,-4
 10015b4:	18800315 	stw	r2,12(r3)
 10015b8:	10c00215 	stw	r3,8(r2)
 10015bc:	b9000317 	ldw	r4,12(r23)
 10015c0:	b8800217 	ldw	r2,8(r23)
 10015c4:	b82b883a 	mov	r21,r23
 10015c8:	bc000204 	addi	r16,r23,8
 10015cc:	20800215 	stw	r2,8(r4)
 10015d0:	11000315 	stw	r4,12(r2)
 10015d4:	2980e436 	bltu	r5,r6,1001968 <_realloc_r+0x548>
 10015d8:	008004c4 	movi	r2,19
 10015dc:	9009883a 	mov	r4,r18
 10015e0:	8011883a 	mov	r8,r16
 10015e4:	11800f2e 	bgeu	r2,r6,1001624 <_realloc_r+0x204>
 10015e8:	90800017 	ldw	r2,0(r18)
 10015ec:	ba000404 	addi	r8,r23,16
 10015f0:	91000204 	addi	r4,r18,8
 10015f4:	b8800215 	stw	r2,8(r23)
 10015f8:	90c00117 	ldw	r3,4(r18)
 10015fc:	008006c4 	movi	r2,27
 1001600:	b8c00315 	stw	r3,12(r23)
 1001604:	1180072e 	bgeu	r2,r6,1001624 <_realloc_r+0x204>
 1001608:	90c00217 	ldw	r3,8(r18)
 100160c:	ba000604 	addi	r8,r23,24
 1001610:	91000404 	addi	r4,r18,16
 1001614:	b8c00415 	stw	r3,16(r23)
 1001618:	90800317 	ldw	r2,12(r18)
 100161c:	b8800515 	stw	r2,20(r23)
 1001620:	3140e726 	beq	r6,r5,10019c0 <_realloc_r+0x5a0>
 1001624:	20800017 	ldw	r2,0(r4)
 1001628:	dd000017 	ldw	r20,0(sp)
 100162c:	b80f883a 	mov	r7,r23
 1001630:	40800015 	stw	r2,0(r8)
 1001634:	20c00117 	ldw	r3,4(r4)
 1001638:	40c00115 	stw	r3,4(r8)
 100163c:	20800217 	ldw	r2,8(r4)
 1001640:	40800215 	stw	r2,8(r8)
 1001644:	003f9706 	br	10014a4 <_realloc_r+0x84>
 1001648:	98a9883a 	add	r20,r19,r2
 100164c:	a1c01f16 	blt	r20,r7,10016cc <_realloc_r+0x2ac>
 1001650:	b8c00317 	ldw	r3,12(r23)
 1001654:	b8800217 	ldw	r2,8(r23)
 1001658:	99bfff04 	addi	r6,r19,-4
 100165c:	01400904 	movi	r5,36
 1001660:	b82b883a 	mov	r21,r23
 1001664:	18800215 	stw	r2,8(r3)
 1001668:	10c00315 	stw	r3,12(r2)
 100166c:	bc000204 	addi	r16,r23,8
 1001670:	2980c336 	bltu	r5,r6,1001980 <_realloc_r+0x560>
 1001674:	008004c4 	movi	r2,19
 1001678:	9009883a 	mov	r4,r18
 100167c:	8011883a 	mov	r8,r16
 1001680:	11800f2e 	bgeu	r2,r6,10016c0 <_realloc_r+0x2a0>
 1001684:	90800017 	ldw	r2,0(r18)
 1001688:	ba000404 	addi	r8,r23,16
 100168c:	91000204 	addi	r4,r18,8
 1001690:	b8800215 	stw	r2,8(r23)
 1001694:	90c00117 	ldw	r3,4(r18)
 1001698:	008006c4 	movi	r2,27
 100169c:	b8c00315 	stw	r3,12(r23)
 10016a0:	1180072e 	bgeu	r2,r6,10016c0 <_realloc_r+0x2a0>
 10016a4:	90c00217 	ldw	r3,8(r18)
 10016a8:	ba000604 	addi	r8,r23,24
 10016ac:	91000404 	addi	r4,r18,16
 10016b0:	b8c00415 	stw	r3,16(r23)
 10016b4:	90800317 	ldw	r2,12(r18)
 10016b8:	b8800515 	stw	r2,20(r23)
 10016bc:	3140c726 	beq	r6,r5,10019dc <_realloc_r+0x5bc>
 10016c0:	20800017 	ldw	r2,0(r4)
 10016c4:	b80f883a 	mov	r7,r23
 10016c8:	003fd906 	br	1001630 <_realloc_r+0x210>
 10016cc:	880b883a 	mov	r5,r17
 10016d0:	b009883a 	mov	r4,r22
 10016d4:	1000a7c0 	call	1000a7c <_malloc_r>
 10016d8:	1023883a 	mov	r17,r2
 10016dc:	10002526 	beq	r2,zero,1001774 <_realloc_r+0x354>
 10016e0:	80800117 	ldw	r2,4(r16)
 10016e4:	00ffff84 	movi	r3,-2
 10016e8:	893ffe04 	addi	r4,r17,-8
 10016ec:	10c4703a 	and	r2,r2,r3
 10016f0:	8085883a 	add	r2,r16,r2
 10016f4:	20809526 	beq	r4,r2,100194c <_realloc_r+0x52c>
 10016f8:	99bfff04 	addi	r6,r19,-4
 10016fc:	01c00904 	movi	r7,36
 1001700:	39804536 	bltu	r7,r6,1001818 <_realloc_r+0x3f8>
 1001704:	008004c4 	movi	r2,19
 1001708:	9009883a 	mov	r4,r18
 100170c:	880b883a 	mov	r5,r17
 1001710:	11800f2e 	bgeu	r2,r6,1001750 <_realloc_r+0x330>
 1001714:	90800017 	ldw	r2,0(r18)
 1001718:	89400204 	addi	r5,r17,8
 100171c:	91000204 	addi	r4,r18,8
 1001720:	88800015 	stw	r2,0(r17)
 1001724:	90c00117 	ldw	r3,4(r18)
 1001728:	008006c4 	movi	r2,27
 100172c:	88c00115 	stw	r3,4(r17)
 1001730:	1180072e 	bgeu	r2,r6,1001750 <_realloc_r+0x330>
 1001734:	90c00217 	ldw	r3,8(r18)
 1001738:	89400404 	addi	r5,r17,16
 100173c:	91000404 	addi	r4,r18,16
 1001740:	88c00215 	stw	r3,8(r17)
 1001744:	90800317 	ldw	r2,12(r18)
 1001748:	88800315 	stw	r2,12(r17)
 100174c:	31c09126 	beq	r6,r7,1001994 <_realloc_r+0x574>
 1001750:	20800017 	ldw	r2,0(r4)
 1001754:	28800015 	stw	r2,0(r5)
 1001758:	20c00117 	ldw	r3,4(r4)
 100175c:	28c00115 	stw	r3,4(r5)
 1001760:	20800217 	ldw	r2,8(r4)
 1001764:	28800215 	stw	r2,8(r5)
 1001768:	900b883a 	mov	r5,r18
 100176c:	b009883a 	mov	r4,r22
 1001770:	10022100 	call	1002210 <_free_r>
 1001774:	b009883a 	mov	r4,r22
 1001778:	10034e80 	call	10034e8 <__malloc_unlock>
 100177c:	003f5e06 	br	10014f8 <_realloc_r+0xd8>
 1001780:	300b883a 	mov	r5,r6
 1001784:	dfc00b17 	ldw	ra,44(sp)
 1001788:	df000a17 	ldw	fp,40(sp)
 100178c:	ddc00917 	ldw	r23,36(sp)
 1001790:	dd800817 	ldw	r22,32(sp)
 1001794:	dd400717 	ldw	r21,28(sp)
 1001798:	dd000617 	ldw	r20,24(sp)
 100179c:	dcc00517 	ldw	r19,20(sp)
 10017a0:	dc800417 	ldw	r18,16(sp)
 10017a4:	dc400317 	ldw	r17,12(sp)
 10017a8:	dc000217 	ldw	r16,8(sp)
 10017ac:	dec00c04 	addi	sp,sp,48
 10017b0:	1000a7c1 	jmpi	1000a7c <_malloc_r>
 10017b4:	38800117 	ldw	r2,4(r7)
 10017b8:	e54b883a 	add	r5,fp,r21
 10017bc:	31000054 	ori	r4,r6,1
 10017c0:	1080004c 	andi	r2,r2,1
 10017c4:	1704b03a 	or	r2,r2,fp
 10017c8:	38800115 	stw	r2,4(r7)
 10017cc:	29000115 	stw	r4,4(r5)
 10017d0:	2987883a 	add	r3,r5,r6
 10017d4:	18800117 	ldw	r2,4(r3)
 10017d8:	29400204 	addi	r5,r5,8
 10017dc:	b009883a 	mov	r4,r22
 10017e0:	10800054 	ori	r2,r2,1
 10017e4:	18800115 	stw	r2,4(r3)
 10017e8:	10022100 	call	1002210 <_free_r>
 10017ec:	003f3806 	br	10014d0 <_realloc_r+0xb0>
 10017f0:	000d883a 	mov	r6,zero
 10017f4:	0009883a 	mov	r4,zero
 10017f8:	003f5d06 	br	1001570 <_realloc_r+0x150>
 10017fc:	30c00217 	ldw	r3,8(r6)
 1001800:	30800317 	ldw	r2,12(r6)
 1001804:	800f883a 	mov	r7,r16
 1001808:	84000204 	addi	r16,r16,8
 100180c:	10c00215 	stw	r3,8(r2)
 1001810:	18800315 	stw	r2,12(r3)
 1001814:	003f2306 	br	10014a4 <_realloc_r+0x84>
 1001818:	8809883a 	mov	r4,r17
 100181c:	900b883a 	mov	r5,r18
 1001820:	10013400 	call	1001340 <memmove>
 1001824:	003fd006 	br	1001768 <_realloc_r+0x348>
 1001828:	30800117 	ldw	r2,4(r6)
 100182c:	e0c00404 	addi	r3,fp,16
 1001830:	1108703a 	and	r4,r2,r4
 1001834:	9905883a 	add	r2,r19,r4
 1001838:	10ff4d16 	blt	r2,r3,1001570 <_realloc_r+0x150>
 100183c:	1705c83a 	sub	r2,r2,fp
 1001840:	870b883a 	add	r5,r16,fp
 1001844:	10800054 	ori	r2,r2,1
 1001848:	28800115 	stw	r2,4(r5)
 100184c:	80c00117 	ldw	r3,4(r16)
 1001850:	00804074 	movhi	r2,257
 1001854:	10b40f04 	addi	r2,r2,-12228
 1001858:	b009883a 	mov	r4,r22
 100185c:	18c0004c 	andi	r3,r3,1
 1001860:	e0c6b03a 	or	r3,fp,r3
 1001864:	11400215 	stw	r5,8(r2)
 1001868:	80c00115 	stw	r3,4(r16)
 100186c:	10034e80 	call	10034e8 <__malloc_unlock>
 1001870:	84400204 	addi	r17,r16,8
 1001874:	003f2006 	br	10014f8 <_realloc_r+0xd8>
 1001878:	98a9883a 	add	r20,r19,r2
 100187c:	2509883a 	add	r4,r4,r20
 1001880:	e0800404 	addi	r2,fp,16
 1001884:	d9000115 	stw	r4,4(sp)
 1001888:	20bf7016 	blt	r4,r2,100164c <_realloc_r+0x22c>
 100188c:	b8c00317 	ldw	r3,12(r23)
 1001890:	b8800217 	ldw	r2,8(r23)
 1001894:	99bfff04 	addi	r6,r19,-4
 1001898:	01400904 	movi	r5,36
 100189c:	18800215 	stw	r2,8(r3)
 10018a0:	10c00315 	stw	r3,12(r2)
 10018a4:	bc400204 	addi	r17,r23,8
 10018a8:	29804136 	bltu	r5,r6,10019b0 <_realloc_r+0x590>
 10018ac:	008004c4 	movi	r2,19
 10018b0:	9009883a 	mov	r4,r18
 10018b4:	880f883a 	mov	r7,r17
 10018b8:	11800f2e 	bgeu	r2,r6,10018f8 <_realloc_r+0x4d8>
 10018bc:	90800017 	ldw	r2,0(r18)
 10018c0:	b9c00404 	addi	r7,r23,16
 10018c4:	91000204 	addi	r4,r18,8
 10018c8:	b8800215 	stw	r2,8(r23)
 10018cc:	90c00117 	ldw	r3,4(r18)
 10018d0:	008006c4 	movi	r2,27
 10018d4:	b8c00315 	stw	r3,12(r23)
 10018d8:	1180072e 	bgeu	r2,r6,10018f8 <_realloc_r+0x4d8>
 10018dc:	90c00217 	ldw	r3,8(r18)
 10018e0:	b9c00604 	addi	r7,r23,24
 10018e4:	91000404 	addi	r4,r18,16
 10018e8:	b8c00415 	stw	r3,16(r23)
 10018ec:	90800317 	ldw	r2,12(r18)
 10018f0:	b8800515 	stw	r2,20(r23)
 10018f4:	31404026 	beq	r6,r5,10019f8 <_realloc_r+0x5d8>
 10018f8:	20800017 	ldw	r2,0(r4)
 10018fc:	38800015 	stw	r2,0(r7)
 1001900:	20c00117 	ldw	r3,4(r4)
 1001904:	38c00115 	stw	r3,4(r7)
 1001908:	20800217 	ldw	r2,8(r4)
 100190c:	38800215 	stw	r2,8(r7)
 1001910:	d8c00117 	ldw	r3,4(sp)
 1001914:	bf0b883a 	add	r5,r23,fp
 1001918:	b009883a 	mov	r4,r22
 100191c:	1f05c83a 	sub	r2,r3,fp
 1001920:	10800054 	ori	r2,r2,1
 1001924:	28800115 	stw	r2,4(r5)
 1001928:	b8c00117 	ldw	r3,4(r23)
 100192c:	00804074 	movhi	r2,257
 1001930:	10b40f04 	addi	r2,r2,-12228
 1001934:	11400215 	stw	r5,8(r2)
 1001938:	18c0004c 	andi	r3,r3,1
 100193c:	e0c6b03a 	or	r3,fp,r3
 1001940:	b8c00115 	stw	r3,4(r23)
 1001944:	10034e80 	call	10034e8 <__malloc_unlock>
 1001948:	003eeb06 	br	10014f8 <_realloc_r+0xd8>
 100194c:	20800117 	ldw	r2,4(r4)
 1001950:	00ffff04 	movi	r3,-4
 1001954:	800f883a 	mov	r7,r16
 1001958:	10c4703a 	and	r2,r2,r3
 100195c:	98a9883a 	add	r20,r19,r2
 1001960:	84000204 	addi	r16,r16,8
 1001964:	003ecf06 	br	10014a4 <_realloc_r+0x84>
 1001968:	900b883a 	mov	r5,r18
 100196c:	8009883a 	mov	r4,r16
 1001970:	10013400 	call	1001340 <memmove>
 1001974:	dd000017 	ldw	r20,0(sp)
 1001978:	b80f883a 	mov	r7,r23
 100197c:	003ec906 	br	10014a4 <_realloc_r+0x84>
 1001980:	900b883a 	mov	r5,r18
 1001984:	8009883a 	mov	r4,r16
 1001988:	10013400 	call	1001340 <memmove>
 100198c:	b80f883a 	mov	r7,r23
 1001990:	003ec406 	br	10014a4 <_realloc_r+0x84>
 1001994:	90c00417 	ldw	r3,16(r18)
 1001998:	89400604 	addi	r5,r17,24
 100199c:	91000604 	addi	r4,r18,24
 10019a0:	88c00415 	stw	r3,16(r17)
 10019a4:	90800517 	ldw	r2,20(r18)
 10019a8:	88800515 	stw	r2,20(r17)
 10019ac:	003f6806 	br	1001750 <_realloc_r+0x330>
 10019b0:	900b883a 	mov	r5,r18
 10019b4:	8809883a 	mov	r4,r17
 10019b8:	10013400 	call	1001340 <memmove>
 10019bc:	003fd406 	br	1001910 <_realloc_r+0x4f0>
 10019c0:	90c00417 	ldw	r3,16(r18)
 10019c4:	91000604 	addi	r4,r18,24
 10019c8:	ba000804 	addi	r8,r23,32
 10019cc:	b8c00615 	stw	r3,24(r23)
 10019d0:	90800517 	ldw	r2,20(r18)
 10019d4:	b8800715 	stw	r2,28(r23)
 10019d8:	003f1206 	br	1001624 <_realloc_r+0x204>
 10019dc:	90c00417 	ldw	r3,16(r18)
 10019e0:	91000604 	addi	r4,r18,24
 10019e4:	ba000804 	addi	r8,r23,32
 10019e8:	b8c00615 	stw	r3,24(r23)
 10019ec:	90800517 	ldw	r2,20(r18)
 10019f0:	b8800715 	stw	r2,28(r23)
 10019f4:	003f3206 	br	10016c0 <_realloc_r+0x2a0>
 10019f8:	90c00417 	ldw	r3,16(r18)
 10019fc:	91000604 	addi	r4,r18,24
 1001a00:	b9c00804 	addi	r7,r23,32
 1001a04:	b8c00615 	stw	r3,24(r23)
 1001a08:	90800517 	ldw	r2,20(r18)
 1001a0c:	b8800715 	stw	r2,28(r23)
 1001a10:	003fb906 	br	10018f8 <_realloc_r+0x4d8>

01001a14 <_sbrk_r>:
 1001a14:	defffd04 	addi	sp,sp,-12
 1001a18:	dc000015 	stw	r16,0(sp)
 1001a1c:	04004074 	movhi	r16,257
 1001a20:	84006204 	addi	r16,r16,392
 1001a24:	dc400115 	stw	r17,4(sp)
 1001a28:	80000015 	stw	zero,0(r16)
 1001a2c:	2023883a 	mov	r17,r4
 1001a30:	2809883a 	mov	r4,r5
 1001a34:	dfc00215 	stw	ra,8(sp)
 1001a38:	10037040 	call	1003704 <sbrk>
 1001a3c:	1007883a 	mov	r3,r2
 1001a40:	00bfffc4 	movi	r2,-1
 1001a44:	18800626 	beq	r3,r2,1001a60 <_sbrk_r+0x4c>
 1001a48:	1805883a 	mov	r2,r3
 1001a4c:	dfc00217 	ldw	ra,8(sp)
 1001a50:	dc400117 	ldw	r17,4(sp)
 1001a54:	dc000017 	ldw	r16,0(sp)
 1001a58:	dec00304 	addi	sp,sp,12
 1001a5c:	f800283a 	ret
 1001a60:	80800017 	ldw	r2,0(r16)
 1001a64:	103ff826 	beq	r2,zero,1001a48 <_sbrk_r+0x34>
 1001a68:	88800015 	stw	r2,0(r17)
 1001a6c:	1805883a 	mov	r2,r3
 1001a70:	dfc00217 	ldw	ra,8(sp)
 1001a74:	dc400117 	ldw	r17,4(sp)
 1001a78:	dc000017 	ldw	r16,0(sp)
 1001a7c:	dec00304 	addi	sp,sp,12
 1001a80:	f800283a 	ret

01001a84 <__swsetup_r>:
 1001a84:	00804074 	movhi	r2,257
 1001a88:	10b9a904 	addi	r2,r2,-6492
 1001a8c:	10c00017 	ldw	r3,0(r2)
 1001a90:	defffd04 	addi	sp,sp,-12
 1001a94:	dc400115 	stw	r17,4(sp)
 1001a98:	dc000015 	stw	r16,0(sp)
 1001a9c:	dfc00215 	stw	ra,8(sp)
 1001aa0:	2023883a 	mov	r17,r4
 1001aa4:	2821883a 	mov	r16,r5
 1001aa8:	18000226 	beq	r3,zero,1001ab4 <__swsetup_r+0x30>
 1001aac:	18800e17 	ldw	r2,56(r3)
 1001ab0:	10001f26 	beq	r2,zero,1001b30 <__swsetup_r+0xac>
 1001ab4:	8100030b 	ldhu	r4,12(r16)
 1001ab8:	2080020c 	andi	r2,r4,8
 1001abc:	10002826 	beq	r2,zero,1001b60 <__swsetup_r+0xdc>
 1001ac0:	81400417 	ldw	r5,16(r16)
 1001ac4:	28001d26 	beq	r5,zero,1001b3c <__swsetup_r+0xb8>
 1001ac8:	2080004c 	andi	r2,r4,1
 1001acc:	1005003a 	cmpeq	r2,r2,zero
 1001ad0:	10000b26 	beq	r2,zero,1001b00 <__swsetup_r+0x7c>
 1001ad4:	2080008c 	andi	r2,r4,2
 1001ad8:	10001226 	beq	r2,zero,1001b24 <__swsetup_r+0xa0>
 1001adc:	0005883a 	mov	r2,zero
 1001ae0:	80800215 	stw	r2,8(r16)
 1001ae4:	28000b26 	beq	r5,zero,1001b14 <__swsetup_r+0x90>
 1001ae8:	0005883a 	mov	r2,zero
 1001aec:	dfc00217 	ldw	ra,8(sp)
 1001af0:	dc400117 	ldw	r17,4(sp)
 1001af4:	dc000017 	ldw	r16,0(sp)
 1001af8:	dec00304 	addi	sp,sp,12
 1001afc:	f800283a 	ret
 1001b00:	80800517 	ldw	r2,20(r16)
 1001b04:	80000215 	stw	zero,8(r16)
 1001b08:	0085c83a 	sub	r2,zero,r2
 1001b0c:	80800615 	stw	r2,24(r16)
 1001b10:	283ff51e 	bne	r5,zero,1001ae8 <__swsetup_r+0x64>
 1001b14:	2080200c 	andi	r2,r4,128
 1001b18:	103ff326 	beq	r2,zero,1001ae8 <__swsetup_r+0x64>
 1001b1c:	00bfffc4 	movi	r2,-1
 1001b20:	003ff206 	br	1001aec <__swsetup_r+0x68>
 1001b24:	80800517 	ldw	r2,20(r16)
 1001b28:	80800215 	stw	r2,8(r16)
 1001b2c:	003fed06 	br	1001ae4 <__swsetup_r+0x60>
 1001b30:	1809883a 	mov	r4,r3
 1001b34:	1001e580 	call	1001e58 <__sinit>
 1001b38:	003fde06 	br	1001ab4 <__swsetup_r+0x30>
 1001b3c:	20c0a00c 	andi	r3,r4,640
 1001b40:	00808004 	movi	r2,512
 1001b44:	18bfe026 	beq	r3,r2,1001ac8 <__swsetup_r+0x44>
 1001b48:	8809883a 	mov	r4,r17
 1001b4c:	800b883a 	mov	r5,r16
 1001b50:	10026a40 	call	10026a4 <__smakebuf_r>
 1001b54:	8100030b 	ldhu	r4,12(r16)
 1001b58:	81400417 	ldw	r5,16(r16)
 1001b5c:	003fda06 	br	1001ac8 <__swsetup_r+0x44>
 1001b60:	2080040c 	andi	r2,r4,16
 1001b64:	103fed26 	beq	r2,zero,1001b1c <__swsetup_r+0x98>
 1001b68:	2080010c 	andi	r2,r4,4
 1001b6c:	10001226 	beq	r2,zero,1001bb8 <__swsetup_r+0x134>
 1001b70:	81400c17 	ldw	r5,48(r16)
 1001b74:	28000526 	beq	r5,zero,1001b8c <__swsetup_r+0x108>
 1001b78:	80801004 	addi	r2,r16,64
 1001b7c:	28800226 	beq	r5,r2,1001b88 <__swsetup_r+0x104>
 1001b80:	8809883a 	mov	r4,r17
 1001b84:	10022100 	call	1002210 <_free_r>
 1001b88:	80000c15 	stw	zero,48(r16)
 1001b8c:	8080030b 	ldhu	r2,12(r16)
 1001b90:	81400417 	ldw	r5,16(r16)
 1001b94:	80000115 	stw	zero,4(r16)
 1001b98:	10bff6cc 	andi	r2,r2,65499
 1001b9c:	8080030d 	sth	r2,12(r16)
 1001ba0:	81400015 	stw	r5,0(r16)
 1001ba4:	8080030b 	ldhu	r2,12(r16)
 1001ba8:	10800214 	ori	r2,r2,8
 1001bac:	113fffcc 	andi	r4,r2,65535
 1001bb0:	8080030d 	sth	r2,12(r16)
 1001bb4:	003fc306 	br	1001ac4 <__swsetup_r+0x40>
 1001bb8:	81400417 	ldw	r5,16(r16)
 1001bbc:	003ff906 	br	1001ba4 <__swsetup_r+0x120>

01001bc0 <_fflush_r>:
 1001bc0:	defffb04 	addi	sp,sp,-20
 1001bc4:	dcc00315 	stw	r19,12(sp)
 1001bc8:	dc800215 	stw	r18,8(sp)
 1001bcc:	dfc00415 	stw	ra,16(sp)
 1001bd0:	dc400115 	stw	r17,4(sp)
 1001bd4:	dc000015 	stw	r16,0(sp)
 1001bd8:	2027883a 	mov	r19,r4
 1001bdc:	2825883a 	mov	r18,r5
 1001be0:	20000226 	beq	r4,zero,1001bec <_fflush_r+0x2c>
 1001be4:	20800e17 	ldw	r2,56(r4)
 1001be8:	10005626 	beq	r2,zero,1001d44 <_fflush_r+0x184>
 1001bec:	9100030b 	ldhu	r4,12(r18)
 1001bf0:	20ffffcc 	andi	r3,r4,65535
 1001bf4:	18e0001c 	xori	r3,r3,32768
 1001bf8:	18e00004 	addi	r3,r3,-32768
 1001bfc:	1880020c 	andi	r2,r3,8
 1001c00:	1000261e 	bne	r2,zero,1001c9c <_fflush_r+0xdc>
 1001c04:	90c00117 	ldw	r3,4(r18)
 1001c08:	20820014 	ori	r2,r4,2048
 1001c0c:	9080030d 	sth	r2,12(r18)
 1001c10:	1009883a 	mov	r4,r2
 1001c14:	00c0400e 	bge	zero,r3,1001d18 <_fflush_r+0x158>
 1001c18:	92000a17 	ldw	r8,40(r18)
 1001c1c:	40004026 	beq	r8,zero,1001d20 <_fflush_r+0x160>
 1001c20:	2084000c 	andi	r2,r4,4096
 1001c24:	10005326 	beq	r2,zero,1001d74 <_fflush_r+0x1b4>
 1001c28:	94001417 	ldw	r16,80(r18)
 1001c2c:	9080030b 	ldhu	r2,12(r18)
 1001c30:	1080010c 	andi	r2,r2,4
 1001c34:	1000481e 	bne	r2,zero,1001d58 <_fflush_r+0x198>
 1001c38:	91400717 	ldw	r5,28(r18)
 1001c3c:	9809883a 	mov	r4,r19
 1001c40:	800d883a 	mov	r6,r16
 1001c44:	000f883a 	mov	r7,zero
 1001c48:	403ee83a 	callr	r8
 1001c4c:	8080261e 	bne	r16,r2,1001ce8 <_fflush_r+0x128>
 1001c50:	9080030b 	ldhu	r2,12(r18)
 1001c54:	91000417 	ldw	r4,16(r18)
 1001c58:	90000115 	stw	zero,4(r18)
 1001c5c:	10bdffcc 	andi	r2,r2,63487
 1001c60:	10ffffcc 	andi	r3,r2,65535
 1001c64:	18c4000c 	andi	r3,r3,4096
 1001c68:	9080030d 	sth	r2,12(r18)
 1001c6c:	91000015 	stw	r4,0(r18)
 1001c70:	18002b26 	beq	r3,zero,1001d20 <_fflush_r+0x160>
 1001c74:	0007883a 	mov	r3,zero
 1001c78:	1805883a 	mov	r2,r3
 1001c7c:	94001415 	stw	r16,80(r18)
 1001c80:	dfc00417 	ldw	ra,16(sp)
 1001c84:	dcc00317 	ldw	r19,12(sp)
 1001c88:	dc800217 	ldw	r18,8(sp)
 1001c8c:	dc400117 	ldw	r17,4(sp)
 1001c90:	dc000017 	ldw	r16,0(sp)
 1001c94:	dec00504 	addi	sp,sp,20
 1001c98:	f800283a 	ret
 1001c9c:	94400417 	ldw	r17,16(r18)
 1001ca0:	88001f26 	beq	r17,zero,1001d20 <_fflush_r+0x160>
 1001ca4:	90800017 	ldw	r2,0(r18)
 1001ca8:	18c000cc 	andi	r3,r3,3
 1001cac:	94400015 	stw	r17,0(r18)
 1001cb0:	1461c83a 	sub	r16,r2,r17
 1001cb4:	18002526 	beq	r3,zero,1001d4c <_fflush_r+0x18c>
 1001cb8:	0005883a 	mov	r2,zero
 1001cbc:	90800215 	stw	r2,8(r18)
 1001cc0:	0400170e 	bge	zero,r16,1001d20 <_fflush_r+0x160>
 1001cc4:	90c00917 	ldw	r3,36(r18)
 1001cc8:	91400717 	ldw	r5,28(r18)
 1001ccc:	880d883a 	mov	r6,r17
 1001cd0:	800f883a 	mov	r7,r16
 1001cd4:	9809883a 	mov	r4,r19
 1001cd8:	183ee83a 	callr	r3
 1001cdc:	88a3883a 	add	r17,r17,r2
 1001ce0:	80a1c83a 	sub	r16,r16,r2
 1001ce4:	00bff616 	blt	zero,r2,1001cc0 <_fflush_r+0x100>
 1001ce8:	9080030b 	ldhu	r2,12(r18)
 1001cec:	00ffffc4 	movi	r3,-1
 1001cf0:	10801014 	ori	r2,r2,64
 1001cf4:	9080030d 	sth	r2,12(r18)
 1001cf8:	1805883a 	mov	r2,r3
 1001cfc:	dfc00417 	ldw	ra,16(sp)
 1001d00:	dcc00317 	ldw	r19,12(sp)
 1001d04:	dc800217 	ldw	r18,8(sp)
 1001d08:	dc400117 	ldw	r17,4(sp)
 1001d0c:	dc000017 	ldw	r16,0(sp)
 1001d10:	dec00504 	addi	sp,sp,20
 1001d14:	f800283a 	ret
 1001d18:	90800f17 	ldw	r2,60(r18)
 1001d1c:	00bfbe16 	blt	zero,r2,1001c18 <_fflush_r+0x58>
 1001d20:	0007883a 	mov	r3,zero
 1001d24:	1805883a 	mov	r2,r3
 1001d28:	dfc00417 	ldw	ra,16(sp)
 1001d2c:	dcc00317 	ldw	r19,12(sp)
 1001d30:	dc800217 	ldw	r18,8(sp)
 1001d34:	dc400117 	ldw	r17,4(sp)
 1001d38:	dc000017 	ldw	r16,0(sp)
 1001d3c:	dec00504 	addi	sp,sp,20
 1001d40:	f800283a 	ret
 1001d44:	1001e580 	call	1001e58 <__sinit>
 1001d48:	003fa806 	br	1001bec <_fflush_r+0x2c>
 1001d4c:	90800517 	ldw	r2,20(r18)
 1001d50:	90800215 	stw	r2,8(r18)
 1001d54:	003fda06 	br	1001cc0 <_fflush_r+0x100>
 1001d58:	90800117 	ldw	r2,4(r18)
 1001d5c:	90c00c17 	ldw	r3,48(r18)
 1001d60:	80a1c83a 	sub	r16,r16,r2
 1001d64:	183fb426 	beq	r3,zero,1001c38 <_fflush_r+0x78>
 1001d68:	90800f17 	ldw	r2,60(r18)
 1001d6c:	80a1c83a 	sub	r16,r16,r2
 1001d70:	003fb106 	br	1001c38 <_fflush_r+0x78>
 1001d74:	91400717 	ldw	r5,28(r18)
 1001d78:	9809883a 	mov	r4,r19
 1001d7c:	000d883a 	mov	r6,zero
 1001d80:	01c00044 	movi	r7,1
 1001d84:	403ee83a 	callr	r8
 1001d88:	1021883a 	mov	r16,r2
 1001d8c:	00bfffc4 	movi	r2,-1
 1001d90:	80800226 	beq	r16,r2,1001d9c <_fflush_r+0x1dc>
 1001d94:	92000a17 	ldw	r8,40(r18)
 1001d98:	003fa406 	br	1001c2c <_fflush_r+0x6c>
 1001d9c:	98c00017 	ldw	r3,0(r19)
 1001da0:	00800744 	movi	r2,29
 1001da4:	18bfde26 	beq	r3,r2,1001d20 <_fflush_r+0x160>
 1001da8:	9080030b 	ldhu	r2,12(r18)
 1001dac:	8007883a 	mov	r3,r16
 1001db0:	10801014 	ori	r2,r2,64
 1001db4:	9080030d 	sth	r2,12(r18)
 1001db8:	003fcf06 	br	1001cf8 <_fflush_r+0x138>

01001dbc <fflush>:
 1001dbc:	01404034 	movhi	r5,256
 1001dc0:	2946f004 	addi	r5,r5,7104
 1001dc4:	2007883a 	mov	r3,r4
 1001dc8:	20000526 	beq	r4,zero,1001de0 <fflush+0x24>
 1001dcc:	00804074 	movhi	r2,257
 1001dd0:	10b9a904 	addi	r2,r2,-6492
 1001dd4:	11000017 	ldw	r4,0(r2)
 1001dd8:	180b883a 	mov	r5,r3
 1001ddc:	1001bc01 	jmpi	1001bc0 <_fflush_r>
 1001de0:	00804074 	movhi	r2,257
 1001de4:	10b9aa04 	addi	r2,r2,-6488
 1001de8:	11000017 	ldw	r4,0(r2)
 1001dec:	10025241 	jmpi	1002524 <_fwalk_reent>

01001df0 <std>:
 1001df0:	00804034 	movhi	r2,256
 1001df4:	108a3404 	addi	r2,r2,10448
 1001df8:	20800b15 	stw	r2,44(r4)
 1001dfc:	00804034 	movhi	r2,256
 1001e00:	108a6f04 	addi	r2,r2,10684
 1001e04:	20800815 	stw	r2,32(r4)
 1001e08:	00c04034 	movhi	r3,256
 1001e0c:	18ca5004 	addi	r3,r3,10560
 1001e10:	00804034 	movhi	r2,256
 1001e14:	108a3604 	addi	r2,r2,10456
 1001e18:	2140030d 	sth	r5,12(r4)
 1001e1c:	2180038d 	sth	r6,14(r4)
 1001e20:	20c00915 	stw	r3,36(r4)
 1001e24:	20800a15 	stw	r2,40(r4)
 1001e28:	20000015 	stw	zero,0(r4)
 1001e2c:	20000115 	stw	zero,4(r4)
 1001e30:	20000215 	stw	zero,8(r4)
 1001e34:	20000415 	stw	zero,16(r4)
 1001e38:	20000515 	stw	zero,20(r4)
 1001e3c:	20000615 	stw	zero,24(r4)
 1001e40:	21000715 	stw	r4,28(r4)
 1001e44:	f800283a 	ret

01001e48 <__sfp_lock_acquire>:
 1001e48:	f800283a 	ret

01001e4c <__sfp_lock_release>:
 1001e4c:	f800283a 	ret

01001e50 <__sinit_lock_acquire>:
 1001e50:	f800283a 	ret

01001e54 <__sinit_lock_release>:
 1001e54:	f800283a 	ret

01001e58 <__sinit>:
 1001e58:	20800e17 	ldw	r2,56(r4)
 1001e5c:	defffd04 	addi	sp,sp,-12
 1001e60:	dc400115 	stw	r17,4(sp)
 1001e64:	dc000015 	stw	r16,0(sp)
 1001e68:	dfc00215 	stw	ra,8(sp)
 1001e6c:	04400044 	movi	r17,1
 1001e70:	01400104 	movi	r5,4
 1001e74:	000d883a 	mov	r6,zero
 1001e78:	2021883a 	mov	r16,r4
 1001e7c:	2200bb04 	addi	r8,r4,748
 1001e80:	200f883a 	mov	r7,r4
 1001e84:	10000526 	beq	r2,zero,1001e9c <__sinit+0x44>
 1001e88:	dfc00217 	ldw	ra,8(sp)
 1001e8c:	dc400117 	ldw	r17,4(sp)
 1001e90:	dc000017 	ldw	r16,0(sp)
 1001e94:	dec00304 	addi	sp,sp,12
 1001e98:	f800283a 	ret
 1001e9c:	21000117 	ldw	r4,4(r4)
 1001ea0:	00804034 	movhi	r2,256
 1001ea4:	1087cf04 	addi	r2,r2,7996
 1001ea8:	00c000c4 	movi	r3,3
 1001eac:	80800f15 	stw	r2,60(r16)
 1001eb0:	80c0b915 	stw	r3,740(r16)
 1001eb4:	8200ba15 	stw	r8,744(r16)
 1001eb8:	84400e15 	stw	r17,56(r16)
 1001ebc:	8000b815 	stw	zero,736(r16)
 1001ec0:	1001df00 	call	1001df0 <std>
 1001ec4:	81000217 	ldw	r4,8(r16)
 1001ec8:	880d883a 	mov	r6,r17
 1001ecc:	800f883a 	mov	r7,r16
 1001ed0:	01400284 	movi	r5,10
 1001ed4:	1001df00 	call	1001df0 <std>
 1001ed8:	81000317 	ldw	r4,12(r16)
 1001edc:	800f883a 	mov	r7,r16
 1001ee0:	01400484 	movi	r5,18
 1001ee4:	01800084 	movi	r6,2
 1001ee8:	dfc00217 	ldw	ra,8(sp)
 1001eec:	dc400117 	ldw	r17,4(sp)
 1001ef0:	dc000017 	ldw	r16,0(sp)
 1001ef4:	dec00304 	addi	sp,sp,12
 1001ef8:	1001df01 	jmpi	1001df0 <std>

01001efc <__fp_lock>:
 1001efc:	0005883a 	mov	r2,zero
 1001f00:	f800283a 	ret

01001f04 <__fp_unlock>:
 1001f04:	0005883a 	mov	r2,zero
 1001f08:	f800283a 	ret

01001f0c <__fp_unlock_all>:
 1001f0c:	00804074 	movhi	r2,257
 1001f10:	10b9a904 	addi	r2,r2,-6492
 1001f14:	11000017 	ldw	r4,0(r2)
 1001f18:	01404034 	movhi	r5,256
 1001f1c:	2947c104 	addi	r5,r5,7940
 1001f20:	10025ec1 	jmpi	10025ec <_fwalk>

01001f24 <__fp_lock_all>:
 1001f24:	00804074 	movhi	r2,257
 1001f28:	10b9a904 	addi	r2,r2,-6492
 1001f2c:	11000017 	ldw	r4,0(r2)
 1001f30:	01404034 	movhi	r5,256
 1001f34:	2947bf04 	addi	r5,r5,7932
 1001f38:	10025ec1 	jmpi	10025ec <_fwalk>

01001f3c <_cleanup_r>:
 1001f3c:	01404034 	movhi	r5,256
 1001f40:	294b0504 	addi	r5,r5,11284
 1001f44:	10025ec1 	jmpi	10025ec <_fwalk>

01001f48 <_cleanup>:
 1001f48:	00804074 	movhi	r2,257
 1001f4c:	10b9aa04 	addi	r2,r2,-6488
 1001f50:	11000017 	ldw	r4,0(r2)
 1001f54:	1001f3c1 	jmpi	1001f3c <_cleanup_r>

01001f58 <__sfmoreglue>:
 1001f58:	defffc04 	addi	sp,sp,-16
 1001f5c:	dc000015 	stw	r16,0(sp)
 1001f60:	2821883a 	mov	r16,r5
 1001f64:	dc400115 	stw	r17,4(sp)
 1001f68:	01401704 	movi	r5,92
 1001f6c:	2023883a 	mov	r17,r4
 1001f70:	8009883a 	mov	r4,r16
 1001f74:	dfc00315 	stw	ra,12(sp)
 1001f78:	dcc00215 	stw	r19,8(sp)
 1001f7c:	1002dfc0 	call	1002dfc <__mulsi3>
 1001f80:	11400304 	addi	r5,r2,12
 1001f84:	8809883a 	mov	r4,r17
 1001f88:	1027883a 	mov	r19,r2
 1001f8c:	1000a7c0 	call	1000a7c <_malloc_r>
 1001f90:	10c00304 	addi	r3,r2,12
 1001f94:	1023883a 	mov	r17,r2
 1001f98:	1809883a 	mov	r4,r3
 1001f9c:	980d883a 	mov	r6,r19
 1001fa0:	000b883a 	mov	r5,zero
 1001fa4:	10000b26 	beq	r2,zero,1001fd4 <__sfmoreglue+0x7c>
 1001fa8:	14000115 	stw	r16,4(r2)
 1001fac:	10c00215 	stw	r3,8(r2)
 1001fb0:	10000015 	stw	zero,0(r2)
 1001fb4:	10028380 	call	1002838 <memset>
 1001fb8:	8805883a 	mov	r2,r17
 1001fbc:	dfc00317 	ldw	ra,12(sp)
 1001fc0:	dcc00217 	ldw	r19,8(sp)
 1001fc4:	dc400117 	ldw	r17,4(sp)
 1001fc8:	dc000017 	ldw	r16,0(sp)
 1001fcc:	dec00404 	addi	sp,sp,16
 1001fd0:	f800283a 	ret
 1001fd4:	0023883a 	mov	r17,zero
 1001fd8:	8805883a 	mov	r2,r17
 1001fdc:	dfc00317 	ldw	ra,12(sp)
 1001fe0:	dcc00217 	ldw	r19,8(sp)
 1001fe4:	dc400117 	ldw	r17,4(sp)
 1001fe8:	dc000017 	ldw	r16,0(sp)
 1001fec:	dec00404 	addi	sp,sp,16
 1001ff0:	f800283a 	ret

01001ff4 <__sfp>:
 1001ff4:	defffd04 	addi	sp,sp,-12
 1001ff8:	00804074 	movhi	r2,257
 1001ffc:	10b9aa04 	addi	r2,r2,-6488
 1002000:	dc000015 	stw	r16,0(sp)
 1002004:	14000017 	ldw	r16,0(r2)
 1002008:	dc400115 	stw	r17,4(sp)
 100200c:	dfc00215 	stw	ra,8(sp)
 1002010:	80800e17 	ldw	r2,56(r16)
 1002014:	2023883a 	mov	r17,r4
 1002018:	10002626 	beq	r2,zero,10020b4 <__sfp+0xc0>
 100201c:	8400b804 	addi	r16,r16,736
 1002020:	80800117 	ldw	r2,4(r16)
 1002024:	81000217 	ldw	r4,8(r16)
 1002028:	10ffffc4 	addi	r3,r2,-1
 100202c:	18000916 	blt	r3,zero,1002054 <__sfp+0x60>
 1002030:	2080030f 	ldh	r2,12(r4)
 1002034:	10000b26 	beq	r2,zero,1002064 <__sfp+0x70>
 1002038:	017fffc4 	movi	r5,-1
 100203c:	00000206 	br	1002048 <__sfp+0x54>
 1002040:	2080030f 	ldh	r2,12(r4)
 1002044:	10000726 	beq	r2,zero,1002064 <__sfp+0x70>
 1002048:	18ffffc4 	addi	r3,r3,-1
 100204c:	21001704 	addi	r4,r4,92
 1002050:	197ffb1e 	bne	r3,r5,1002040 <__sfp+0x4c>
 1002054:	80800017 	ldw	r2,0(r16)
 1002058:	10001926 	beq	r2,zero,10020c0 <__sfp+0xcc>
 100205c:	1021883a 	mov	r16,r2
 1002060:	003fef06 	br	1002020 <__sfp+0x2c>
 1002064:	00bfffc4 	movi	r2,-1
 1002068:	00c00044 	movi	r3,1
 100206c:	2080038d 	sth	r2,14(r4)
 1002070:	20c0030d 	sth	r3,12(r4)
 1002074:	20000015 	stw	zero,0(r4)
 1002078:	20000215 	stw	zero,8(r4)
 100207c:	20000115 	stw	zero,4(r4)
 1002080:	20000415 	stw	zero,16(r4)
 1002084:	20000515 	stw	zero,20(r4)
 1002088:	20000615 	stw	zero,24(r4)
 100208c:	20000c15 	stw	zero,48(r4)
 1002090:	20000d15 	stw	zero,52(r4)
 1002094:	20001115 	stw	zero,68(r4)
 1002098:	20001215 	stw	zero,72(r4)
 100209c:	2005883a 	mov	r2,r4
 10020a0:	dfc00217 	ldw	ra,8(sp)
 10020a4:	dc400117 	ldw	r17,4(sp)
 10020a8:	dc000017 	ldw	r16,0(sp)
 10020ac:	dec00304 	addi	sp,sp,12
 10020b0:	f800283a 	ret
 10020b4:	8009883a 	mov	r4,r16
 10020b8:	1001e580 	call	1001e58 <__sinit>
 10020bc:	003fd706 	br	100201c <__sfp+0x28>
 10020c0:	8809883a 	mov	r4,r17
 10020c4:	01400104 	movi	r5,4
 10020c8:	1001f580 	call	1001f58 <__sfmoreglue>
 10020cc:	80800015 	stw	r2,0(r16)
 10020d0:	103fe21e 	bne	r2,zero,100205c <__sfp+0x68>
 10020d4:	00800304 	movi	r2,12
 10020d8:	0009883a 	mov	r4,zero
 10020dc:	88800015 	stw	r2,0(r17)
 10020e0:	003fee06 	br	100209c <__sfp+0xa8>

010020e4 <_malloc_trim_r>:
 10020e4:	defffb04 	addi	sp,sp,-20
 10020e8:	dcc00315 	stw	r19,12(sp)
 10020ec:	04c04074 	movhi	r19,257
 10020f0:	9cf40f04 	addi	r19,r19,-12228
 10020f4:	dc800215 	stw	r18,8(sp)
 10020f8:	dc400115 	stw	r17,4(sp)
 10020fc:	dc000015 	stw	r16,0(sp)
 1002100:	2823883a 	mov	r17,r5
 1002104:	2025883a 	mov	r18,r4
 1002108:	dfc00415 	stw	ra,16(sp)
 100210c:	10034c80 	call	10034c8 <__malloc_lock>
 1002110:	98800217 	ldw	r2,8(r19)
 1002114:	9009883a 	mov	r4,r18
 1002118:	000b883a 	mov	r5,zero
 100211c:	10c00117 	ldw	r3,4(r2)
 1002120:	00bfff04 	movi	r2,-4
 1002124:	18a0703a 	and	r16,r3,r2
 1002128:	8463c83a 	sub	r17,r16,r17
 100212c:	8c43fbc4 	addi	r17,r17,4079
 1002130:	8822d33a 	srli	r17,r17,12
 1002134:	0083ffc4 	movi	r2,4095
 1002138:	8c7fffc4 	addi	r17,r17,-1
 100213c:	8822933a 	slli	r17,r17,12
 1002140:	1440060e 	bge	r2,r17,100215c <_malloc_trim_r+0x78>
 1002144:	1001a140 	call	1001a14 <_sbrk_r>
 1002148:	98c00217 	ldw	r3,8(r19)
 100214c:	9009883a 	mov	r4,r18
 1002150:	044bc83a 	sub	r5,zero,r17
 1002154:	80c7883a 	add	r3,r16,r3
 1002158:	10c00926 	beq	r2,r3,1002180 <_malloc_trim_r+0x9c>
 100215c:	10034e80 	call	10034e8 <__malloc_unlock>
 1002160:	0005883a 	mov	r2,zero
 1002164:	dfc00417 	ldw	ra,16(sp)
 1002168:	dcc00317 	ldw	r19,12(sp)
 100216c:	dc800217 	ldw	r18,8(sp)
 1002170:	dc400117 	ldw	r17,4(sp)
 1002174:	dc000017 	ldw	r16,0(sp)
 1002178:	dec00504 	addi	sp,sp,20
 100217c:	f800283a 	ret
 1002180:	9009883a 	mov	r4,r18
 1002184:	1001a140 	call	1001a14 <_sbrk_r>
 1002188:	844dc83a 	sub	r6,r16,r17
 100218c:	00ffffc4 	movi	r3,-1
 1002190:	9009883a 	mov	r4,r18
 1002194:	000b883a 	mov	r5,zero
 1002198:	01c04074 	movhi	r7,257
 100219c:	39c07604 	addi	r7,r7,472
 10021a0:	31800054 	ori	r6,r6,1
 10021a4:	10c00926 	beq	r2,r3,10021cc <_malloc_trim_r+0xe8>
 10021a8:	38800017 	ldw	r2,0(r7)
 10021ac:	98c00217 	ldw	r3,8(r19)
 10021b0:	9009883a 	mov	r4,r18
 10021b4:	1445c83a 	sub	r2,r2,r17
 10021b8:	38800015 	stw	r2,0(r7)
 10021bc:	19800115 	stw	r6,4(r3)
 10021c0:	10034e80 	call	10034e8 <__malloc_unlock>
 10021c4:	00800044 	movi	r2,1
 10021c8:	003fe606 	br	1002164 <_malloc_trim_r+0x80>
 10021cc:	1001a140 	call	1001a14 <_sbrk_r>
 10021d0:	99800217 	ldw	r6,8(r19)
 10021d4:	100f883a 	mov	r7,r2
 10021d8:	9009883a 	mov	r4,r18
 10021dc:	1187c83a 	sub	r3,r2,r6
 10021e0:	008003c4 	movi	r2,15
 10021e4:	19400054 	ori	r5,r3,1
 10021e8:	10ffdc0e 	bge	r2,r3,100215c <_malloc_trim_r+0x78>
 10021ec:	00804074 	movhi	r2,257
 10021f0:	10b9ac04 	addi	r2,r2,-6480
 10021f4:	10c00017 	ldw	r3,0(r2)
 10021f8:	00804074 	movhi	r2,257
 10021fc:	10807604 	addi	r2,r2,472
 1002200:	31400115 	stw	r5,4(r6)
 1002204:	38c7c83a 	sub	r3,r7,r3
 1002208:	10c00015 	stw	r3,0(r2)
 100220c:	003fd306 	br	100215c <_malloc_trim_r+0x78>

01002210 <_free_r>:
 1002210:	defffd04 	addi	sp,sp,-12
 1002214:	dc400115 	stw	r17,4(sp)
 1002218:	dc000015 	stw	r16,0(sp)
 100221c:	dfc00215 	stw	ra,8(sp)
 1002220:	2821883a 	mov	r16,r5
 1002224:	2023883a 	mov	r17,r4
 1002228:	28005a26 	beq	r5,zero,1002394 <_free_r+0x184>
 100222c:	10034c80 	call	10034c8 <__malloc_lock>
 1002230:	823ffe04 	addi	r8,r16,-8
 1002234:	41400117 	ldw	r5,4(r8)
 1002238:	00bfff84 	movi	r2,-2
 100223c:	02804074 	movhi	r10,257
 1002240:	52b40f04 	addi	r10,r10,-12228
 1002244:	288e703a 	and	r7,r5,r2
 1002248:	41cd883a 	add	r6,r8,r7
 100224c:	30c00117 	ldw	r3,4(r6)
 1002250:	51000217 	ldw	r4,8(r10)
 1002254:	00bfff04 	movi	r2,-4
 1002258:	1892703a 	and	r9,r3,r2
 100225c:	5017883a 	mov	r11,r10
 1002260:	31006726 	beq	r6,r4,1002400 <_free_r+0x1f0>
 1002264:	2880004c 	andi	r2,r5,1
 1002268:	1005003a 	cmpeq	r2,r2,zero
 100226c:	32400115 	stw	r9,4(r6)
 1002270:	10001a1e 	bne	r2,zero,10022dc <_free_r+0xcc>
 1002274:	000b883a 	mov	r5,zero
 1002278:	3247883a 	add	r3,r6,r9
 100227c:	18800117 	ldw	r2,4(r3)
 1002280:	1080004c 	andi	r2,r2,1
 1002284:	1000231e 	bne	r2,zero,1002314 <_free_r+0x104>
 1002288:	280ac03a 	cmpne	r5,r5,zero
 100228c:	3a4f883a 	add	r7,r7,r9
 1002290:	2800451e 	bne	r5,zero,10023a8 <_free_r+0x198>
 1002294:	31000217 	ldw	r4,8(r6)
 1002298:	00804074 	movhi	r2,257
 100229c:	10b41104 	addi	r2,r2,-12220
 10022a0:	20807b26 	beq	r4,r2,1002490 <_free_r+0x280>
 10022a4:	30800317 	ldw	r2,12(r6)
 10022a8:	3a07883a 	add	r3,r7,r8
 10022ac:	19c00015 	stw	r7,0(r3)
 10022b0:	11000215 	stw	r4,8(r2)
 10022b4:	20800315 	stw	r2,12(r4)
 10022b8:	38800054 	ori	r2,r7,1
 10022bc:	40800115 	stw	r2,4(r8)
 10022c0:	28001a26 	beq	r5,zero,100232c <_free_r+0x11c>
 10022c4:	8809883a 	mov	r4,r17
 10022c8:	dfc00217 	ldw	ra,8(sp)
 10022cc:	dc400117 	ldw	r17,4(sp)
 10022d0:	dc000017 	ldw	r16,0(sp)
 10022d4:	dec00304 	addi	sp,sp,12
 10022d8:	10034e81 	jmpi	10034e8 <__malloc_unlock>
 10022dc:	80bffe17 	ldw	r2,-8(r16)
 10022e0:	50c00204 	addi	r3,r10,8
 10022e4:	4091c83a 	sub	r8,r8,r2
 10022e8:	41000217 	ldw	r4,8(r8)
 10022ec:	388f883a 	add	r7,r7,r2
 10022f0:	20c06126 	beq	r4,r3,1002478 <_free_r+0x268>
 10022f4:	40800317 	ldw	r2,12(r8)
 10022f8:	3247883a 	add	r3,r6,r9
 10022fc:	000b883a 	mov	r5,zero
 1002300:	11000215 	stw	r4,8(r2)
 1002304:	20800315 	stw	r2,12(r4)
 1002308:	18800117 	ldw	r2,4(r3)
 100230c:	1080004c 	andi	r2,r2,1
 1002310:	103fdd26 	beq	r2,zero,1002288 <_free_r+0x78>
 1002314:	38800054 	ori	r2,r7,1
 1002318:	3a07883a 	add	r3,r7,r8
 100231c:	280ac03a 	cmpne	r5,r5,zero
 1002320:	40800115 	stw	r2,4(r8)
 1002324:	19c00015 	stw	r7,0(r3)
 1002328:	283fe61e 	bne	r5,zero,10022c4 <_free_r+0xb4>
 100232c:	00807fc4 	movi	r2,511
 1002330:	11c01f2e 	bgeu	r2,r7,10023b0 <_free_r+0x1a0>
 1002334:	3806d27a 	srli	r3,r7,9
 1002338:	1800481e 	bne	r3,zero,100245c <_free_r+0x24c>
 100233c:	3804d0fa 	srli	r2,r7,3
 1002340:	100690fa 	slli	r3,r2,3
 1002344:	1acd883a 	add	r6,r3,r11
 1002348:	31400217 	ldw	r5,8(r6)
 100234c:	31405926 	beq	r6,r5,10024b4 <_free_r+0x2a4>
 1002350:	28800117 	ldw	r2,4(r5)
 1002354:	00ffff04 	movi	r3,-4
 1002358:	10c4703a 	and	r2,r2,r3
 100235c:	3880022e 	bgeu	r7,r2,1002368 <_free_r+0x158>
 1002360:	29400217 	ldw	r5,8(r5)
 1002364:	317ffa1e 	bne	r6,r5,1002350 <_free_r+0x140>
 1002368:	29800317 	ldw	r6,12(r5)
 100236c:	41800315 	stw	r6,12(r8)
 1002370:	41400215 	stw	r5,8(r8)
 1002374:	8809883a 	mov	r4,r17
 1002378:	2a000315 	stw	r8,12(r5)
 100237c:	32000215 	stw	r8,8(r6)
 1002380:	dfc00217 	ldw	ra,8(sp)
 1002384:	dc400117 	ldw	r17,4(sp)
 1002388:	dc000017 	ldw	r16,0(sp)
 100238c:	dec00304 	addi	sp,sp,12
 1002390:	10034e81 	jmpi	10034e8 <__malloc_unlock>
 1002394:	dfc00217 	ldw	ra,8(sp)
 1002398:	dc400117 	ldw	r17,4(sp)
 100239c:	dc000017 	ldw	r16,0(sp)
 10023a0:	dec00304 	addi	sp,sp,12
 10023a4:	f800283a 	ret
 10023a8:	31000217 	ldw	r4,8(r6)
 10023ac:	003fbd06 	br	10022a4 <_free_r+0x94>
 10023b0:	3806d0fa 	srli	r3,r7,3
 10023b4:	00800044 	movi	r2,1
 10023b8:	51400117 	ldw	r5,4(r10)
 10023bc:	180890fa 	slli	r4,r3,3
 10023c0:	1807d0ba 	srai	r3,r3,2
 10023c4:	22c9883a 	add	r4,r4,r11
 10023c8:	21800217 	ldw	r6,8(r4)
 10023cc:	10c4983a 	sll	r2,r2,r3
 10023d0:	41000315 	stw	r4,12(r8)
 10023d4:	41800215 	stw	r6,8(r8)
 10023d8:	288ab03a 	or	r5,r5,r2
 10023dc:	22000215 	stw	r8,8(r4)
 10023e0:	8809883a 	mov	r4,r17
 10023e4:	51400115 	stw	r5,4(r10)
 10023e8:	32000315 	stw	r8,12(r6)
 10023ec:	dfc00217 	ldw	ra,8(sp)
 10023f0:	dc400117 	ldw	r17,4(sp)
 10023f4:	dc000017 	ldw	r16,0(sp)
 10023f8:	dec00304 	addi	sp,sp,12
 10023fc:	10034e81 	jmpi	10034e8 <__malloc_unlock>
 1002400:	2880004c 	andi	r2,r5,1
 1002404:	3a4d883a 	add	r6,r7,r9
 1002408:	1000071e 	bne	r2,zero,1002428 <_free_r+0x218>
 100240c:	80bffe17 	ldw	r2,-8(r16)
 1002410:	4091c83a 	sub	r8,r8,r2
 1002414:	41000317 	ldw	r4,12(r8)
 1002418:	40c00217 	ldw	r3,8(r8)
 100241c:	308d883a 	add	r6,r6,r2
 1002420:	20c00215 	stw	r3,8(r4)
 1002424:	19000315 	stw	r4,12(r3)
 1002428:	00804074 	movhi	r2,257
 100242c:	10b9ab04 	addi	r2,r2,-6484
 1002430:	11000017 	ldw	r4,0(r2)
 1002434:	30c00054 	ori	r3,r6,1
 1002438:	52000215 	stw	r8,8(r10)
 100243c:	40c00115 	stw	r3,4(r8)
 1002440:	313fa036 	bltu	r6,r4,10022c4 <_free_r+0xb4>
 1002444:	00804074 	movhi	r2,257
 1002448:	10805f04 	addi	r2,r2,380
 100244c:	11400017 	ldw	r5,0(r2)
 1002450:	8809883a 	mov	r4,r17
 1002454:	10020e40 	call	10020e4 <_malloc_trim_r>
 1002458:	003f9a06 	br	10022c4 <_free_r+0xb4>
 100245c:	00800104 	movi	r2,4
 1002460:	10c0072e 	bgeu	r2,r3,1002480 <_free_r+0x270>
 1002464:	00800504 	movi	r2,20
 1002468:	10c01936 	bltu	r2,r3,10024d0 <_free_r+0x2c0>
 100246c:	188016c4 	addi	r2,r3,91
 1002470:	100690fa 	slli	r3,r2,3
 1002474:	003fb306 	br	1002344 <_free_r+0x134>
 1002478:	01400044 	movi	r5,1
 100247c:	003f7e06 	br	1002278 <_free_r+0x68>
 1002480:	3804d1ba 	srli	r2,r7,6
 1002484:	10800e04 	addi	r2,r2,56
 1002488:	100690fa 	slli	r3,r2,3
 100248c:	003fad06 	br	1002344 <_free_r+0x134>
 1002490:	22000315 	stw	r8,12(r4)
 1002494:	22000215 	stw	r8,8(r4)
 1002498:	3a05883a 	add	r2,r7,r8
 100249c:	38c00054 	ori	r3,r7,1
 10024a0:	11c00015 	stw	r7,0(r2)
 10024a4:	41000215 	stw	r4,8(r8)
 10024a8:	40c00115 	stw	r3,4(r8)
 10024ac:	41000315 	stw	r4,12(r8)
 10024b0:	003f8406 	br	10022c4 <_free_r+0xb4>
 10024b4:	1005d0ba 	srai	r2,r2,2
 10024b8:	00c00044 	movi	r3,1
 10024bc:	51000117 	ldw	r4,4(r10)
 10024c0:	1886983a 	sll	r3,r3,r2
 10024c4:	20c8b03a 	or	r4,r4,r3
 10024c8:	51000115 	stw	r4,4(r10)
 10024cc:	003fa706 	br	100236c <_free_r+0x15c>
 10024d0:	00801504 	movi	r2,84
 10024d4:	10c00436 	bltu	r2,r3,10024e8 <_free_r+0x2d8>
 10024d8:	3804d33a 	srli	r2,r7,12
 10024dc:	10801b84 	addi	r2,r2,110
 10024e0:	100690fa 	slli	r3,r2,3
 10024e4:	003f9706 	br	1002344 <_free_r+0x134>
 10024e8:	00805504 	movi	r2,340
 10024ec:	10c00436 	bltu	r2,r3,1002500 <_free_r+0x2f0>
 10024f0:	3804d3fa 	srli	r2,r7,15
 10024f4:	10801dc4 	addi	r2,r2,119
 10024f8:	100690fa 	slli	r3,r2,3
 10024fc:	003f9106 	br	1002344 <_free_r+0x134>
 1002500:	00815504 	movi	r2,1364
 1002504:	10c0032e 	bgeu	r2,r3,1002514 <_free_r+0x304>
 1002508:	00801f84 	movi	r2,126
 100250c:	00c0fc04 	movi	r3,1008
 1002510:	003f8c06 	br	1002344 <_free_r+0x134>
 1002514:	3804d4ba 	srli	r2,r7,18
 1002518:	10801f04 	addi	r2,r2,124
 100251c:	100690fa 	slli	r3,r2,3
 1002520:	003f8806 	br	1002344 <_free_r+0x134>

01002524 <_fwalk_reent>:
 1002524:	defff704 	addi	sp,sp,-36
 1002528:	dcc00315 	stw	r19,12(sp)
 100252c:	24c0b804 	addi	r19,r4,736
 1002530:	dd800615 	stw	r22,24(sp)
 1002534:	dd400515 	stw	r21,20(sp)
 1002538:	dfc00815 	stw	ra,32(sp)
 100253c:	ddc00715 	stw	r23,28(sp)
 1002540:	dd000415 	stw	r20,16(sp)
 1002544:	dc800215 	stw	r18,8(sp)
 1002548:	dc400115 	stw	r17,4(sp)
 100254c:	dc000015 	stw	r16,0(sp)
 1002550:	202b883a 	mov	r21,r4
 1002554:	282d883a 	mov	r22,r5
 1002558:	1001e480 	call	1001e48 <__sfp_lock_acquire>
 100255c:	98002126 	beq	r19,zero,10025e4 <_fwalk_reent+0xc0>
 1002560:	002f883a 	mov	r23,zero
 1002564:	9c800117 	ldw	r18,4(r19)
 1002568:	9c000217 	ldw	r16,8(r19)
 100256c:	90bfffc4 	addi	r2,r18,-1
 1002570:	10000d16 	blt	r2,zero,10025a8 <_fwalk_reent+0x84>
 1002574:	0023883a 	mov	r17,zero
 1002578:	053fffc4 	movi	r20,-1
 100257c:	8080030f 	ldh	r2,12(r16)
 1002580:	8c400044 	addi	r17,r17,1
 1002584:	10000626 	beq	r2,zero,10025a0 <_fwalk_reent+0x7c>
 1002588:	8080038f 	ldh	r2,14(r16)
 100258c:	800b883a 	mov	r5,r16
 1002590:	a809883a 	mov	r4,r21
 1002594:	15000226 	beq	r2,r20,10025a0 <_fwalk_reent+0x7c>
 1002598:	b03ee83a 	callr	r22
 100259c:	b8aeb03a 	or	r23,r23,r2
 10025a0:	84001704 	addi	r16,r16,92
 10025a4:	947ff51e 	bne	r18,r17,100257c <_fwalk_reent+0x58>
 10025a8:	9cc00017 	ldw	r19,0(r19)
 10025ac:	983fed1e 	bne	r19,zero,1002564 <_fwalk_reent+0x40>
 10025b0:	1001e4c0 	call	1001e4c <__sfp_lock_release>
 10025b4:	b805883a 	mov	r2,r23
 10025b8:	dfc00817 	ldw	ra,32(sp)
 10025bc:	ddc00717 	ldw	r23,28(sp)
 10025c0:	dd800617 	ldw	r22,24(sp)
 10025c4:	dd400517 	ldw	r21,20(sp)
 10025c8:	dd000417 	ldw	r20,16(sp)
 10025cc:	dcc00317 	ldw	r19,12(sp)
 10025d0:	dc800217 	ldw	r18,8(sp)
 10025d4:	dc400117 	ldw	r17,4(sp)
 10025d8:	dc000017 	ldw	r16,0(sp)
 10025dc:	dec00904 	addi	sp,sp,36
 10025e0:	f800283a 	ret
 10025e4:	002f883a 	mov	r23,zero
 10025e8:	003ff106 	br	10025b0 <_fwalk_reent+0x8c>

010025ec <_fwalk>:
 10025ec:	defff804 	addi	sp,sp,-32
 10025f0:	dcc00315 	stw	r19,12(sp)
 10025f4:	24c0b804 	addi	r19,r4,736
 10025f8:	dd400515 	stw	r21,20(sp)
 10025fc:	dfc00715 	stw	ra,28(sp)
 1002600:	dd800615 	stw	r22,24(sp)
 1002604:	dd000415 	stw	r20,16(sp)
 1002608:	dc800215 	stw	r18,8(sp)
 100260c:	dc400115 	stw	r17,4(sp)
 1002610:	dc000015 	stw	r16,0(sp)
 1002614:	282b883a 	mov	r21,r5
 1002618:	1001e480 	call	1001e48 <__sfp_lock_acquire>
 100261c:	98001f26 	beq	r19,zero,100269c <_fwalk+0xb0>
 1002620:	002d883a 	mov	r22,zero
 1002624:	9c800117 	ldw	r18,4(r19)
 1002628:	9c000217 	ldw	r16,8(r19)
 100262c:	90bfffc4 	addi	r2,r18,-1
 1002630:	10000c16 	blt	r2,zero,1002664 <_fwalk+0x78>
 1002634:	0023883a 	mov	r17,zero
 1002638:	053fffc4 	movi	r20,-1
 100263c:	8080030f 	ldh	r2,12(r16)
 1002640:	8c400044 	addi	r17,r17,1
 1002644:	10000526 	beq	r2,zero,100265c <_fwalk+0x70>
 1002648:	8080038f 	ldh	r2,14(r16)
 100264c:	8009883a 	mov	r4,r16
 1002650:	15000226 	beq	r2,r20,100265c <_fwalk+0x70>
 1002654:	a83ee83a 	callr	r21
 1002658:	b0acb03a 	or	r22,r22,r2
 100265c:	84001704 	addi	r16,r16,92
 1002660:	947ff61e 	bne	r18,r17,100263c <_fwalk+0x50>
 1002664:	9cc00017 	ldw	r19,0(r19)
 1002668:	983fee1e 	bne	r19,zero,1002624 <_fwalk+0x38>
 100266c:	1001e4c0 	call	1001e4c <__sfp_lock_release>
 1002670:	b005883a 	mov	r2,r22
 1002674:	dfc00717 	ldw	ra,28(sp)
 1002678:	dd800617 	ldw	r22,24(sp)
 100267c:	dd400517 	ldw	r21,20(sp)
 1002680:	dd000417 	ldw	r20,16(sp)
 1002684:	dcc00317 	ldw	r19,12(sp)
 1002688:	dc800217 	ldw	r18,8(sp)
 100268c:	dc400117 	ldw	r17,4(sp)
 1002690:	dc000017 	ldw	r16,0(sp)
 1002694:	dec00804 	addi	sp,sp,32
 1002698:	f800283a 	ret
 100269c:	002d883a 	mov	r22,zero
 10026a0:	003ff206 	br	100266c <_fwalk+0x80>

010026a4 <__smakebuf_r>:
 10026a4:	2880030b 	ldhu	r2,12(r5)
 10026a8:	deffed04 	addi	sp,sp,-76
 10026ac:	dc401015 	stw	r17,64(sp)
 10026b0:	1080008c 	andi	r2,r2,2
 10026b4:	dc000f15 	stw	r16,60(sp)
 10026b8:	dfc01215 	stw	ra,72(sp)
 10026bc:	dc801115 	stw	r18,68(sp)
 10026c0:	2821883a 	mov	r16,r5
 10026c4:	2023883a 	mov	r17,r4
 10026c8:	10000b26 	beq	r2,zero,10026f8 <__smakebuf_r+0x54>
 10026cc:	28c010c4 	addi	r3,r5,67
 10026d0:	00800044 	movi	r2,1
 10026d4:	28800515 	stw	r2,20(r5)
 10026d8:	28c00415 	stw	r3,16(r5)
 10026dc:	28c00015 	stw	r3,0(r5)
 10026e0:	dfc01217 	ldw	ra,72(sp)
 10026e4:	dc801117 	ldw	r18,68(sp)
 10026e8:	dc401017 	ldw	r17,64(sp)
 10026ec:	dc000f17 	ldw	r16,60(sp)
 10026f0:	dec01304 	addi	sp,sp,76
 10026f4:	f800283a 	ret
 10026f8:	2940038f 	ldh	r5,14(r5)
 10026fc:	28002116 	blt	r5,zero,1002784 <__smakebuf_r+0xe0>
 1002700:	d80d883a 	mov	r6,sp
 1002704:	1002c280 	call	1002c28 <_fstat_r>
 1002708:	10001e16 	blt	r2,zero,1002784 <__smakebuf_r+0xe0>
 100270c:	d8800117 	ldw	r2,4(sp)
 1002710:	00e00014 	movui	r3,32768
 1002714:	113c000c 	andi	r4,r2,61440
 1002718:	20c03126 	beq	r4,r3,10027e0 <__smakebuf_r+0x13c>
 100271c:	8080030b 	ldhu	r2,12(r16)
 1002720:	00c80004 	movi	r3,8192
 1002724:	10820014 	ori	r2,r2,2048
 1002728:	8080030d 	sth	r2,12(r16)
 100272c:	20c01e26 	beq	r4,r3,10027a8 <__smakebuf_r+0x104>
 1002730:	04810004 	movi	r18,1024
 1002734:	8809883a 	mov	r4,r17
 1002738:	900b883a 	mov	r5,r18
 100273c:	1000a7c0 	call	1000a7c <_malloc_r>
 1002740:	1009883a 	mov	r4,r2
 1002744:	10003126 	beq	r2,zero,100280c <__smakebuf_r+0x168>
 1002748:	80c0030b 	ldhu	r3,12(r16)
 100274c:	00804034 	movhi	r2,256
 1002750:	1087cf04 	addi	r2,r2,7996
 1002754:	88800f15 	stw	r2,60(r17)
 1002758:	18c02014 	ori	r3,r3,128
 100275c:	84800515 	stw	r18,20(r16)
 1002760:	80c0030d 	sth	r3,12(r16)
 1002764:	81000415 	stw	r4,16(r16)
 1002768:	81000015 	stw	r4,0(r16)
 100276c:	dfc01217 	ldw	ra,72(sp)
 1002770:	dc801117 	ldw	r18,68(sp)
 1002774:	dc401017 	ldw	r17,64(sp)
 1002778:	dc000f17 	ldw	r16,60(sp)
 100277c:	dec01304 	addi	sp,sp,76
 1002780:	f800283a 	ret
 1002784:	80c0030b 	ldhu	r3,12(r16)
 1002788:	1880200c 	andi	r2,r3,128
 100278c:	10000426 	beq	r2,zero,10027a0 <__smakebuf_r+0xfc>
 1002790:	04801004 	movi	r18,64
 1002794:	18820014 	ori	r2,r3,2048
 1002798:	8080030d 	sth	r2,12(r16)
 100279c:	003fe506 	br	1002734 <__smakebuf_r+0x90>
 10027a0:	04810004 	movi	r18,1024
 10027a4:	003ffb06 	br	1002794 <__smakebuf_r+0xf0>
 10027a8:	8140038f 	ldh	r5,14(r16)
 10027ac:	8809883a 	mov	r4,r17
 10027b0:	1002c9c0 	call	1002c9c <_isatty_r>
 10027b4:	103fde26 	beq	r2,zero,1002730 <__smakebuf_r+0x8c>
 10027b8:	8080030b 	ldhu	r2,12(r16)
 10027bc:	80c010c4 	addi	r3,r16,67
 10027c0:	04810004 	movi	r18,1024
 10027c4:	10800054 	ori	r2,r2,1
 10027c8:	8080030d 	sth	r2,12(r16)
 10027cc:	00800044 	movi	r2,1
 10027d0:	80c00415 	stw	r3,16(r16)
 10027d4:	80800515 	stw	r2,20(r16)
 10027d8:	80c00015 	stw	r3,0(r16)
 10027dc:	003fd506 	br	1002734 <__smakebuf_r+0x90>
 10027e0:	80c00a17 	ldw	r3,40(r16)
 10027e4:	00804034 	movhi	r2,256
 10027e8:	108a3604 	addi	r2,r2,10456
 10027ec:	18bfcb1e 	bne	r3,r2,100271c <__smakebuf_r+0x78>
 10027f0:	8080030b 	ldhu	r2,12(r16)
 10027f4:	00c10004 	movi	r3,1024
 10027f8:	1825883a 	mov	r18,r3
 10027fc:	10c4b03a 	or	r2,r2,r3
 1002800:	8080030d 	sth	r2,12(r16)
 1002804:	80c01315 	stw	r3,76(r16)
 1002808:	003fca06 	br	1002734 <__smakebuf_r+0x90>
 100280c:	8100030b 	ldhu	r4,12(r16)
 1002810:	2080800c 	andi	r2,r4,512
 1002814:	103fb21e 	bne	r2,zero,10026e0 <__smakebuf_r+0x3c>
 1002818:	80c010c4 	addi	r3,r16,67
 100281c:	21000094 	ori	r4,r4,2
 1002820:	00800044 	movi	r2,1
 1002824:	80800515 	stw	r2,20(r16)
 1002828:	8100030d 	sth	r4,12(r16)
 100282c:	80c00415 	stw	r3,16(r16)
 1002830:	80c00015 	stw	r3,0(r16)
 1002834:	003faa06 	br	10026e0 <__smakebuf_r+0x3c>

01002838 <memset>:
 1002838:	008000c4 	movi	r2,3
 100283c:	29403fcc 	andi	r5,r5,255
 1002840:	2007883a 	mov	r3,r4
 1002844:	1180022e 	bgeu	r2,r6,1002850 <memset+0x18>
 1002848:	2084703a 	and	r2,r4,r2
 100284c:	10000826 	beq	r2,zero,1002870 <memset+0x38>
 1002850:	30000526 	beq	r6,zero,1002868 <memset+0x30>
 1002854:	2805883a 	mov	r2,r5
 1002858:	30cd883a 	add	r6,r6,r3
 100285c:	18800005 	stb	r2,0(r3)
 1002860:	18c00044 	addi	r3,r3,1
 1002864:	19bffd1e 	bne	r3,r6,100285c <memset+0x24>
 1002868:	2005883a 	mov	r2,r4
 100286c:	f800283a 	ret
 1002870:	2804923a 	slli	r2,r5,8
 1002874:	020003c4 	movi	r8,15
 1002878:	200f883a 	mov	r7,r4
 100287c:	2884b03a 	or	r2,r5,r2
 1002880:	1006943a 	slli	r3,r2,16
 1002884:	10c6b03a 	or	r3,r2,r3
 1002888:	41800a2e 	bgeu	r8,r6,10028b4 <memset+0x7c>
 100288c:	4005883a 	mov	r2,r8
 1002890:	31bffc04 	addi	r6,r6,-16
 1002894:	38c00015 	stw	r3,0(r7)
 1002898:	38c00115 	stw	r3,4(r7)
 100289c:	38c00215 	stw	r3,8(r7)
 10028a0:	38c00315 	stw	r3,12(r7)
 10028a4:	39c00404 	addi	r7,r7,16
 10028a8:	11bff936 	bltu	r2,r6,1002890 <memset+0x58>
 10028ac:	008000c4 	movi	r2,3
 10028b0:	1180052e 	bgeu	r2,r6,10028c8 <memset+0x90>
 10028b4:	31bfff04 	addi	r6,r6,-4
 10028b8:	008000c4 	movi	r2,3
 10028bc:	38c00015 	stw	r3,0(r7)
 10028c0:	39c00104 	addi	r7,r7,4
 10028c4:	11bffb36 	bltu	r2,r6,10028b4 <memset+0x7c>
 10028c8:	3807883a 	mov	r3,r7
 10028cc:	003fe006 	br	1002850 <memset+0x18>

010028d0 <__sclose>:
 10028d0:	2940038f 	ldh	r5,14(r5)
 10028d4:	1002a941 	jmpi	1002a94 <_close_r>

010028d8 <__sseek>:
 10028d8:	defffe04 	addi	sp,sp,-8
 10028dc:	dc000015 	stw	r16,0(sp)
 10028e0:	2821883a 	mov	r16,r5
 10028e4:	2940038f 	ldh	r5,14(r5)
 10028e8:	dfc00115 	stw	ra,4(sp)
 10028ec:	1002d0c0 	call	1002d0c <_lseek_r>
 10028f0:	1007883a 	mov	r3,r2
 10028f4:	00bfffc4 	movi	r2,-1
 10028f8:	18800926 	beq	r3,r2,1002920 <__sseek+0x48>
 10028fc:	8080030b 	ldhu	r2,12(r16)
 1002900:	80c01415 	stw	r3,80(r16)
 1002904:	10840014 	ori	r2,r2,4096
 1002908:	8080030d 	sth	r2,12(r16)
 100290c:	1805883a 	mov	r2,r3
 1002910:	dfc00117 	ldw	ra,4(sp)
 1002914:	dc000017 	ldw	r16,0(sp)
 1002918:	dec00204 	addi	sp,sp,8
 100291c:	f800283a 	ret
 1002920:	8080030b 	ldhu	r2,12(r16)
 1002924:	10bbffcc 	andi	r2,r2,61439
 1002928:	8080030d 	sth	r2,12(r16)
 100292c:	1805883a 	mov	r2,r3
 1002930:	dfc00117 	ldw	ra,4(sp)
 1002934:	dc000017 	ldw	r16,0(sp)
 1002938:	dec00204 	addi	sp,sp,8
 100293c:	f800283a 	ret

01002940 <__swrite>:
 1002940:	2880030b 	ldhu	r2,12(r5)
 1002944:	defffb04 	addi	sp,sp,-20
 1002948:	dcc00315 	stw	r19,12(sp)
 100294c:	1080400c 	andi	r2,r2,256
 1002950:	dc800215 	stw	r18,8(sp)
 1002954:	dc400115 	stw	r17,4(sp)
 1002958:	dc000015 	stw	r16,0(sp)
 100295c:	3027883a 	mov	r19,r6
 1002960:	3825883a 	mov	r18,r7
 1002964:	dfc00415 	stw	ra,16(sp)
 1002968:	2821883a 	mov	r16,r5
 100296c:	000d883a 	mov	r6,zero
 1002970:	01c00084 	movi	r7,2
 1002974:	2023883a 	mov	r17,r4
 1002978:	10000226 	beq	r2,zero,1002984 <__swrite+0x44>
 100297c:	2940038f 	ldh	r5,14(r5)
 1002980:	1002d0c0 	call	1002d0c <_lseek_r>
 1002984:	8080030b 	ldhu	r2,12(r16)
 1002988:	8140038f 	ldh	r5,14(r16)
 100298c:	8809883a 	mov	r4,r17
 1002990:	10bbffcc 	andi	r2,r2,61439
 1002994:	980d883a 	mov	r6,r19
 1002998:	900f883a 	mov	r7,r18
 100299c:	8080030d 	sth	r2,12(r16)
 10029a0:	dfc00417 	ldw	ra,16(sp)
 10029a4:	dcc00317 	ldw	r19,12(sp)
 10029a8:	dc800217 	ldw	r18,8(sp)
 10029ac:	dc400117 	ldw	r17,4(sp)
 10029b0:	dc000017 	ldw	r16,0(sp)
 10029b4:	dec00504 	addi	sp,sp,20
 10029b8:	1002a1c1 	jmpi	1002a1c <_write_r>

010029bc <__sread>:
 10029bc:	defffe04 	addi	sp,sp,-8
 10029c0:	dc000015 	stw	r16,0(sp)
 10029c4:	2821883a 	mov	r16,r5
 10029c8:	2940038f 	ldh	r5,14(r5)
 10029cc:	dfc00115 	stw	ra,4(sp)
 10029d0:	1002d840 	call	1002d84 <_read_r>
 10029d4:	1007883a 	mov	r3,r2
 10029d8:	10000816 	blt	r2,zero,10029fc <__sread+0x40>
 10029dc:	80801417 	ldw	r2,80(r16)
 10029e0:	10c5883a 	add	r2,r2,r3
 10029e4:	80801415 	stw	r2,80(r16)
 10029e8:	1805883a 	mov	r2,r3
 10029ec:	dfc00117 	ldw	ra,4(sp)
 10029f0:	dc000017 	ldw	r16,0(sp)
 10029f4:	dec00204 	addi	sp,sp,8
 10029f8:	f800283a 	ret
 10029fc:	8080030b 	ldhu	r2,12(r16)
 1002a00:	10bbffcc 	andi	r2,r2,61439
 1002a04:	8080030d 	sth	r2,12(r16)
 1002a08:	1805883a 	mov	r2,r3
 1002a0c:	dfc00117 	ldw	ra,4(sp)
 1002a10:	dc000017 	ldw	r16,0(sp)
 1002a14:	dec00204 	addi	sp,sp,8
 1002a18:	f800283a 	ret

01002a1c <_write_r>:
 1002a1c:	defffd04 	addi	sp,sp,-12
 1002a20:	dc000015 	stw	r16,0(sp)
 1002a24:	04004074 	movhi	r16,257
 1002a28:	84006204 	addi	r16,r16,392
 1002a2c:	dc400115 	stw	r17,4(sp)
 1002a30:	80000015 	stw	zero,0(r16)
 1002a34:	2023883a 	mov	r17,r4
 1002a38:	2809883a 	mov	r4,r5
 1002a3c:	300b883a 	mov	r5,r6
 1002a40:	380d883a 	mov	r6,r7
 1002a44:	dfc00215 	stw	ra,8(sp)
 1002a48:	10037c00 	call	10037c0 <write>
 1002a4c:	1007883a 	mov	r3,r2
 1002a50:	00bfffc4 	movi	r2,-1
 1002a54:	18800626 	beq	r3,r2,1002a70 <_write_r+0x54>
 1002a58:	1805883a 	mov	r2,r3
 1002a5c:	dfc00217 	ldw	ra,8(sp)
 1002a60:	dc400117 	ldw	r17,4(sp)
 1002a64:	dc000017 	ldw	r16,0(sp)
 1002a68:	dec00304 	addi	sp,sp,12
 1002a6c:	f800283a 	ret
 1002a70:	80800017 	ldw	r2,0(r16)
 1002a74:	103ff826 	beq	r2,zero,1002a58 <_write_r+0x3c>
 1002a78:	88800015 	stw	r2,0(r17)
 1002a7c:	1805883a 	mov	r2,r3
 1002a80:	dfc00217 	ldw	ra,8(sp)
 1002a84:	dc400117 	ldw	r17,4(sp)
 1002a88:	dc000017 	ldw	r16,0(sp)
 1002a8c:	dec00304 	addi	sp,sp,12
 1002a90:	f800283a 	ret

01002a94 <_close_r>:
 1002a94:	defffd04 	addi	sp,sp,-12
 1002a98:	dc000015 	stw	r16,0(sp)
 1002a9c:	04004074 	movhi	r16,257
 1002aa0:	84006204 	addi	r16,r16,392
 1002aa4:	dc400115 	stw	r17,4(sp)
 1002aa8:	80000015 	stw	zero,0(r16)
 1002aac:	2023883a 	mov	r17,r4
 1002ab0:	2809883a 	mov	r4,r5
 1002ab4:	dfc00215 	stw	ra,8(sp)
 1002ab8:	1002e340 	call	1002e34 <close>
 1002abc:	1007883a 	mov	r3,r2
 1002ac0:	00bfffc4 	movi	r2,-1
 1002ac4:	18800626 	beq	r3,r2,1002ae0 <_close_r+0x4c>
 1002ac8:	1805883a 	mov	r2,r3
 1002acc:	dfc00217 	ldw	ra,8(sp)
 1002ad0:	dc400117 	ldw	r17,4(sp)
 1002ad4:	dc000017 	ldw	r16,0(sp)
 1002ad8:	dec00304 	addi	sp,sp,12
 1002adc:	f800283a 	ret
 1002ae0:	80800017 	ldw	r2,0(r16)
 1002ae4:	103ff826 	beq	r2,zero,1002ac8 <_close_r+0x34>
 1002ae8:	88800015 	stw	r2,0(r17)
 1002aec:	1805883a 	mov	r2,r3
 1002af0:	dfc00217 	ldw	ra,8(sp)
 1002af4:	dc400117 	ldw	r17,4(sp)
 1002af8:	dc000017 	ldw	r16,0(sp)
 1002afc:	dec00304 	addi	sp,sp,12
 1002b00:	f800283a 	ret

01002b04 <_fclose_r>:
 1002b04:	defffc04 	addi	sp,sp,-16
 1002b08:	dc400115 	stw	r17,4(sp)
 1002b0c:	dc000015 	stw	r16,0(sp)
 1002b10:	dfc00315 	stw	ra,12(sp)
 1002b14:	dc800215 	stw	r18,8(sp)
 1002b18:	2821883a 	mov	r16,r5
 1002b1c:	2023883a 	mov	r17,r4
 1002b20:	28002926 	beq	r5,zero,1002bc8 <_fclose_r+0xc4>
 1002b24:	1001e480 	call	1001e48 <__sfp_lock_acquire>
 1002b28:	88000226 	beq	r17,zero,1002b34 <_fclose_r+0x30>
 1002b2c:	88800e17 	ldw	r2,56(r17)
 1002b30:	10002d26 	beq	r2,zero,1002be8 <_fclose_r+0xe4>
 1002b34:	8080030f 	ldh	r2,12(r16)
 1002b38:	10002226 	beq	r2,zero,1002bc4 <_fclose_r+0xc0>
 1002b3c:	8809883a 	mov	r4,r17
 1002b40:	800b883a 	mov	r5,r16
 1002b44:	1001bc00 	call	1001bc0 <_fflush_r>
 1002b48:	1025883a 	mov	r18,r2
 1002b4c:	80800b17 	ldw	r2,44(r16)
 1002b50:	10000426 	beq	r2,zero,1002b64 <_fclose_r+0x60>
 1002b54:	81400717 	ldw	r5,28(r16)
 1002b58:	8809883a 	mov	r4,r17
 1002b5c:	103ee83a 	callr	r2
 1002b60:	10002a16 	blt	r2,zero,1002c0c <_fclose_r+0x108>
 1002b64:	8080030b 	ldhu	r2,12(r16)
 1002b68:	1080200c 	andi	r2,r2,128
 1002b6c:	1000231e 	bne	r2,zero,1002bfc <_fclose_r+0xf8>
 1002b70:	81400c17 	ldw	r5,48(r16)
 1002b74:	28000526 	beq	r5,zero,1002b8c <_fclose_r+0x88>
 1002b78:	80801004 	addi	r2,r16,64
 1002b7c:	28800226 	beq	r5,r2,1002b88 <_fclose_r+0x84>
 1002b80:	8809883a 	mov	r4,r17
 1002b84:	10022100 	call	1002210 <_free_r>
 1002b88:	80000c15 	stw	zero,48(r16)
 1002b8c:	81401117 	ldw	r5,68(r16)
 1002b90:	28000326 	beq	r5,zero,1002ba0 <_fclose_r+0x9c>
 1002b94:	8809883a 	mov	r4,r17
 1002b98:	10022100 	call	1002210 <_free_r>
 1002b9c:	80001115 	stw	zero,68(r16)
 1002ba0:	8000030d 	sth	zero,12(r16)
 1002ba4:	1001e4c0 	call	1001e4c <__sfp_lock_release>
 1002ba8:	9005883a 	mov	r2,r18
 1002bac:	dfc00317 	ldw	ra,12(sp)
 1002bb0:	dc800217 	ldw	r18,8(sp)
 1002bb4:	dc400117 	ldw	r17,4(sp)
 1002bb8:	dc000017 	ldw	r16,0(sp)
 1002bbc:	dec00404 	addi	sp,sp,16
 1002bc0:	f800283a 	ret
 1002bc4:	1001e4c0 	call	1001e4c <__sfp_lock_release>
 1002bc8:	0025883a 	mov	r18,zero
 1002bcc:	9005883a 	mov	r2,r18
 1002bd0:	dfc00317 	ldw	ra,12(sp)
 1002bd4:	dc800217 	ldw	r18,8(sp)
 1002bd8:	dc400117 	ldw	r17,4(sp)
 1002bdc:	dc000017 	ldw	r16,0(sp)
 1002be0:	dec00404 	addi	sp,sp,16
 1002be4:	f800283a 	ret
 1002be8:	8809883a 	mov	r4,r17
 1002bec:	1001e580 	call	1001e58 <__sinit>
 1002bf0:	8080030f 	ldh	r2,12(r16)
 1002bf4:	103fd11e 	bne	r2,zero,1002b3c <_fclose_r+0x38>
 1002bf8:	003ff206 	br	1002bc4 <_fclose_r+0xc0>
 1002bfc:	81400417 	ldw	r5,16(r16)
 1002c00:	8809883a 	mov	r4,r17
 1002c04:	10022100 	call	1002210 <_free_r>
 1002c08:	003fd906 	br	1002b70 <_fclose_r+0x6c>
 1002c0c:	04bfffc4 	movi	r18,-1
 1002c10:	003fd406 	br	1002b64 <_fclose_r+0x60>

01002c14 <fclose>:
 1002c14:	00804074 	movhi	r2,257
 1002c18:	10b9a904 	addi	r2,r2,-6492
 1002c1c:	200b883a 	mov	r5,r4
 1002c20:	11000017 	ldw	r4,0(r2)
 1002c24:	1002b041 	jmpi	1002b04 <_fclose_r>

01002c28 <_fstat_r>:
 1002c28:	defffd04 	addi	sp,sp,-12
 1002c2c:	dc000015 	stw	r16,0(sp)
 1002c30:	04004074 	movhi	r16,257
 1002c34:	84006204 	addi	r16,r16,392
 1002c38:	dc400115 	stw	r17,4(sp)
 1002c3c:	80000015 	stw	zero,0(r16)
 1002c40:	2023883a 	mov	r17,r4
 1002c44:	2809883a 	mov	r4,r5
 1002c48:	300b883a 	mov	r5,r6
 1002c4c:	dfc00215 	stw	ra,8(sp)
 1002c50:	1002fc00 	call	1002fc0 <fstat>
 1002c54:	1007883a 	mov	r3,r2
 1002c58:	00bfffc4 	movi	r2,-1
 1002c5c:	18800626 	beq	r3,r2,1002c78 <_fstat_r+0x50>
 1002c60:	1805883a 	mov	r2,r3
 1002c64:	dfc00217 	ldw	ra,8(sp)
 1002c68:	dc400117 	ldw	r17,4(sp)
 1002c6c:	dc000017 	ldw	r16,0(sp)
 1002c70:	dec00304 	addi	sp,sp,12
 1002c74:	f800283a 	ret
 1002c78:	80800017 	ldw	r2,0(r16)
 1002c7c:	103ff826 	beq	r2,zero,1002c60 <_fstat_r+0x38>
 1002c80:	88800015 	stw	r2,0(r17)
 1002c84:	1805883a 	mov	r2,r3
 1002c88:	dfc00217 	ldw	ra,8(sp)
 1002c8c:	dc400117 	ldw	r17,4(sp)
 1002c90:	dc000017 	ldw	r16,0(sp)
 1002c94:	dec00304 	addi	sp,sp,12
 1002c98:	f800283a 	ret

01002c9c <_isatty_r>:
 1002c9c:	defffd04 	addi	sp,sp,-12
 1002ca0:	dc000015 	stw	r16,0(sp)
 1002ca4:	04004074 	movhi	r16,257
 1002ca8:	84006204 	addi	r16,r16,392
 1002cac:	dc400115 	stw	r17,4(sp)
 1002cb0:	80000015 	stw	zero,0(r16)
 1002cb4:	2023883a 	mov	r17,r4
 1002cb8:	2809883a 	mov	r4,r5
 1002cbc:	dfc00215 	stw	ra,8(sp)
 1002cc0:	10030f80 	call	10030f8 <isatty>
 1002cc4:	1007883a 	mov	r3,r2
 1002cc8:	00bfffc4 	movi	r2,-1
 1002ccc:	18800626 	beq	r3,r2,1002ce8 <_isatty_r+0x4c>
 1002cd0:	1805883a 	mov	r2,r3
 1002cd4:	dfc00217 	ldw	ra,8(sp)
 1002cd8:	dc400117 	ldw	r17,4(sp)
 1002cdc:	dc000017 	ldw	r16,0(sp)
 1002ce0:	dec00304 	addi	sp,sp,12
 1002ce4:	f800283a 	ret
 1002ce8:	80800017 	ldw	r2,0(r16)
 1002cec:	103ff826 	beq	r2,zero,1002cd0 <_isatty_r+0x34>
 1002cf0:	88800015 	stw	r2,0(r17)
 1002cf4:	1805883a 	mov	r2,r3
 1002cf8:	dfc00217 	ldw	ra,8(sp)
 1002cfc:	dc400117 	ldw	r17,4(sp)
 1002d00:	dc000017 	ldw	r16,0(sp)
 1002d04:	dec00304 	addi	sp,sp,12
 1002d08:	f800283a 	ret

01002d0c <_lseek_r>:
 1002d0c:	defffd04 	addi	sp,sp,-12
 1002d10:	dc000015 	stw	r16,0(sp)
 1002d14:	04004074 	movhi	r16,257
 1002d18:	84006204 	addi	r16,r16,392
 1002d1c:	dc400115 	stw	r17,4(sp)
 1002d20:	80000015 	stw	zero,0(r16)
 1002d24:	2023883a 	mov	r17,r4
 1002d28:	2809883a 	mov	r4,r5
 1002d2c:	300b883a 	mov	r5,r6
 1002d30:	380d883a 	mov	r6,r7
 1002d34:	dfc00215 	stw	ra,8(sp)
 1002d38:	10033080 	call	1003308 <lseek>
 1002d3c:	1007883a 	mov	r3,r2
 1002d40:	00bfffc4 	movi	r2,-1
 1002d44:	18800626 	beq	r3,r2,1002d60 <_lseek_r+0x54>
 1002d48:	1805883a 	mov	r2,r3
 1002d4c:	dfc00217 	ldw	ra,8(sp)
 1002d50:	dc400117 	ldw	r17,4(sp)
 1002d54:	dc000017 	ldw	r16,0(sp)
 1002d58:	dec00304 	addi	sp,sp,12
 1002d5c:	f800283a 	ret
 1002d60:	80800017 	ldw	r2,0(r16)
 1002d64:	103ff826 	beq	r2,zero,1002d48 <_lseek_r+0x3c>
 1002d68:	88800015 	stw	r2,0(r17)
 1002d6c:	1805883a 	mov	r2,r3
 1002d70:	dfc00217 	ldw	ra,8(sp)
 1002d74:	dc400117 	ldw	r17,4(sp)
 1002d78:	dc000017 	ldw	r16,0(sp)
 1002d7c:	dec00304 	addi	sp,sp,12
 1002d80:	f800283a 	ret

01002d84 <_read_r>:
 1002d84:	defffd04 	addi	sp,sp,-12
 1002d88:	dc000015 	stw	r16,0(sp)
 1002d8c:	04004074 	movhi	r16,257
 1002d90:	84006204 	addi	r16,r16,392
 1002d94:	dc400115 	stw	r17,4(sp)
 1002d98:	80000015 	stw	zero,0(r16)
 1002d9c:	2023883a 	mov	r17,r4
 1002da0:	2809883a 	mov	r4,r5
 1002da4:	300b883a 	mov	r5,r6
 1002da8:	380d883a 	mov	r6,r7
 1002dac:	dfc00215 	stw	ra,8(sp)
 1002db0:	10035080 	call	1003508 <read>
 1002db4:	1007883a 	mov	r3,r2
 1002db8:	00bfffc4 	movi	r2,-1
 1002dbc:	18800626 	beq	r3,r2,1002dd8 <_read_r+0x54>
 1002dc0:	1805883a 	mov	r2,r3
 1002dc4:	dfc00217 	ldw	ra,8(sp)
 1002dc8:	dc400117 	ldw	r17,4(sp)
 1002dcc:	dc000017 	ldw	r16,0(sp)
 1002dd0:	dec00304 	addi	sp,sp,12
 1002dd4:	f800283a 	ret
 1002dd8:	80800017 	ldw	r2,0(r16)
 1002ddc:	103ff826 	beq	r2,zero,1002dc0 <_read_r+0x3c>
 1002de0:	88800015 	stw	r2,0(r17)
 1002de4:	1805883a 	mov	r2,r3
 1002de8:	dfc00217 	ldw	ra,8(sp)
 1002dec:	dc400117 	ldw	r17,4(sp)
 1002df0:	dc000017 	ldw	r16,0(sp)
 1002df4:	dec00304 	addi	sp,sp,12
 1002df8:	f800283a 	ret

01002dfc <__mulsi3>:
 1002dfc:	20000a26 	beq	r4,zero,1002e28 <__mulsi3+0x2c>
 1002e00:	0007883a 	mov	r3,zero
 1002e04:	2080004c 	andi	r2,r4,1
 1002e08:	1005003a 	cmpeq	r2,r2,zero
 1002e0c:	2008d07a 	srli	r4,r4,1
 1002e10:	1000011e 	bne	r2,zero,1002e18 <__mulsi3+0x1c>
 1002e14:	1947883a 	add	r3,r3,r5
 1002e18:	294b883a 	add	r5,r5,r5
 1002e1c:	203ff91e 	bne	r4,zero,1002e04 <__mulsi3+0x8>
 1002e20:	1805883a 	mov	r2,r3
 1002e24:	f800283a 	ret
 1002e28:	0007883a 	mov	r3,zero
 1002e2c:	1805883a 	mov	r2,r3
 1002e30:	f800283a 	ret

01002e34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1002e34:	defff804 	addi	sp,sp,-32
 1002e38:	dfc00715 	stw	ra,28(sp)
 1002e3c:	df000615 	stw	fp,24(sp)
 1002e40:	df000604 	addi	fp,sp,24
 1002e44:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1002e48:	e0bffc17 	ldw	r2,-16(fp)
 1002e4c:	1004803a 	cmplt	r2,r2,zero
 1002e50:	1000091e 	bne	r2,zero,1002e78 <close+0x44>
 1002e54:	e13ffc17 	ldw	r4,-16(fp)
 1002e58:	01400304 	movi	r5,12
 1002e5c:	1002dfc0 	call	1002dfc <__mulsi3>
 1002e60:	1007883a 	mov	r3,r2
 1002e64:	00804074 	movhi	r2,257
 1002e68:	10b51b04 	addi	r2,r2,-11156
 1002e6c:	1887883a 	add	r3,r3,r2
 1002e70:	e0ffff15 	stw	r3,-4(fp)
 1002e74:	00000106 	br	1002e7c <close+0x48>
 1002e78:	e03fff15 	stw	zero,-4(fp)
 1002e7c:	e0bfff17 	ldw	r2,-4(fp)
 1002e80:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1002e84:	e0bffb17 	ldw	r2,-20(fp)
 1002e88:	1005003a 	cmpeq	r2,r2,zero
 1002e8c:	10001d1e 	bne	r2,zero,1002f04 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1002e90:	e0bffb17 	ldw	r2,-20(fp)
 1002e94:	10800017 	ldw	r2,0(r2)
 1002e98:	10800417 	ldw	r2,16(r2)
 1002e9c:	1005003a 	cmpeq	r2,r2,zero
 1002ea0:	1000071e 	bne	r2,zero,1002ec0 <close+0x8c>
 1002ea4:	e0bffb17 	ldw	r2,-20(fp)
 1002ea8:	10800017 	ldw	r2,0(r2)
 1002eac:	10800417 	ldw	r2,16(r2)
 1002eb0:	e13ffb17 	ldw	r4,-20(fp)
 1002eb4:	103ee83a 	callr	r2
 1002eb8:	e0bffe15 	stw	r2,-8(fp)
 1002ebc:	00000106 	br	1002ec4 <close+0x90>
 1002ec0:	e03ffe15 	stw	zero,-8(fp)
 1002ec4:	e0bffe17 	ldw	r2,-8(fp)
 1002ec8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1002ecc:	e13ffc17 	ldw	r4,-16(fp)
 1002ed0:	100368c0 	call	100368c <alt_release_fd>
    if (rval < 0)
 1002ed4:	e0bffa17 	ldw	r2,-24(fp)
 1002ed8:	1004403a 	cmpge	r2,r2,zero
 1002edc:	1000071e 	bne	r2,zero,1002efc <close+0xc8>
    {
      ALT_ERRNO = -rval;
 1002ee0:	1002f340 	call	1002f34 <alt_get_errno>
 1002ee4:	e0fffa17 	ldw	r3,-24(fp)
 1002ee8:	00c7c83a 	sub	r3,zero,r3
 1002eec:	10c00015 	stw	r3,0(r2)
      return -1;
 1002ef0:	00bfffc4 	movi	r2,-1
 1002ef4:	e0bffd15 	stw	r2,-12(fp)
 1002ef8:	00000806 	br	1002f1c <close+0xe8>
    }
    return 0;
 1002efc:	e03ffd15 	stw	zero,-12(fp)
 1002f00:	00000606 	br	1002f1c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002f04:	1002f340 	call	1002f34 <alt_get_errno>
 1002f08:	1007883a 	mov	r3,r2
 1002f0c:	00801444 	movi	r2,81
 1002f10:	18800015 	stw	r2,0(r3)
    return -1;
 1002f14:	00bfffc4 	movi	r2,-1
 1002f18:	e0bffd15 	stw	r2,-12(fp)
 1002f1c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1002f20:	e037883a 	mov	sp,fp
 1002f24:	dfc00117 	ldw	ra,4(sp)
 1002f28:	df000017 	ldw	fp,0(sp)
 1002f2c:	dec00204 	addi	sp,sp,8
 1002f30:	f800283a 	ret

01002f34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002f34:	defffd04 	addi	sp,sp,-12
 1002f38:	dfc00215 	stw	ra,8(sp)
 1002f3c:	df000115 	stw	fp,4(sp)
 1002f40:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002f44:	00804074 	movhi	r2,257
 1002f48:	10b9b204 	addi	r2,r2,-6456
 1002f4c:	10800017 	ldw	r2,0(r2)
 1002f50:	1005003a 	cmpeq	r2,r2,zero
 1002f54:	1000061e 	bne	r2,zero,1002f70 <alt_get_errno+0x3c>
 1002f58:	00804074 	movhi	r2,257
 1002f5c:	10b9b204 	addi	r2,r2,-6456
 1002f60:	10800017 	ldw	r2,0(r2)
 1002f64:	103ee83a 	callr	r2
 1002f68:	e0bfff15 	stw	r2,-4(fp)
 1002f6c:	00000306 	br	1002f7c <alt_get_errno+0x48>
 1002f70:	00804074 	movhi	r2,257
 1002f74:	10806204 	addi	r2,r2,392
 1002f78:	e0bfff15 	stw	r2,-4(fp)
 1002f7c:	e0bfff17 	ldw	r2,-4(fp)
}
 1002f80:	e037883a 	mov	sp,fp
 1002f84:	dfc00117 	ldw	ra,4(sp)
 1002f88:	df000017 	ldw	fp,0(sp)
 1002f8c:	dec00204 	addi	sp,sp,8
 1002f90:	f800283a 	ret

01002f94 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1002f94:	defffc04 	addi	sp,sp,-16
 1002f98:	df000315 	stw	fp,12(sp)
 1002f9c:	df000304 	addi	fp,sp,12
 1002fa0:	e13ffd15 	stw	r4,-12(fp)
 1002fa4:	e17ffe15 	stw	r5,-8(fp)
 1002fa8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1002fac:	e0bfff17 	ldw	r2,-4(fp)
}
 1002fb0:	e037883a 	mov	sp,fp
 1002fb4:	df000017 	ldw	fp,0(sp)
 1002fb8:	dec00104 	addi	sp,sp,4
 1002fbc:	f800283a 	ret

01002fc0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1002fc0:	defff904 	addi	sp,sp,-28
 1002fc4:	dfc00615 	stw	ra,24(sp)
 1002fc8:	df000515 	stw	fp,20(sp)
 1002fcc:	df000504 	addi	fp,sp,20
 1002fd0:	e13ffc15 	stw	r4,-16(fp)
 1002fd4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002fd8:	e0bffc17 	ldw	r2,-16(fp)
 1002fdc:	1004803a 	cmplt	r2,r2,zero
 1002fe0:	1000091e 	bne	r2,zero,1003008 <fstat+0x48>
 1002fe4:	e13ffc17 	ldw	r4,-16(fp)
 1002fe8:	01400304 	movi	r5,12
 1002fec:	1002dfc0 	call	1002dfc <__mulsi3>
 1002ff0:	1007883a 	mov	r3,r2
 1002ff4:	00804074 	movhi	r2,257
 1002ff8:	10b51b04 	addi	r2,r2,-11156
 1002ffc:	1887883a 	add	r3,r3,r2
 1003000:	e0ffff15 	stw	r3,-4(fp)
 1003004:	00000106 	br	100300c <fstat+0x4c>
 1003008:	e03fff15 	stw	zero,-4(fp)
 100300c:	e0bfff17 	ldw	r2,-4(fp)
 1003010:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1003014:	e0bffb17 	ldw	r2,-20(fp)
 1003018:	1005003a 	cmpeq	r2,r2,zero
 100301c:	1000121e 	bne	r2,zero,1003068 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1003020:	e0bffb17 	ldw	r2,-20(fp)
 1003024:	10800017 	ldw	r2,0(r2)
 1003028:	10800817 	ldw	r2,32(r2)
 100302c:	1005003a 	cmpeq	r2,r2,zero
 1003030:	1000081e 	bne	r2,zero,1003054 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 1003034:	e0bffb17 	ldw	r2,-20(fp)
 1003038:	10800017 	ldw	r2,0(r2)
 100303c:	10800817 	ldw	r2,32(r2)
 1003040:	e13ffb17 	ldw	r4,-20(fp)
 1003044:	e17ffd17 	ldw	r5,-12(fp)
 1003048:	103ee83a 	callr	r2
 100304c:	e0bffe15 	stw	r2,-8(fp)
 1003050:	00000b06 	br	1003080 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1003054:	e0fffd17 	ldw	r3,-12(fp)
 1003058:	00880004 	movi	r2,8192
 100305c:	18800115 	stw	r2,4(r3)
      return 0;
 1003060:	e03ffe15 	stw	zero,-8(fp)
 1003064:	00000606 	br	1003080 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1003068:	10030980 	call	1003098 <alt_get_errno>
 100306c:	1007883a 	mov	r3,r2
 1003070:	00801444 	movi	r2,81
 1003074:	18800015 	stw	r2,0(r3)
    return -1;
 1003078:	00bfffc4 	movi	r2,-1
 100307c:	e0bffe15 	stw	r2,-8(fp)
 1003080:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1003084:	e037883a 	mov	sp,fp
 1003088:	dfc00117 	ldw	ra,4(sp)
 100308c:	df000017 	ldw	fp,0(sp)
 1003090:	dec00204 	addi	sp,sp,8
 1003094:	f800283a 	ret

01003098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003098:	defffd04 	addi	sp,sp,-12
 100309c:	dfc00215 	stw	ra,8(sp)
 10030a0:	df000115 	stw	fp,4(sp)
 10030a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10030a8:	00804074 	movhi	r2,257
 10030ac:	10b9b204 	addi	r2,r2,-6456
 10030b0:	10800017 	ldw	r2,0(r2)
 10030b4:	1005003a 	cmpeq	r2,r2,zero
 10030b8:	1000061e 	bne	r2,zero,10030d4 <alt_get_errno+0x3c>
 10030bc:	00804074 	movhi	r2,257
 10030c0:	10b9b204 	addi	r2,r2,-6456
 10030c4:	10800017 	ldw	r2,0(r2)
 10030c8:	103ee83a 	callr	r2
 10030cc:	e0bfff15 	stw	r2,-4(fp)
 10030d0:	00000306 	br	10030e0 <alt_get_errno+0x48>
 10030d4:	00804074 	movhi	r2,257
 10030d8:	10806204 	addi	r2,r2,392
 10030dc:	e0bfff15 	stw	r2,-4(fp)
 10030e0:	e0bfff17 	ldw	r2,-4(fp)
}
 10030e4:	e037883a 	mov	sp,fp
 10030e8:	dfc00117 	ldw	ra,4(sp)
 10030ec:	df000017 	ldw	fp,0(sp)
 10030f0:	dec00204 	addi	sp,sp,8
 10030f4:	f800283a 	ret

010030f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 10030f8:	deffeb04 	addi	sp,sp,-84
 10030fc:	dfc01415 	stw	ra,80(sp)
 1003100:	df001315 	stw	fp,76(sp)
 1003104:	df001304 	addi	fp,sp,76
 1003108:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100310c:	e0bffd17 	ldw	r2,-12(fp)
 1003110:	1004803a 	cmplt	r2,r2,zero
 1003114:	1000091e 	bne	r2,zero,100313c <isatty+0x44>
 1003118:	e13ffd17 	ldw	r4,-12(fp)
 100311c:	01400304 	movi	r5,12
 1003120:	1002dfc0 	call	1002dfc <__mulsi3>
 1003124:	1007883a 	mov	r3,r2
 1003128:	00804074 	movhi	r2,257
 100312c:	10b51b04 	addi	r2,r2,-11156
 1003130:	1887883a 	add	r3,r3,r2
 1003134:	e0ffff15 	stw	r3,-4(fp)
 1003138:	00000106 	br	1003140 <isatty+0x48>
 100313c:	e03fff15 	stw	zero,-4(fp)
 1003140:	e0bfff17 	ldw	r2,-4(fp)
 1003144:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1003148:	e0bfed17 	ldw	r2,-76(fp)
 100314c:	1005003a 	cmpeq	r2,r2,zero
 1003150:	10000f1e 	bne	r2,zero,1003190 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1003154:	e0bfed17 	ldw	r2,-76(fp)
 1003158:	10800017 	ldw	r2,0(r2)
 100315c:	10800817 	ldw	r2,32(r2)
 1003160:	1004c03a 	cmpne	r2,r2,zero
 1003164:	1000031e 	bne	r2,zero,1003174 <isatty+0x7c>
    {
      return 1;
 1003168:	00800044 	movi	r2,1
 100316c:	e0bffe15 	stw	r2,-8(fp)
 1003170:	00000c06 	br	10031a4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1003174:	e17fee04 	addi	r5,fp,-72
 1003178:	e13ffd17 	ldw	r4,-12(fp)
 100317c:	1002fc00 	call	1002fc0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1003180:	e0bfef17 	ldw	r2,-68(fp)
 1003184:	10880020 	cmpeqi	r2,r2,8192
 1003188:	e0bffe15 	stw	r2,-8(fp)
 100318c:	00000506 	br	10031a4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1003190:	10031bc0 	call	10031bc <alt_get_errno>
 1003194:	1007883a 	mov	r3,r2
 1003198:	00801444 	movi	r2,81
 100319c:	18800015 	stw	r2,0(r3)
    return 0;
 10031a0:	e03ffe15 	stw	zero,-8(fp)
 10031a4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 10031a8:	e037883a 	mov	sp,fp
 10031ac:	dfc00117 	ldw	ra,4(sp)
 10031b0:	df000017 	ldw	fp,0(sp)
 10031b4:	dec00204 	addi	sp,sp,8
 10031b8:	f800283a 	ret

010031bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10031bc:	defffd04 	addi	sp,sp,-12
 10031c0:	dfc00215 	stw	ra,8(sp)
 10031c4:	df000115 	stw	fp,4(sp)
 10031c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10031cc:	00804074 	movhi	r2,257
 10031d0:	10b9b204 	addi	r2,r2,-6456
 10031d4:	10800017 	ldw	r2,0(r2)
 10031d8:	1005003a 	cmpeq	r2,r2,zero
 10031dc:	1000061e 	bne	r2,zero,10031f8 <alt_get_errno+0x3c>
 10031e0:	00804074 	movhi	r2,257
 10031e4:	10b9b204 	addi	r2,r2,-6456
 10031e8:	10800017 	ldw	r2,0(r2)
 10031ec:	103ee83a 	callr	r2
 10031f0:	e0bfff15 	stw	r2,-4(fp)
 10031f4:	00000306 	br	1003204 <alt_get_errno+0x48>
 10031f8:	00804074 	movhi	r2,257
 10031fc:	10806204 	addi	r2,r2,392
 1003200:	e0bfff15 	stw	r2,-4(fp)
 1003204:	e0bfff17 	ldw	r2,-4(fp)
}
 1003208:	e037883a 	mov	sp,fp
 100320c:	dfc00117 	ldw	ra,4(sp)
 1003210:	df000017 	ldw	fp,0(sp)
 1003214:	dec00204 	addi	sp,sp,8
 1003218:	f800283a 	ret

0100321c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100321c:	defffe04 	addi	sp,sp,-8
 1003220:	dfc00115 	stw	ra,4(sp)
 1003224:	df000015 	stw	fp,0(sp)
 1003228:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100322c:	01004074 	movhi	r4,257
 1003230:	2139b704 	addi	r4,r4,-6436
 1003234:	01404074 	movhi	r5,257
 1003238:	29730f04 	addi	r5,r5,-13252
 100323c:	01804074 	movhi	r6,257
 1003240:	31b9b704 	addi	r6,r6,-6436
 1003244:	100329c0 	call	100329c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1003248:	01004034 	movhi	r4,256
 100324c:	21000804 	addi	r4,r4,32
 1003250:	01404034 	movhi	r5,256
 1003254:	29400804 	addi	r5,r5,32
 1003258:	01804034 	movhi	r6,256
 100325c:	31806d04 	addi	r6,r6,436
 1003260:	100329c0 	call	100329c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1003264:	01004074 	movhi	r4,257
 1003268:	21321204 	addi	r4,r4,-14264
 100326c:	01404074 	movhi	r5,257
 1003270:	29721204 	addi	r5,r5,-14264
 1003274:	01804074 	movhi	r6,257
 1003278:	31b30f04 	addi	r6,r6,-13252
 100327c:	100329c0 	call	100329c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1003280:	10091640 	call	1009164 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1003284:	10093f00 	call	10093f0 <alt_icache_flush_all>
}
 1003288:	e037883a 	mov	sp,fp
 100328c:	dfc00117 	ldw	ra,4(sp)
 1003290:	df000017 	ldw	fp,0(sp)
 1003294:	dec00204 	addi	sp,sp,8
 1003298:	f800283a 	ret

0100329c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100329c:	defffc04 	addi	sp,sp,-16
 10032a0:	df000315 	stw	fp,12(sp)
 10032a4:	df000304 	addi	fp,sp,12
 10032a8:	e13ffd15 	stw	r4,-12(fp)
 10032ac:	e17ffe15 	stw	r5,-8(fp)
 10032b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10032b4:	e0fffe17 	ldw	r3,-8(fp)
 10032b8:	e0bffd17 	ldw	r2,-12(fp)
 10032bc:	18800e26 	beq	r3,r2,10032f8 <alt_load_section+0x5c>
  {
    while( to != end )
 10032c0:	00000a06 	br	10032ec <alt_load_section+0x50>
    {
      *to++ = *from++;
 10032c4:	e0bffd17 	ldw	r2,-12(fp)
 10032c8:	10c00017 	ldw	r3,0(r2)
 10032cc:	e0bffe17 	ldw	r2,-8(fp)
 10032d0:	10c00015 	stw	r3,0(r2)
 10032d4:	e0bffe17 	ldw	r2,-8(fp)
 10032d8:	10800104 	addi	r2,r2,4
 10032dc:	e0bffe15 	stw	r2,-8(fp)
 10032e0:	e0bffd17 	ldw	r2,-12(fp)
 10032e4:	10800104 	addi	r2,r2,4
 10032e8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 10032ec:	e0fffe17 	ldw	r3,-8(fp)
 10032f0:	e0bfff17 	ldw	r2,-4(fp)
 10032f4:	18bff31e 	bne	r3,r2,10032c4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 10032f8:	e037883a 	mov	sp,fp
 10032fc:	df000017 	ldw	fp,0(sp)
 1003300:	dec00104 	addi	sp,sp,4
 1003304:	f800283a 	ret

01003308 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1003308:	defff804 	addi	sp,sp,-32
 100330c:	dfc00715 	stw	ra,28(sp)
 1003310:	df000615 	stw	fp,24(sp)
 1003314:	df000604 	addi	fp,sp,24
 1003318:	e13ffc15 	stw	r4,-16(fp)
 100331c:	e17ffd15 	stw	r5,-12(fp)
 1003320:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1003324:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003328:	e0bffc17 	ldw	r2,-16(fp)
 100332c:	1004803a 	cmplt	r2,r2,zero
 1003330:	1000091e 	bne	r2,zero,1003358 <lseek+0x50>
 1003334:	e13ffc17 	ldw	r4,-16(fp)
 1003338:	01400304 	movi	r5,12
 100333c:	1002dfc0 	call	1002dfc <__mulsi3>
 1003340:	1007883a 	mov	r3,r2
 1003344:	00804074 	movhi	r2,257
 1003348:	10b51b04 	addi	r2,r2,-11156
 100334c:	1887883a 	add	r3,r3,r2
 1003350:	e0ffff15 	stw	r3,-4(fp)
 1003354:	00000106 	br	100335c <lseek+0x54>
 1003358:	e03fff15 	stw	zero,-4(fp)
 100335c:	e0bfff17 	ldw	r2,-4(fp)
 1003360:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1003364:	e0bffb17 	ldw	r2,-20(fp)
 1003368:	1005003a 	cmpeq	r2,r2,zero
 100336c:	1000111e 	bne	r2,zero,10033b4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1003370:	e0bffb17 	ldw	r2,-20(fp)
 1003374:	10800017 	ldw	r2,0(r2)
 1003378:	10800717 	ldw	r2,28(r2)
 100337c:	1005003a 	cmpeq	r2,r2,zero
 1003380:	1000091e 	bne	r2,zero,10033a8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1003384:	e0bffb17 	ldw	r2,-20(fp)
 1003388:	10800017 	ldw	r2,0(r2)
 100338c:	10800717 	ldw	r2,28(r2)
 1003390:	e13ffb17 	ldw	r4,-20(fp)
 1003394:	e17ffd17 	ldw	r5,-12(fp)
 1003398:	e1bffe17 	ldw	r6,-8(fp)
 100339c:	103ee83a 	callr	r2
 10033a0:	e0bffa15 	stw	r2,-24(fp)
 10033a4:	00000506 	br	10033bc <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 10033a8:	00bfde84 	movi	r2,-134
 10033ac:	e0bffa15 	stw	r2,-24(fp)
 10033b0:	00000206 	br	10033bc <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 10033b4:	00bfebc4 	movi	r2,-81
 10033b8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 10033bc:	e0bffa17 	ldw	r2,-24(fp)
 10033c0:	1004403a 	cmpge	r2,r2,zero
 10033c4:	1000071e 	bne	r2,zero,10033e4 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 10033c8:	10033fc0 	call	10033fc <alt_get_errno>
 10033cc:	1007883a 	mov	r3,r2
 10033d0:	e0bffa17 	ldw	r2,-24(fp)
 10033d4:	0085c83a 	sub	r2,zero,r2
 10033d8:	18800015 	stw	r2,0(r3)
    rc = -1;
 10033dc:	00bfffc4 	movi	r2,-1
 10033e0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 10033e4:	e0bffa17 	ldw	r2,-24(fp)
}
 10033e8:	e037883a 	mov	sp,fp
 10033ec:	dfc00117 	ldw	ra,4(sp)
 10033f0:	df000017 	ldw	fp,0(sp)
 10033f4:	dec00204 	addi	sp,sp,8
 10033f8:	f800283a 	ret

010033fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10033fc:	defffd04 	addi	sp,sp,-12
 1003400:	dfc00215 	stw	ra,8(sp)
 1003404:	df000115 	stw	fp,4(sp)
 1003408:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100340c:	00804074 	movhi	r2,257
 1003410:	10b9b204 	addi	r2,r2,-6456
 1003414:	10800017 	ldw	r2,0(r2)
 1003418:	1005003a 	cmpeq	r2,r2,zero
 100341c:	1000061e 	bne	r2,zero,1003438 <alt_get_errno+0x3c>
 1003420:	00804074 	movhi	r2,257
 1003424:	10b9b204 	addi	r2,r2,-6456
 1003428:	10800017 	ldw	r2,0(r2)
 100342c:	103ee83a 	callr	r2
 1003430:	e0bfff15 	stw	r2,-4(fp)
 1003434:	00000306 	br	1003444 <alt_get_errno+0x48>
 1003438:	00804074 	movhi	r2,257
 100343c:	10806204 	addi	r2,r2,392
 1003440:	e0bfff15 	stw	r2,-4(fp)
 1003444:	e0bfff17 	ldw	r2,-4(fp)
}
 1003448:	e037883a 	mov	sp,fp
 100344c:	dfc00117 	ldw	ra,4(sp)
 1003450:	df000017 	ldw	fp,0(sp)
 1003454:	dec00204 	addi	sp,sp,8
 1003458:	f800283a 	ret

0100345c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100345c:	defffd04 	addi	sp,sp,-12
 1003460:	dfc00215 	stw	ra,8(sp)
 1003464:	df000115 	stw	fp,4(sp)
 1003468:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100346c:	0009883a 	mov	r4,zero
 1003470:	10039440 	call	1003944 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1003474:	10039780 	call	1003978 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1003478:	01004074 	movhi	r4,257
 100347c:	21327104 	addi	r4,r4,-13884
 1003480:	01404074 	movhi	r5,257
 1003484:	29727104 	addi	r5,r5,-13884
 1003488:	01804074 	movhi	r6,257
 100348c:	31b27104 	addi	r6,r6,-13884
 1003490:	10097b00 	call	10097b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1003494:	10092940 	call	1009294 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1003498:	01004074 	movhi	r4,257
 100349c:	2124be04 	addi	r4,r4,-27912
 10034a0:	1009f380 	call	1009f38 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 10034a4:	d126ba17 	ldw	r4,-25880(gp)
 10034a8:	d166bb17 	ldw	r5,-25876(gp)
 10034ac:	d1a6bc17 	ldw	r6,-25872(gp)
 10034b0:	10003b40 	call	10003b4 <main>
 10034b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 10034b8:	01000044 	movi	r4,1
 10034bc:	1002e340 	call	1002e34 <close>
  exit (result);
 10034c0:	e13fff17 	ldw	r4,-4(fp)
 10034c4:	1009f4c0 	call	1009f4c <exit>

010034c8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 10034c8:	defffe04 	addi	sp,sp,-8
 10034cc:	df000115 	stw	fp,4(sp)
 10034d0:	df000104 	addi	fp,sp,4
 10034d4:	e13fff15 	stw	r4,-4(fp)
}
 10034d8:	e037883a 	mov	sp,fp
 10034dc:	df000017 	ldw	fp,0(sp)
 10034e0:	dec00104 	addi	sp,sp,4
 10034e4:	f800283a 	ret

010034e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 10034e8:	defffe04 	addi	sp,sp,-8
 10034ec:	df000115 	stw	fp,4(sp)
 10034f0:	df000104 	addi	fp,sp,4
 10034f4:	e13fff15 	stw	r4,-4(fp)
}
 10034f8:	e037883a 	mov	sp,fp
 10034fc:	df000017 	ldw	fp,0(sp)
 1003500:	dec00104 	addi	sp,sp,4
 1003504:	f800283a 	ret

01003508 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1003508:	defff704 	addi	sp,sp,-36
 100350c:	dfc00815 	stw	ra,32(sp)
 1003510:	df000715 	stw	fp,28(sp)
 1003514:	df000704 	addi	fp,sp,28
 1003518:	e13ffb15 	stw	r4,-20(fp)
 100351c:	e17ffc15 	stw	r5,-16(fp)
 1003520:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003524:	e0bffb17 	ldw	r2,-20(fp)
 1003528:	1004803a 	cmplt	r2,r2,zero
 100352c:	1000091e 	bne	r2,zero,1003554 <read+0x4c>
 1003530:	e13ffb17 	ldw	r4,-20(fp)
 1003534:	01400304 	movi	r5,12
 1003538:	1002dfc0 	call	1002dfc <__mulsi3>
 100353c:	1007883a 	mov	r3,r2
 1003540:	00804074 	movhi	r2,257
 1003544:	10b51b04 	addi	r2,r2,-11156
 1003548:	1887883a 	add	r3,r3,r2
 100354c:	e0ffff15 	stw	r3,-4(fp)
 1003550:	00000106 	br	1003558 <read+0x50>
 1003554:	e03fff15 	stw	zero,-4(fp)
 1003558:	e0bfff17 	ldw	r2,-4(fp)
 100355c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1003560:	e0bffa17 	ldw	r2,-24(fp)
 1003564:	1005003a 	cmpeq	r2,r2,zero
 1003568:	1000241e 	bne	r2,zero,10035fc <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100356c:	e0bffa17 	ldw	r2,-24(fp)
 1003570:	10800217 	ldw	r2,8(r2)
 1003574:	108000cc 	andi	r2,r2,3
 1003578:	10800060 	cmpeqi	r2,r2,1
 100357c:	10001a1e 	bne	r2,zero,10035e8 <read+0xe0>
 1003580:	e0bffa17 	ldw	r2,-24(fp)
 1003584:	10800017 	ldw	r2,0(r2)
 1003588:	10800517 	ldw	r2,20(r2)
 100358c:	1005003a 	cmpeq	r2,r2,zero
 1003590:	1000151e 	bne	r2,zero,10035e8 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1003594:	e0bffa17 	ldw	r2,-24(fp)
 1003598:	10800017 	ldw	r2,0(r2)
 100359c:	10800517 	ldw	r2,20(r2)
 10035a0:	e17ffc17 	ldw	r5,-16(fp)
 10035a4:	e1bffd17 	ldw	r6,-12(fp)
 10035a8:	e13ffa17 	ldw	r4,-24(fp)
 10035ac:	103ee83a 	callr	r2
 10035b0:	e0bff915 	stw	r2,-28(fp)
 10035b4:	e0bff917 	ldw	r2,-28(fp)
 10035b8:	1004403a 	cmpge	r2,r2,zero
 10035bc:	1000071e 	bne	r2,zero,10035dc <read+0xd4>
        {
          ALT_ERRNO = -rval;
 10035c0:	100362c0 	call	100362c <alt_get_errno>
 10035c4:	e0fff917 	ldw	r3,-28(fp)
 10035c8:	00c7c83a 	sub	r3,zero,r3
 10035cc:	10c00015 	stw	r3,0(r2)
          return -1;
 10035d0:	00bfffc4 	movi	r2,-1
 10035d4:	e0bffe15 	stw	r2,-8(fp)
 10035d8:	00000e06 	br	1003614 <read+0x10c>
        }
        return rval;
 10035dc:	e0bff917 	ldw	r2,-28(fp)
 10035e0:	e0bffe15 	stw	r2,-8(fp)
 10035e4:	00000b06 	br	1003614 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 10035e8:	100362c0 	call	100362c <alt_get_errno>
 10035ec:	1007883a 	mov	r3,r2
 10035f0:	00800344 	movi	r2,13
 10035f4:	18800015 	stw	r2,0(r3)
 10035f8:	00000406 	br	100360c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 10035fc:	100362c0 	call	100362c <alt_get_errno>
 1003600:	1007883a 	mov	r3,r2
 1003604:	00801444 	movi	r2,81
 1003608:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100360c:	00bfffc4 	movi	r2,-1
 1003610:	e0bffe15 	stw	r2,-8(fp)
 1003614:	e0bffe17 	ldw	r2,-8(fp)
}
 1003618:	e037883a 	mov	sp,fp
 100361c:	dfc00117 	ldw	ra,4(sp)
 1003620:	df000017 	ldw	fp,0(sp)
 1003624:	dec00204 	addi	sp,sp,8
 1003628:	f800283a 	ret

0100362c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100362c:	defffd04 	addi	sp,sp,-12
 1003630:	dfc00215 	stw	ra,8(sp)
 1003634:	df000115 	stw	fp,4(sp)
 1003638:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100363c:	00804074 	movhi	r2,257
 1003640:	10b9b204 	addi	r2,r2,-6456
 1003644:	10800017 	ldw	r2,0(r2)
 1003648:	1005003a 	cmpeq	r2,r2,zero
 100364c:	1000061e 	bne	r2,zero,1003668 <alt_get_errno+0x3c>
 1003650:	00804074 	movhi	r2,257
 1003654:	10b9b204 	addi	r2,r2,-6456
 1003658:	10800017 	ldw	r2,0(r2)
 100365c:	103ee83a 	callr	r2
 1003660:	e0bfff15 	stw	r2,-4(fp)
 1003664:	00000306 	br	1003674 <alt_get_errno+0x48>
 1003668:	00804074 	movhi	r2,257
 100366c:	10806204 	addi	r2,r2,392
 1003670:	e0bfff15 	stw	r2,-4(fp)
 1003674:	e0bfff17 	ldw	r2,-4(fp)
}
 1003678:	e037883a 	mov	sp,fp
 100367c:	dfc00117 	ldw	ra,4(sp)
 1003680:	df000017 	ldw	fp,0(sp)
 1003684:	dec00204 	addi	sp,sp,8
 1003688:	f800283a 	ret

0100368c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100368c:	defffc04 	addi	sp,sp,-16
 1003690:	dfc00315 	stw	ra,12(sp)
 1003694:	df000215 	stw	fp,8(sp)
 1003698:	dc000115 	stw	r16,4(sp)
 100369c:	df000104 	addi	fp,sp,4
 10036a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 10036a4:	e0bfff17 	ldw	r2,-4(fp)
 10036a8:	108000d0 	cmplti	r2,r2,3
 10036ac:	10000f1e 	bne	r2,zero,10036ec <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 10036b0:	e13fff17 	ldw	r4,-4(fp)
 10036b4:	04004074 	movhi	r16,257
 10036b8:	84351b04 	addi	r16,r16,-11156
 10036bc:	01400304 	movi	r5,12
 10036c0:	1002dfc0 	call	1002dfc <__mulsi3>
 10036c4:	1405883a 	add	r2,r2,r16
 10036c8:	10800204 	addi	r2,r2,8
 10036cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10036d0:	e13fff17 	ldw	r4,-4(fp)
 10036d4:	04004074 	movhi	r16,257
 10036d8:	84351b04 	addi	r16,r16,-11156
 10036dc:	01400304 	movi	r5,12
 10036e0:	1002dfc0 	call	1002dfc <__mulsi3>
 10036e4:	1405883a 	add	r2,r2,r16
 10036e8:	10000015 	stw	zero,0(r2)
  }
}
 10036ec:	e037883a 	mov	sp,fp
 10036f0:	dfc00217 	ldw	ra,8(sp)
 10036f4:	df000117 	ldw	fp,4(sp)
 10036f8:	dc000017 	ldw	r16,0(sp)
 10036fc:	dec00304 	addi	sp,sp,12
 1003700:	f800283a 	ret

01003704 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1003704:	defff804 	addi	sp,sp,-32
 1003708:	df000715 	stw	fp,28(sp)
 100370c:	df000704 	addi	fp,sp,28
 1003710:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003714:	0005303a 	rdctl	r2,status
 1003718:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100371c:	e0fffb17 	ldw	r3,-20(fp)
 1003720:	00bfff84 	movi	r2,-2
 1003724:	1884703a 	and	r2,r3,r2
 1003728:	1001703a 	wrctl	status,r2
  
  return context;
 100372c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1003730:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1003734:	d0a00a17 	ldw	r2,-32728(gp)
 1003738:	10c000c4 	addi	r3,r2,3
 100373c:	00bfff04 	movi	r2,-4
 1003740:	1884703a 	and	r2,r3,r2
 1003744:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1003748:	d0e00a17 	ldw	r3,-32728(gp)
 100374c:	e0bffe17 	ldw	r2,-8(fp)
 1003750:	1887883a 	add	r3,r3,r2
 1003754:	00806034 	movhi	r2,384
 1003758:	10800004 	addi	r2,r2,0
 100375c:	10c0072e 	bgeu	r2,r3,100377c <sbrk+0x78>
 1003760:	e0bffd17 	ldw	r2,-12(fp)
 1003764:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003768:	e0bffa17 	ldw	r2,-24(fp)
 100376c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1003770:	00bfffc4 	movi	r2,-1
 1003774:	e0bfff15 	stw	r2,-4(fp)
 1003778:	00000c06 	br	10037ac <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100377c:	d0a00a17 	ldw	r2,-32728(gp)
 1003780:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 1003784:	d0e00a17 	ldw	r3,-32728(gp)
 1003788:	e0bffe17 	ldw	r2,-8(fp)
 100378c:	1885883a 	add	r2,r3,r2
 1003790:	d0a00a15 	stw	r2,-32728(gp)
 1003794:	e0bffd17 	ldw	r2,-12(fp)
 1003798:	e0bff915 	stw	r2,-28(fp)
 100379c:	e0bff917 	ldw	r2,-28(fp)
 10037a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 10037a4:	e0bffc17 	ldw	r2,-16(fp)
 10037a8:	e0bfff15 	stw	r2,-4(fp)
 10037ac:	e0bfff17 	ldw	r2,-4(fp)
} 
 10037b0:	e037883a 	mov	sp,fp
 10037b4:	df000017 	ldw	fp,0(sp)
 10037b8:	dec00104 	addi	sp,sp,4
 10037bc:	f800283a 	ret

010037c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10037c0:	defff704 	addi	sp,sp,-36
 10037c4:	dfc00815 	stw	ra,32(sp)
 10037c8:	df000715 	stw	fp,28(sp)
 10037cc:	df000704 	addi	fp,sp,28
 10037d0:	e13ffb15 	stw	r4,-20(fp)
 10037d4:	e17ffc15 	stw	r5,-16(fp)
 10037d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10037dc:	e0bffb17 	ldw	r2,-20(fp)
 10037e0:	1004803a 	cmplt	r2,r2,zero
 10037e4:	1000091e 	bne	r2,zero,100380c <write+0x4c>
 10037e8:	e13ffb17 	ldw	r4,-20(fp)
 10037ec:	01400304 	movi	r5,12
 10037f0:	1002dfc0 	call	1002dfc <__mulsi3>
 10037f4:	1007883a 	mov	r3,r2
 10037f8:	00804074 	movhi	r2,257
 10037fc:	10b51b04 	addi	r2,r2,-11156
 1003800:	1887883a 	add	r3,r3,r2
 1003804:	e0ffff15 	stw	r3,-4(fp)
 1003808:	00000106 	br	1003810 <write+0x50>
 100380c:	e03fff15 	stw	zero,-4(fp)
 1003810:	e0bfff17 	ldw	r2,-4(fp)
 1003814:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1003818:	e0bffa17 	ldw	r2,-24(fp)
 100381c:	1005003a 	cmpeq	r2,r2,zero
 1003820:	1000241e 	bne	r2,zero,10038b4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1003824:	e0bffa17 	ldw	r2,-24(fp)
 1003828:	10800217 	ldw	r2,8(r2)
 100382c:	108000cc 	andi	r2,r2,3
 1003830:	1005003a 	cmpeq	r2,r2,zero
 1003834:	10001a1e 	bne	r2,zero,10038a0 <write+0xe0>
 1003838:	e0bffa17 	ldw	r2,-24(fp)
 100383c:	10800017 	ldw	r2,0(r2)
 1003840:	10800617 	ldw	r2,24(r2)
 1003844:	1005003a 	cmpeq	r2,r2,zero
 1003848:	1000151e 	bne	r2,zero,10038a0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100384c:	e0bffa17 	ldw	r2,-24(fp)
 1003850:	10800017 	ldw	r2,0(r2)
 1003854:	10800617 	ldw	r2,24(r2)
 1003858:	e17ffc17 	ldw	r5,-16(fp)
 100385c:	e1bffd17 	ldw	r6,-12(fp)
 1003860:	e13ffa17 	ldw	r4,-24(fp)
 1003864:	103ee83a 	callr	r2
 1003868:	e0bff915 	stw	r2,-28(fp)
 100386c:	e0bff917 	ldw	r2,-28(fp)
 1003870:	1004403a 	cmpge	r2,r2,zero
 1003874:	1000071e 	bne	r2,zero,1003894 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 1003878:	10038e40 	call	10038e4 <alt_get_errno>
 100387c:	e0fff917 	ldw	r3,-28(fp)
 1003880:	00c7c83a 	sub	r3,zero,r3
 1003884:	10c00015 	stw	r3,0(r2)
        return -1;
 1003888:	00bfffc4 	movi	r2,-1
 100388c:	e0bffe15 	stw	r2,-8(fp)
 1003890:	00000e06 	br	10038cc <write+0x10c>
      }
      return rval;
 1003894:	e0bff917 	ldw	r2,-28(fp)
 1003898:	e0bffe15 	stw	r2,-8(fp)
 100389c:	00000b06 	br	10038cc <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 10038a0:	10038e40 	call	10038e4 <alt_get_errno>
 10038a4:	1007883a 	mov	r3,r2
 10038a8:	00800344 	movi	r2,13
 10038ac:	18800015 	stw	r2,0(r3)
 10038b0:	00000406 	br	10038c4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 10038b4:	10038e40 	call	10038e4 <alt_get_errno>
 10038b8:	1007883a 	mov	r3,r2
 10038bc:	00801444 	movi	r2,81
 10038c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10038c4:	00bfffc4 	movi	r2,-1
 10038c8:	e0bffe15 	stw	r2,-8(fp)
 10038cc:	e0bffe17 	ldw	r2,-8(fp)
}
 10038d0:	e037883a 	mov	sp,fp
 10038d4:	dfc00117 	ldw	ra,4(sp)
 10038d8:	df000017 	ldw	fp,0(sp)
 10038dc:	dec00204 	addi	sp,sp,8
 10038e0:	f800283a 	ret

010038e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10038e4:	defffd04 	addi	sp,sp,-12
 10038e8:	dfc00215 	stw	ra,8(sp)
 10038ec:	df000115 	stw	fp,4(sp)
 10038f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10038f4:	00804074 	movhi	r2,257
 10038f8:	10b9b204 	addi	r2,r2,-6456
 10038fc:	10800017 	ldw	r2,0(r2)
 1003900:	1005003a 	cmpeq	r2,r2,zero
 1003904:	1000061e 	bne	r2,zero,1003920 <alt_get_errno+0x3c>
 1003908:	00804074 	movhi	r2,257
 100390c:	10b9b204 	addi	r2,r2,-6456
 1003910:	10800017 	ldw	r2,0(r2)
 1003914:	103ee83a 	callr	r2
 1003918:	e0bfff15 	stw	r2,-4(fp)
 100391c:	00000306 	br	100392c <alt_get_errno+0x48>
 1003920:	00804074 	movhi	r2,257
 1003924:	10806204 	addi	r2,r2,392
 1003928:	e0bfff15 	stw	r2,-4(fp)
 100392c:	e0bfff17 	ldw	r2,-4(fp)
}
 1003930:	e037883a 	mov	sp,fp
 1003934:	dfc00117 	ldw	ra,4(sp)
 1003938:	df000017 	ldw	fp,0(sp)
 100393c:	dec00204 	addi	sp,sp,8
 1003940:	f800283a 	ret

01003944 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1003944:	defffd04 	addi	sp,sp,-12
 1003948:	dfc00215 	stw	ra,8(sp)
 100394c:	df000115 	stw	fp,4(sp)
 1003950:	df000104 	addi	fp,sp,4
 1003954:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 1003958:	1009cb00 	call	1009cb0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100395c:	00800044 	movi	r2,1
 1003960:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1003964:	e037883a 	mov	sp,fp
 1003968:	dfc00117 	ldw	ra,4(sp)
 100396c:	df000017 	ldw	fp,0(sp)
 1003970:	dec00204 	addi	sp,sp,8
 1003974:	f800283a 	ret

01003978 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1003978:	defffe04 	addi	sp,sp,-8
 100397c:	dfc00115 	stw	ra,4(sp)
 1003980:	df000015 	stw	fp,0(sp)
 1003984:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1003988:	01004074 	movhi	r4,257
 100398c:	21358504 	addi	r4,r4,-10732
 1003990:	000b883a 	mov	r5,zero
 1003994:	000d883a 	mov	r6,zero
 1003998:	100817c0 	call	100817c <altera_avalon_jtag_uart_init>
 100399c:	01004074 	movhi	r4,257
 10039a0:	21357b04 	addi	r4,r4,-10772
 10039a4:	10039e00 	call	10039e0 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 10039a8:	01004074 	movhi	r4,257
 10039ac:	21399304 	addi	r4,r4,-6580
 10039b0:	1008b900 	call	1008b90 <alt_up_character_lcd_init>
 10039b4:	01004074 	movhi	r4,257
 10039b8:	21399304 	addi	r4,r4,-6580
 10039bc:	10039e00 	call	10039e0 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 10039c0:	01004074 	movhi	r4,257
 10039c4:	21399e04 	addi	r4,r4,-6536
 10039c8:	10039e00 	call	10039e0 <alt_dev_reg>
}
 10039cc:	e037883a 	mov	sp,fp
 10039d0:	dfc00117 	ldw	ra,4(sp)
 10039d4:	df000017 	ldw	fp,0(sp)
 10039d8:	dec00204 	addi	sp,sp,8
 10039dc:	f800283a 	ret

010039e0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 10039e0:	defffd04 	addi	sp,sp,-12
 10039e4:	dfc00215 	stw	ra,8(sp)
 10039e8:	df000115 	stw	fp,4(sp)
 10039ec:	df000104 	addi	fp,sp,4
 10039f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 10039f4:	e13fff17 	ldw	r4,-4(fp)
 10039f8:	01404074 	movhi	r5,257
 10039fc:	2979af04 	addi	r5,r5,-6468
 1003a00:	10091800 	call	1009180 <alt_dev_llist_insert>
}
 1003a04:	e037883a 	mov	sp,fp
 1003a08:	dfc00117 	ldw	ra,4(sp)
 1003a0c:	df000017 	ldw	fp,0(sp)
 1003a10:	dec00204 	addi	sp,sp,8
 1003a14:	f800283a 	ret

01003a18 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 1003a18:	defffa04 	addi	sp,sp,-24
 1003a1c:	dfc00515 	stw	ra,20(sp)
 1003a20:	df000415 	stw	fp,16(sp)
 1003a24:	df000404 	addi	fp,sp,16
 1003a28:	e13ffe15 	stw	r4,-8(fp)
 1003a2c:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 1003a30:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
 1003a34:	100684c0 	call	100684c <alt_up_sd_card_is_Present>
 1003a38:	1005003a 	cmpeq	r2,r2,zero
 1003a3c:	1000221e 	bne	r2,zero,1003ac8 <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
 1003a40:	00803fc4 	movi	r2,255
 1003a44:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 1003a48:	d0a6c317 	ldw	r2,-25844(gp)
 1003a4c:	1009883a 	mov	r4,r2
 1003a50:	e0fffe17 	ldw	r3,-8(fp)
 1003a54:	e0bfff17 	ldw	r2,-4(fp)
 1003a58:	1885883a 	add	r2,r3,r2
 1003a5c:	1006927a 	slli	r3,r2,9
 1003a60:	2005883a 	mov	r2,r4
 1003a64:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 1003a68:	d0a6c217 	ldw	r2,-25848(gp)
 1003a6c:	1007883a 	mov	r3,r2
 1003a70:	00800604 	movi	r2,24
 1003a74:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 1003a78:	d0a6bf17 	ldw	r2,-25860(gp)
 1003a7c:	1080002b 	ldhuio	r2,0(r2)
 1003a80:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
 1003a84:	e0bffc0b 	ldhu	r2,-16(fp)
 1003a88:	10bfffcc 	andi	r2,r2,65535
 1003a8c:	1080010c 	andi	r2,r2,4
 1003a90:	1004c03a 	cmpne	r2,r2,zero
 1003a94:	103ff81e 	bne	r2,zero,1003a78 <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 1003a98:	e0bffc0b 	ldhu	r2,-16(fp)
 1003a9c:	10bfffcc 	andi	r2,r2,65535
 1003aa0:	1080040c 	andi	r2,r2,16
 1003aa4:	1004c03a 	cmpne	r2,r2,zero
 1003aa8:	1000071e 	bne	r2,zero,1003ac8 <Write_Sector_Data+0xb0>
			result = true;
 1003aac:	00800044 	movi	r2,1
 1003ab0:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
 1003ab4:	d026c815 	stw	zero,-25824(gp)
			current_sector_index = sector_index + partition_offset;
 1003ab8:	e0fffe17 	ldw	r3,-8(fp)
 1003abc:	e0bfff17 	ldw	r2,-4(fp)
 1003ac0:	1885883a 	add	r2,r3,r2
 1003ac4:	d0a6c915 	stw	r2,-25820(gp)
		}
	}
	return result;
 1003ac8:	e0bffd17 	ldw	r2,-12(fp)
}
 1003acc:	e037883a 	mov	sp,fp
 1003ad0:	dfc00117 	ldw	ra,4(sp)
 1003ad4:	df000017 	ldw	fp,0(sp)
 1003ad8:	dec00204 	addi	sp,sp,8
 1003adc:	f800283a 	ret

01003ae0 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 1003ae0:	defffd04 	addi	sp,sp,-12
 1003ae4:	dfc00215 	stw	ra,8(sp)
 1003ae8:	df000115 	stw	fp,4(sp)
 1003aec:	df000104 	addi	fp,sp,4
	bool result = true;
 1003af0:	00800044 	movi	r2,1
 1003af4:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
 1003af8:	d0a6c817 	ldw	r2,-25824(gp)
 1003afc:	1005003a 	cmpeq	r2,r2,zero
 1003b00:	1000051e 	bne	r2,zero,1003b18 <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
 1003b04:	d0a6c917 	ldw	r2,-25820(gp)
 1003b08:	1009883a 	mov	r4,r2
 1003b0c:	000b883a 	mov	r5,zero
 1003b10:	1003a180 	call	1003a18 <Write_Sector_Data>
 1003b14:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
 1003b18:	e0bfff17 	ldw	r2,-4(fp)
}
 1003b1c:	e037883a 	mov	sp,fp
 1003b20:	dfc00117 	ldw	ra,4(sp)
 1003b24:	df000017 	ldw	fp,0(sp)
 1003b28:	dec00204 	addi	sp,sp,8
 1003b2c:	f800283a 	ret

01003b30 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 1003b30:	defff904 	addi	sp,sp,-28
 1003b34:	dfc00615 	stw	ra,24(sp)
 1003b38:	df000515 	stw	fp,20(sp)
 1003b3c:	df000504 	addi	fp,sp,20
 1003b40:	e13ffd15 	stw	r4,-12(fp)
 1003b44:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 1003b48:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 1003b4c:	100684c0 	call	100684c <alt_up_sd_card_is_Present>
 1003b50:	1005003a 	cmpeq	r2,r2,zero
 1003b54:	10002d1e 	bne	r2,zero,1003c0c <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
 1003b58:	00803fc4 	movi	r2,255
 1003b5c:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 1003b60:	d0a6c817 	ldw	r2,-25824(gp)
 1003b64:	1005003a 	cmpeq	r2,r2,zero
 1003b68:	1000081e 	bne	r2,zero,1003b8c <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 1003b6c:	d0a6c917 	ldw	r2,-25820(gp)
 1003b70:	1009883a 	mov	r4,r2
 1003b74:	000b883a 	mov	r5,zero
 1003b78:	1003a180 	call	1003a18 <Write_Sector_Data>
 1003b7c:	1004c03a 	cmpne	r2,r2,zero
 1003b80:	1000021e 	bne	r2,zero,1003b8c <Read_Sector_Data+0x5c>
				return false;
 1003b84:	e03fff15 	stw	zero,-4(fp)
 1003b88:	00002206 	br	1003c14 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 1003b8c:	d0a6c317 	ldw	r2,-25844(gp)
 1003b90:	1009883a 	mov	r4,r2
 1003b94:	e0fffd17 	ldw	r3,-12(fp)
 1003b98:	e0bffe17 	ldw	r2,-8(fp)
 1003b9c:	1885883a 	add	r2,r3,r2
 1003ba0:	1006927a 	slli	r3,r2,9
 1003ba4:	2005883a 	mov	r2,r4
 1003ba8:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 1003bac:	d0a6c217 	ldw	r2,-25848(gp)
 1003bb0:	1007883a 	mov	r3,r2
 1003bb4:	00800444 	movi	r2,17
 1003bb8:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 1003bbc:	d0a6bf17 	ldw	r2,-25860(gp)
 1003bc0:	1080002b 	ldhuio	r2,0(r2)
 1003bc4:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 1003bc8:	e0bffb0b 	ldhu	r2,-20(fp)
 1003bcc:	10bfffcc 	andi	r2,r2,65535
 1003bd0:	1080010c 	andi	r2,r2,4
 1003bd4:	1004c03a 	cmpne	r2,r2,zero
 1003bd8:	103ff81e 	bne	r2,zero,1003bbc <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 1003bdc:	e0bffb0b 	ldhu	r2,-20(fp)
 1003be0:	10bfffcc 	andi	r2,r2,65535
 1003be4:	1080040c 	andi	r2,r2,16
 1003be8:	1004c03a 	cmpne	r2,r2,zero
 1003bec:	1000071e 	bne	r2,zero,1003c0c <Read_Sector_Data+0xdc>
			result = true;
 1003bf0:	00800044 	movi	r2,1
 1003bf4:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 1003bf8:	d026c815 	stw	zero,-25824(gp)
			current_sector_index = sector_index + partition_offset;
 1003bfc:	e0fffd17 	ldw	r3,-12(fp)
 1003c00:	e0bffe17 	ldw	r2,-8(fp)
 1003c04:	1885883a 	add	r2,r3,r2
 1003c08:	d0a6c915 	stw	r2,-25820(gp)
		}
	}
	return result;
 1003c0c:	e0bffc17 	ldw	r2,-16(fp)
 1003c10:	e0bfff15 	stw	r2,-4(fp)
 1003c14:	e0bfff17 	ldw	r2,-4(fp)
}
 1003c18:	e037883a 	mov	sp,fp
 1003c1c:	dfc00117 	ldw	ra,4(sp)
 1003c20:	df000017 	ldw	fp,0(sp)
 1003c24:	dec00204 	addi	sp,sp,8
 1003c28:	f800283a 	ret

01003c2c <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 1003c2c:	defffa04 	addi	sp,sp,-24
 1003c30:	dfc00515 	stw	ra,20(sp)
 1003c34:	df000415 	stw	fp,16(sp)
 1003c38:	df000404 	addi	fp,sp,16
 1003c3c:	e13ffd15 	stw	r4,-12(fp)
 1003c40:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 1003c44:	e0bffd17 	ldw	r2,-12(fp)
 1003c48:	1006d23a 	srli	r3,r2,8
 1003c4c:	d0a6c517 	ldw	r2,-25836(gp)
 1003c50:	1885883a 	add	r2,r3,r2
 1003c54:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 1003c58:	00804074 	movhi	r2,257
 1003c5c:	10808504 	addi	r2,r2,532
 1003c60:	10c01117 	ldw	r3,68(r2)
 1003c64:	e0bffc17 	ldw	r2,-16(fp)
 1003c68:	10c5883a 	add	r2,r2,r3
 1003c6c:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
 1003c70:	d0e6c917 	ldw	r3,-25820(gp)
 1003c74:	e0bffc17 	ldw	r2,-16(fp)
 1003c78:	10c00726 	beq	r2,r3,1003c98 <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
 1003c7c:	e13ffc17 	ldw	r4,-16(fp)
 1003c80:	000b883a 	mov	r5,zero
 1003c84:	1003b300 	call	1003b30 <Read_Sector_Data>
 1003c88:	1004c03a 	cmpne	r2,r2,zero
 1003c8c:	1000021e 	bne	r2,zero,1003c98 <get_cluster_flag+0x6c>
			return false;
 1003c90:	e03fff15 	stw	zero,-4(fp)
 1003c94:	00000d06 	br	1003ccc <get_cluster_flag+0xa0>
		}
	}
	*flag =
 1003c98:	d0a6c717 	ldw	r2,-25828(gp)
 1003c9c:	10800a17 	ldw	r2,40(r2)
 1003ca0:	1007883a 	mov	r3,r2
 1003ca4:	e0bffd17 	ldw	r2,-12(fp)
 1003ca8:	10803fcc 	andi	r2,r2,255
 1003cac:	1085883a 	add	r2,r2,r2
 1003cb0:	1885883a 	add	r2,r3,r2
 1003cb4:	1080002b 	ldhuio	r2,0(r2)
 1003cb8:	1007883a 	mov	r3,r2
 1003cbc:	e0bffe17 	ldw	r2,-8(fp)
 1003cc0:	10c0000d 	sth	r3,0(r2)
			(unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
 1003cc4:	00800044 	movi	r2,1
 1003cc8:	e0bfff15 	stw	r2,-4(fp)
 1003ccc:	e0bfff17 	ldw	r2,-4(fp)
}
 1003cd0:	e037883a 	mov	sp,fp
 1003cd4:	dfc00117 	ldw	ra,4(sp)
 1003cd8:	df000017 	ldw	fp,0(sp)
 1003cdc:	dec00204 	addi	sp,sp,8
 1003ce0:	f800283a 	ret

01003ce4 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 1003ce4:	defff904 	addi	sp,sp,-28
 1003ce8:	dfc00615 	stw	ra,24(sp)
 1003cec:	df000515 	stw	fp,20(sp)
 1003cf0:	df000504 	addi	fp,sp,20
 1003cf4:	e13ffc15 	stw	r4,-16(fp)
 1003cf8:	e1bffe15 	stw	r6,-8(fp)
 1003cfc:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 1003d00:	e0bffc17 	ldw	r2,-16(fp)
 1003d04:	1006d23a 	srli	r3,r2,8
 1003d08:	d0a6c517 	ldw	r2,-25836(gp)
 1003d0c:	1885883a 	add	r2,r3,r2
 1003d10:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
 1003d14:	e0bffe17 	ldw	r2,-8(fp)
 1003d18:	1005003a 	cmpeq	r2,r2,zero
 1003d1c:	1000071e 	bne	r2,zero,1003d3c <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 1003d20:	00804074 	movhi	r2,257
 1003d24:	10808504 	addi	r2,r2,532
 1003d28:	10c01117 	ldw	r3,68(r2)
 1003d2c:	e0bffb17 	ldw	r2,-20(fp)
 1003d30:	10c5883a 	add	r2,r2,r3
 1003d34:	e0bffb15 	stw	r2,-20(fp)
 1003d38:	00000606 	br	1003d54 <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
 1003d3c:	00804074 	movhi	r2,257
 1003d40:	10808504 	addi	r2,r2,532
 1003d44:	10c01217 	ldw	r3,72(r2)
 1003d48:	e0bffb17 	ldw	r2,-20(fp)
 1003d4c:	10c5883a 	add	r2,r2,r3
 1003d50:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
 1003d54:	d0e6c917 	ldw	r3,-25820(gp)
 1003d58:	e0bffb17 	ldw	r2,-20(fp)
 1003d5c:	10c00726 	beq	r2,r3,1003d7c <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
 1003d60:	e13ffb17 	ldw	r4,-20(fp)
 1003d64:	000b883a 	mov	r5,zero
 1003d68:	1003b300 	call	1003b30 <Read_Sector_Data>
 1003d6c:	1004c03a 	cmpne	r2,r2,zero
 1003d70:	1000021e 	bne	r2,zero,1003d7c <mark_cluster+0x98>
			return false;
 1003d74:	e03fff15 	stw	zero,-4(fp)
 1003d78:	00000d06 	br	1003db0 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 1003d7c:	d0a6c717 	ldw	r2,-25828(gp)
 1003d80:	10800a17 	ldw	r2,40(r2)
 1003d84:	1007883a 	mov	r3,r2
 1003d88:	e0bffc17 	ldw	r2,-16(fp)
 1003d8c:	10803fcc 	andi	r2,r2,255
 1003d90:	1085883a 	add	r2,r2,r2
 1003d94:	1885883a 	add	r2,r3,r2
 1003d98:	e0fffd0f 	ldh	r3,-12(fp)
 1003d9c:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
 1003da0:	00800044 	movi	r2,1
 1003da4:	d0a6c815 	stw	r2,-25824(gp)
	return true;
 1003da8:	00800044 	movi	r2,1
 1003dac:	e0bfff15 	stw	r2,-4(fp)
 1003db0:	e0bfff17 	ldw	r2,-4(fp)
}
 1003db4:	e037883a 	mov	sp,fp
 1003db8:	dfc00117 	ldw	ra,4(sp)
 1003dbc:	df000017 	ldw	fp,0(sp)
 1003dc0:	dec00204 	addi	sp,sp,8
 1003dc4:	f800283a 	ret

01003dc8 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 1003dc8:	defff704 	addi	sp,sp,-36
 1003dcc:	dfc00815 	stw	ra,32(sp)
 1003dd0:	df000715 	stw	fp,28(sp)
 1003dd4:	df000704 	addi	fp,sp,28
	bool result = false;
 1003dd8:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
 1003ddc:	0009883a 	mov	r4,zero
 1003de0:	000b883a 	mov	r5,zero
 1003de4:	1007fa40 	call	1007fa4 <Read_Sector_Data_Attempt_CRC>
 1003de8:	1005003a 	cmpeq	r2,r2,zero
 1003dec:	10005c1e 	bne	r2,zero,1003f60 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 1003df0:	d0a6c717 	ldw	r2,-25828(gp)
 1003df4:	10800a17 	ldw	r2,40(r2)
 1003df8:	10807f84 	addi	r2,r2,510
 1003dfc:	1080002b 	ldhuio	r2,0(r2)
 1003e00:	10bfffcc 	andi	r2,r2,65535
 1003e04:	10a0001c 	xori	r2,r2,32768
 1003e08:	10a00004 	addi	r2,r2,-32768
 1003e0c:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
 1003e10:	e0bffd17 	ldw	r2,-12(fp)
 1003e14:	10ffffcc 	andi	r3,r2,65535
 1003e18:	00aa9554 	movui	r2,43605
 1003e1c:	1880501e 	bne	r3,r2,1003f60 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 1003e20:	e03ffe15 	stw	zero,-8(fp)
 1003e24:	00004b06 	br	1003f54 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
 1003e28:	e0bffe17 	ldw	r2,-8(fp)
 1003e2c:	1004913a 	slli	r2,r2,4
 1003e30:	10806f84 	addi	r2,r2,446
 1003e34:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type =
 1003e38:	d0a6c717 	ldw	r2,-25828(gp)
 1003e3c:	10800a17 	ldw	r2,40(r2)
 1003e40:	1007883a 	mov	r3,r2
 1003e44:	e0bffa17 	ldw	r2,-24(fp)
 1003e48:	1885883a 	add	r2,r3,r2
 1003e4c:	10800104 	addi	r2,r2,4
 1003e50:	10800023 	ldbuio	r2,0(r2)
 1003e54:	e0bff905 	stb	r2,-28(fp)
						(unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
 1003e58:	e0bff907 	ldb	r2,-28(fp)
 1003e5c:	10800060 	cmpeqi	r2,r2,1
 1003e60:	1000091e 	bne	r2,zero,1003e88 <Check_for_Master_Boot_Record+0xc0>
 1003e64:	e0bff907 	ldb	r2,-28(fp)
 1003e68:	10800120 	cmpeqi	r2,r2,4
 1003e6c:	1000061e 	bne	r2,zero,1003e88 <Check_for_Master_Boot_Record+0xc0>
 1003e70:	e0bff907 	ldb	r2,-28(fp)
 1003e74:	108001a0 	cmpeqi	r2,r2,6
 1003e78:	1000031e 	bne	r2,zero,1003e88 <Check_for_Master_Boot_Record+0xc0>
 1003e7c:	e0bff907 	ldb	r2,-28(fp)
 1003e80:	10800398 	cmpnei	r2,r2,14
 1003e84:	1000301e 	bne	r2,zero,1003f48 <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset =
 1003e88:	d0a6c717 	ldw	r2,-25828(gp)
 1003e8c:	10800a17 	ldw	r2,40(r2)
 1003e90:	1007883a 	mov	r3,r2
 1003e94:	e0bffa17 	ldw	r2,-24(fp)
 1003e98:	1885883a 	add	r2,r3,r2
 1003e9c:	10800284 	addi	r2,r2,10
 1003ea0:	1080002b 	ldhuio	r2,0(r2)
 1003ea4:	10bfffcc 	andi	r2,r2,65535
 1003ea8:	1008943a 	slli	r4,r2,16
 1003eac:	d0a6c717 	ldw	r2,-25828(gp)
 1003eb0:	10800a17 	ldw	r2,40(r2)
 1003eb4:	1007883a 	mov	r3,r2
 1003eb8:	e0bffa17 	ldw	r2,-24(fp)
 1003ebc:	1885883a 	add	r2,r3,r2
 1003ec0:	10800204 	addi	r2,r2,8
 1003ec4:	1080002b 	ldhuio	r2,0(r2)
 1003ec8:	10bfffcc 	andi	r2,r2,65535
 1003ecc:	2084b03a 	or	r2,r4,r2
 1003ed0:	e0bffc15 	stw	r2,-16(fp)
							(((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size =
 1003ed4:	d0a6c717 	ldw	r2,-25828(gp)
 1003ed8:	10800a17 	ldw	r2,40(r2)
 1003edc:	1007883a 	mov	r3,r2
 1003ee0:	e0bffa17 	ldw	r2,-24(fp)
 1003ee4:	1885883a 	add	r2,r3,r2
 1003ee8:	10800384 	addi	r2,r2,14
 1003eec:	1080002b 	ldhuio	r2,0(r2)
 1003ef0:	10bfffcc 	andi	r2,r2,65535
 1003ef4:	1008943a 	slli	r4,r2,16
 1003ef8:	d0a6c717 	ldw	r2,-25828(gp)
 1003efc:	10800a17 	ldw	r2,40(r2)
 1003f00:	1007883a 	mov	r3,r2
 1003f04:	e0bffa17 	ldw	r2,-24(fp)
 1003f08:	1885883a 	add	r2,r3,r2
 1003f0c:	10800304 	addi	r2,r2,12
 1003f10:	1080002b 	ldhuio	r2,0(r2)
 1003f14:	10bfffcc 	andi	r2,r2,65535
 1003f18:	2084b03a 	or	r2,r4,r2
 1003f1c:	e0bffb15 	stw	r2,-20(fp)
							(((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
 1003f20:	e0bffb17 	ldw	r2,-20(fp)
 1003f24:	10800050 	cmplti	r2,r2,1
 1003f28:	1000071e 	bne	r2,zero,1003f48 <Check_for_Master_Boot_Record+0x180>
						result = true;
 1003f2c:	00800044 	movi	r2,1
 1003f30:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 1003f34:	e0bffb17 	ldw	r2,-20(fp)
 1003f38:	d0a6c615 	stw	r2,-25832(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 1003f3c:	e0bffc17 	ldw	r2,-16(fp)
 1003f40:	d0a6c515 	stw	r2,-25836(gp)
						break;
 1003f44:	00000606 	br	1003f60 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 1003f48:	e0bffe17 	ldw	r2,-8(fp)
 1003f4c:	10800044 	addi	r2,r2,1
 1003f50:	e0bffe15 	stw	r2,-8(fp)
 1003f54:	e0bffe17 	ldw	r2,-8(fp)
 1003f58:	10800110 	cmplti	r2,r2,4
 1003f5c:	103fb21e 	bne	r2,zero,1003e28 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
 1003f60:	e0bfff17 	ldw	r2,-4(fp)
}
 1003f64:	e037883a 	mov	sp,fp
 1003f68:	dfc00117 	ldw	ra,4(sp)
 1003f6c:	df000017 	ldw	fp,0(sp)
 1003f70:	dec00204 	addi	sp,sp,8
 1003f74:	f800283a 	ret

01003f78 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 1003f78:	defff804 	addi	sp,sp,-32
 1003f7c:	dfc00715 	stw	ra,28(sp)
 1003f80:	df000615 	stw	fp,24(sp)
 1003f84:	df000604 	addi	fp,sp,24
 1003f88:	e13ffc15 	stw	r4,-16(fp)
 1003f8c:	e17ffd15 	stw	r5,-12(fp)
 1003f90:	e1bffe15 	stw	r6,-8(fp)
 1003f94:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 1003f98:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 1003f9c:	e0bffc17 	ldw	r2,-16(fp)
 1003fa0:	108007cc 	andi	r2,r2,31
 1003fa4:	1004c03a 	cmpne	r2,r2,zero
 1003fa8:	10008e1e 	bne	r2,zero,10041e4 <Read_File_Record_At_Offset+0x26c>
 1003fac:	100684c0 	call	100684c <alt_up_sd_card_is_Present>
 1003fb0:	1005003a 	cmpeq	r2,r2,zero
 1003fb4:	10008b1e 	bne	r2,zero,10041e4 <Read_File_Record_At_Offset+0x26c>
 1003fb8:	d0a6be17 	ldw	r2,-25864(gp)
 1003fbc:	1005003a 	cmpeq	r2,r2,zero
 1003fc0:	1000881e 	bne	r2,zero,10041e4 <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 1003fc4:	e03ffa15 	stw	zero,-24(fp)
 1003fc8:	00001006 	br	100400c <Read_File_Record_At_Offset+0x94>
			record->name[counter] =
 1003fcc:	e17ffa17 	ldw	r5,-24(fp)
 1003fd0:	d0a6c717 	ldw	r2,-25828(gp)
 1003fd4:	10800a17 	ldw	r2,40(r2)
 1003fd8:	1009883a 	mov	r4,r2
 1003fdc:	e0fffc17 	ldw	r3,-16(fp)
 1003fe0:	e0bffa17 	ldw	r2,-24(fp)
 1003fe4:	1885883a 	add	r2,r3,r2
 1003fe8:	2085883a 	add	r2,r4,r2
 1003fec:	10800023 	ldbuio	r2,0(r2)
 1003ff0:	1007883a 	mov	r3,r2
 1003ff4:	e0bffd17 	ldw	r2,-12(fp)
 1003ff8:	1145883a 	add	r2,r2,r5
 1003ffc:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 1004000:	e0bffa17 	ldw	r2,-24(fp)
 1004004:	10800044 	addi	r2,r2,1
 1004008:	e0bffa15 	stw	r2,-24(fp)
 100400c:	e0bffa17 	ldw	r2,-24(fp)
 1004010:	10800210 	cmplti	r2,r2,8
 1004014:	103fed1e 	bne	r2,zero,1003fcc <Read_File_Record_At_Offset+0x54>
			record->name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 1004018:	e03ffa15 	stw	zero,-24(fp)
 100401c:	00001206 	br	1004068 <Read_File_Record_At_Offset+0xf0>
			record->extension[counter] =
 1004020:	e17ffa17 	ldw	r5,-24(fp)
 1004024:	d0a6c717 	ldw	r2,-25828(gp)
 1004028:	10800a17 	ldw	r2,40(r2)
 100402c:	1009883a 	mov	r4,r2
 1004030:	e0fffc17 	ldw	r3,-16(fp)
 1004034:	e0bffa17 	ldw	r2,-24(fp)
 1004038:	1885883a 	add	r2,r3,r2
 100403c:	2085883a 	add	r2,r4,r2
 1004040:	10800204 	addi	r2,r2,8
 1004044:	10800023 	ldbuio	r2,0(r2)
 1004048:	1007883a 	mov	r3,r2
 100404c:	e0bffd17 	ldw	r2,-12(fp)
 1004050:	2885883a 	add	r2,r5,r2
 1004054:	10800204 	addi	r2,r2,8
 1004058:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 100405c:	e0bffa17 	ldw	r2,-24(fp)
 1004060:	10800044 	addi	r2,r2,1
 1004064:	e0bffa15 	stw	r2,-24(fp)
 1004068:	e0bffa17 	ldw	r2,-24(fp)
 100406c:	108000d0 	cmplti	r2,r2,3
 1004070:	103feb1e 	bne	r2,zero,1004020 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes =
 1004074:	d0a6c717 	ldw	r2,-25828(gp)
 1004078:	10800a17 	ldw	r2,40(r2)
 100407c:	1007883a 	mov	r3,r2
 1004080:	e0bffc17 	ldw	r2,-16(fp)
 1004084:	1885883a 	add	r2,r3,r2
 1004088:	108002c4 	addi	r2,r2,11
 100408c:	10800023 	ldbuio	r2,0(r2)
 1004090:	1007883a 	mov	r3,r2
 1004094:	e0bffd17 	ldw	r2,-12(fp)
 1004098:	10c002c5 	stb	r3,11(r2)
				(char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time =
 100409c:	d0a6c717 	ldw	r2,-25828(gp)
 10040a0:	10800a17 	ldw	r2,40(r2)
 10040a4:	1007883a 	mov	r3,r2
 10040a8:	e0bffc17 	ldw	r2,-16(fp)
 10040ac:	1885883a 	add	r2,r3,r2
 10040b0:	10800384 	addi	r2,r2,14
 10040b4:	1080002b 	ldhuio	r2,0(r2)
 10040b8:	1007883a 	mov	r3,r2
 10040bc:	e0bffd17 	ldw	r2,-12(fp)
 10040c0:	10c0030d 	sth	r3,12(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date =
 10040c4:	d0a6c717 	ldw	r2,-25828(gp)
 10040c8:	10800a17 	ldw	r2,40(r2)
 10040cc:	1007883a 	mov	r3,r2
 10040d0:	e0bffc17 	ldw	r2,-16(fp)
 10040d4:	1885883a 	add	r2,r3,r2
 10040d8:	10800404 	addi	r2,r2,16
 10040dc:	1080002b 	ldhuio	r2,0(r2)
 10040e0:	1007883a 	mov	r3,r2
 10040e4:	e0bffd17 	ldw	r2,-12(fp)
 10040e8:	10c0038d 	sth	r3,14(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date =
 10040ec:	d0a6c717 	ldw	r2,-25828(gp)
 10040f0:	10800a17 	ldw	r2,40(r2)
 10040f4:	1007883a 	mov	r3,r2
 10040f8:	e0bffc17 	ldw	r2,-16(fp)
 10040fc:	1885883a 	add	r2,r3,r2
 1004100:	10800484 	addi	r2,r2,18
 1004104:	1080002b 	ldhuio	r2,0(r2)
 1004108:	1007883a 	mov	r3,r2
 100410c:	e0bffd17 	ldw	r2,-12(fp)
 1004110:	10c0040d 	sth	r3,16(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time =
 1004114:	d0a6c717 	ldw	r2,-25828(gp)
 1004118:	10800a17 	ldw	r2,40(r2)
 100411c:	1007883a 	mov	r3,r2
 1004120:	e0bffc17 	ldw	r2,-16(fp)
 1004124:	1885883a 	add	r2,r3,r2
 1004128:	10800584 	addi	r2,r2,22
 100412c:	1080002b 	ldhuio	r2,0(r2)
 1004130:	1007883a 	mov	r3,r2
 1004134:	e0bffd17 	ldw	r2,-12(fp)
 1004138:	10c0048d 	sth	r3,18(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date =
 100413c:	d0a6c717 	ldw	r2,-25828(gp)
 1004140:	10800a17 	ldw	r2,40(r2)
 1004144:	1007883a 	mov	r3,r2
 1004148:	e0bffc17 	ldw	r2,-16(fp)
 100414c:	1885883a 	add	r2,r3,r2
 1004150:	10800604 	addi	r2,r2,24
 1004154:	1080002b 	ldhuio	r2,0(r2)
 1004158:	1007883a 	mov	r3,r2
 100415c:	e0bffd17 	ldw	r2,-12(fp)
 1004160:	10c0050d 	sth	r3,20(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =
 1004164:	d0a6c717 	ldw	r2,-25828(gp)
 1004168:	10800a17 	ldw	r2,40(r2)
 100416c:	1007883a 	mov	r3,r2
 1004170:	e0bffc17 	ldw	r2,-16(fp)
 1004174:	1885883a 	add	r2,r3,r2
 1004178:	10800684 	addi	r2,r2,26
 100417c:	1080002b 	ldhuio	r2,0(r2)
 1004180:	1007883a 	mov	r3,r2
 1004184:	e0bffd17 	ldw	r2,-12(fp)
 1004188:	10c0058d 	sth	r3,22(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes =
 100418c:	d0a6c717 	ldw	r2,-25828(gp)
 1004190:	10800a17 	ldw	r2,40(r2)
 1004194:	1007883a 	mov	r3,r2
 1004198:	e0bffc17 	ldw	r2,-16(fp)
 100419c:	1885883a 	add	r2,r3,r2
 10041a0:	10800704 	addi	r2,r2,28
 10041a4:	10800037 	ldwio	r2,0(r2)
 10041a8:	1007883a 	mov	r3,r2
 10041ac:	e0bffd17 	ldw	r2,-12(fp)
 10041b0:	10c00615 	stw	r3,24(r2)
				(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
 10041b4:	e0fffd17 	ldw	r3,-12(fp)
 10041b8:	e0bffe17 	ldw	r2,-8(fp)
 10041bc:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
 10041c0:	e0fffd17 	ldw	r3,-12(fp)
 10041c4:	e0bfff17 	ldw	r2,-4(fp)
 10041c8:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
 10041cc:	e0bffc17 	ldw	r2,-16(fp)
 10041d0:	1007883a 	mov	r3,r2
 10041d4:	e0bffd17 	ldw	r2,-12(fp)
 10041d8:	10c00c0d 	sth	r3,48(r2)
		result = true;
 10041dc:	00800044 	movi	r2,1
 10041e0:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 10041e4:	e0bffb17 	ldw	r2,-20(fp)
}
 10041e8:	e037883a 	mov	sp,fp
 10041ec:	dfc00117 	ldw	ra,4(sp)
 10041f0:	df000017 	ldw	fp,0(sp)
 10041f4:	dec00204 	addi	sp,sp,8
 10041f8:	f800283a 	ret

010041fc <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 10041fc:	defff904 	addi	sp,sp,-28
 1004200:	dfc00615 	stw	ra,24(sp)
 1004204:	df000515 	stw	fp,20(sp)
 1004208:	df000504 	addi	fp,sp,20
 100420c:	e13ffe15 	stw	r4,-8(fp)
 1004210:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 1004214:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 1004218:	e0bffe17 	ldw	r2,-8(fp)
 100421c:	108007cc 	andi	r2,r2,31
 1004220:	1004c03a 	cmpne	r2,r2,zero
 1004224:	10009d1e 	bne	r2,zero,100449c <Write_File_Record_At_Offset+0x2a0>
 1004228:	100684c0 	call	100684c <alt_up_sd_card_is_Present>
 100422c:	1005003a 	cmpeq	r2,r2,zero
 1004230:	10009a1e 	bne	r2,zero,100449c <Write_File_Record_At_Offset+0x2a0>
 1004234:	d0a6be17 	ldw	r2,-25864(gp)
 1004238:	1005003a 	cmpeq	r2,r2,zero
 100423c:	1000971e 	bne	r2,zero,100449c <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 1004240:	e03ffc15 	stw	zero,-16(fp)
 1004244:	00001e06 	br	10042c0 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
 1004248:	e0bffc17 	ldw	r2,-16(fp)
 100424c:	10c00044 	addi	r3,r2,1
 1004250:	e0bfff17 	ldw	r2,-4(fp)
 1004254:	10c5883a 	add	r2,r2,r3
 1004258:	10800003 	ldbu	r2,0(r2)
 100425c:	10803fcc 	andi	r2,r2,255
 1004260:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
 1004264:	e0bffb0f 	ldh	r2,-20(fp)
 1004268:	1004923a 	slli	r2,r2,8
 100426c:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
 1004270:	e0fffc17 	ldw	r3,-16(fp)
 1004274:	e0bfff17 	ldw	r2,-4(fp)
 1004278:	10c5883a 	add	r2,r2,r3
 100427c:	10800003 	ldbu	r2,0(r2)
 1004280:	10c03fcc 	andi	r3,r2,255
 1004284:	e0bffb0b 	ldhu	r2,-20(fp)
 1004288:	10c4b03a 	or	r2,r2,r3
 100428c:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 1004290:	d0a6c717 	ldw	r2,-25828(gp)
 1004294:	10800a17 	ldw	r2,40(r2)
 1004298:	1009883a 	mov	r4,r2
 100429c:	e0fffe17 	ldw	r3,-8(fp)
 10042a0:	e0bffc17 	ldw	r2,-16(fp)
 10042a4:	1885883a 	add	r2,r3,r2
 10042a8:	2085883a 	add	r2,r4,r2
 10042ac:	e0fffb0f 	ldh	r3,-20(fp)
 10042b0:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 10042b4:	e0bffc17 	ldw	r2,-16(fp)
 10042b8:	10800084 	addi	r2,r2,2
 10042bc:	e0bffc15 	stw	r2,-16(fp)
 10042c0:	e0bffc17 	ldw	r2,-16(fp)
 10042c4:	10800210 	cmplti	r2,r2,8
 10042c8:	103fdf1e 	bne	r2,zero,1004248 <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 10042cc:	e03ffc15 	stw	zero,-16(fp)
 10042d0:	00001306 	br	1004320 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8,
 10042d4:	d0a6c717 	ldw	r2,-25828(gp)
 10042d8:	10800a17 	ldw	r2,40(r2)
 10042dc:	1009883a 	mov	r4,r2
 10042e0:	e0fffe17 	ldw	r3,-8(fp)
 10042e4:	e0bffc17 	ldw	r2,-16(fp)
 10042e8:	1885883a 	add	r2,r3,r2
 10042ec:	2085883a 	add	r2,r4,r2
 10042f0:	11000204 	addi	r4,r2,8
 10042f4:	e0fffc17 	ldw	r3,-16(fp)
 10042f8:	e0bfff17 	ldw	r2,-4(fp)
 10042fc:	1885883a 	add	r2,r3,r2
 1004300:	10800204 	addi	r2,r2,8
 1004304:	10800003 	ldbu	r2,0(r2)
 1004308:	10c03fcc 	andi	r3,r2,255
 100430c:	2005883a 	mov	r2,r4
 1004310:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 1004314:	e0bffc17 	ldw	r2,-16(fp)
 1004318:	10800044 	addi	r2,r2,1
 100431c:	e0bffc15 	stw	r2,-16(fp)
 1004320:	e0bffc17 	ldw	r2,-16(fp)
 1004324:	108000d0 	cmplti	r2,r2,3
 1004328:	103fea1e 	bne	r2,zero,10042d4 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8,
					record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 100432c:	d0a6c717 	ldw	r2,-25828(gp)
 1004330:	10800a17 	ldw	r2,40(r2)
 1004334:	1007883a 	mov	r3,r2
 1004338:	e0bffe17 	ldw	r2,-8(fp)
 100433c:	1885883a 	add	r2,r3,r2
 1004340:	110002c4 	addi	r4,r2,11
 1004344:	e0bfff17 	ldw	r2,-4(fp)
 1004348:	108002c3 	ldbu	r2,11(r2)
 100434c:	10c03fcc 	andi	r3,r2,255
 1004350:	2005883a 	mov	r2,r4
 1004354:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 1004358:	d0a6c717 	ldw	r2,-25828(gp)
 100435c:	10800a17 	ldw	r2,40(r2)
 1004360:	1007883a 	mov	r3,r2
 1004364:	e0bffe17 	ldw	r2,-8(fp)
 1004368:	1885883a 	add	r2,r3,r2
 100436c:	11000384 	addi	r4,r2,14
 1004370:	e0bfff17 	ldw	r2,-4(fp)
 1004374:	1080030b 	ldhu	r2,12(r2)
 1004378:	10ffffcc 	andi	r3,r2,65535
 100437c:	2005883a 	mov	r2,r4
 1004380:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 1004384:	d0a6c717 	ldw	r2,-25828(gp)
 1004388:	10800a17 	ldw	r2,40(r2)
 100438c:	1007883a 	mov	r3,r2
 1004390:	e0bffe17 	ldw	r2,-8(fp)
 1004394:	1885883a 	add	r2,r3,r2
 1004398:	11000404 	addi	r4,r2,16
 100439c:	e0bfff17 	ldw	r2,-4(fp)
 10043a0:	1080038b 	ldhu	r2,14(r2)
 10043a4:	10ffffcc 	andi	r3,r2,65535
 10043a8:	2005883a 	mov	r2,r4
 10043ac:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18,
 10043b0:	d0a6c717 	ldw	r2,-25828(gp)
 10043b4:	10800a17 	ldw	r2,40(r2)
 10043b8:	1007883a 	mov	r3,r2
 10043bc:	e0bffe17 	ldw	r2,-8(fp)
 10043c0:	1885883a 	add	r2,r3,r2
 10043c4:	11000484 	addi	r4,r2,18
 10043c8:	e0bfff17 	ldw	r2,-4(fp)
 10043cc:	1080040b 	ldhu	r2,16(r2)
 10043d0:	10ffffcc 	andi	r3,r2,65535
 10043d4:	2005883a 	mov	r2,r4
 10043d8:	10c0002d 	sthio	r3,0(r2)
				record->last_access_date);
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22,
 10043dc:	d0a6c717 	ldw	r2,-25828(gp)
 10043e0:	10800a17 	ldw	r2,40(r2)
 10043e4:	1007883a 	mov	r3,r2
 10043e8:	e0bffe17 	ldw	r2,-8(fp)
 10043ec:	1885883a 	add	r2,r3,r2
 10043f0:	11000584 	addi	r4,r2,22
 10043f4:	e0bfff17 	ldw	r2,-4(fp)
 10043f8:	1080048b 	ldhu	r2,18(r2)
 10043fc:	10ffffcc 	andi	r3,r2,65535
 1004400:	2005883a 	mov	r2,r4
 1004404:	10c0002d 	sthio	r3,0(r2)
				record->last_modified_time);
		IOWR_16DIRECT(device_pointer->base, offset+24,
 1004408:	d0a6c717 	ldw	r2,-25828(gp)
 100440c:	10800a17 	ldw	r2,40(r2)
 1004410:	1007883a 	mov	r3,r2
 1004414:	e0bffe17 	ldw	r2,-8(fp)
 1004418:	1885883a 	add	r2,r3,r2
 100441c:	11000604 	addi	r4,r2,24
 1004420:	e0bfff17 	ldw	r2,-4(fp)
 1004424:	1080050b 	ldhu	r2,20(r2)
 1004428:	10ffffcc 	andi	r3,r2,65535
 100442c:	2005883a 	mov	r2,r4
 1004430:	10c0002d 	sthio	r3,0(r2)
				record->last_modified_date);
		IOWR_16DIRECT(device_pointer->base, offset+26,
 1004434:	d0a6c717 	ldw	r2,-25828(gp)
 1004438:	10800a17 	ldw	r2,40(r2)
 100443c:	1007883a 	mov	r3,r2
 1004440:	e0bffe17 	ldw	r2,-8(fp)
 1004444:	1885883a 	add	r2,r3,r2
 1004448:	11000684 	addi	r4,r2,26
 100444c:	e0bfff17 	ldw	r2,-4(fp)
 1004450:	1080058b 	ldhu	r2,22(r2)
 1004454:	10ffffcc 	andi	r3,r2,65535
 1004458:	2005883a 	mov	r2,r4
 100445c:	10c0002d 	sthio	r3,0(r2)
				record->start_cluster_index);
		IOWR_32DIRECT(device_pointer->base, offset+28,
 1004460:	d0a6c717 	ldw	r2,-25828(gp)
 1004464:	10800a17 	ldw	r2,40(r2)
 1004468:	1007883a 	mov	r3,r2
 100446c:	e0bffe17 	ldw	r2,-8(fp)
 1004470:	1885883a 	add	r2,r3,r2
 1004474:	11000704 	addi	r4,r2,28
 1004478:	e0bfff17 	ldw	r2,-4(fp)
 100447c:	10800617 	ldw	r2,24(r2)
 1004480:	1007883a 	mov	r3,r2
 1004484:	2005883a 	mov	r2,r4
 1004488:	10c00035 	stwio	r3,0(r2)
				record->file_size_in_bytes);
		current_sector_modified = true;
 100448c:	00800044 	movi	r2,1
 1004490:	d0a6c815 	stw	r2,-25824(gp)
		result = true;
 1004494:	00800044 	movi	r2,1
 1004498:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
 100449c:	e0bffd17 	ldw	r2,-12(fp)
}
 10044a0:	e037883a 	mov	sp,fp
 10044a4:	dfc00117 	ldw	ra,4(sp)
 10044a8:	df000017 	ldw	fp,0(sp)
 10044ac:	dec00204 	addi	sp,sp,8
 10044b0:	f800283a 	ret

010044b4 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 10044b4:	defff804 	addi	sp,sp,-32
 10044b8:	dfc00715 	stw	ra,28(sp)
 10044bc:	df000615 	stw	fp,24(sp)
 10044c0:	dc000515 	stw	r16,20(sp)
 10044c4:	df000504 	addi	fp,sp,20
 10044c8:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
 10044cc:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
 10044d0:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
 10044d4:	0009883a 	mov	r4,zero
 10044d8:	e17fff17 	ldw	r5,-4(fp)
 10044dc:	1007fa40 	call	1007fa4 <Read_Sector_Data_Attempt_CRC>
 10044e0:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 10044e4:	d0a6c717 	ldw	r2,-25828(gp)
 10044e8:	10800a17 	ldw	r2,40(r2)
 10044ec:	10807f84 	addi	r2,r2,510
 10044f0:	1080002b 	ldhuio	r2,0(r2)
 10044f4:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 10044f8:	e0bffc0f 	ldh	r2,-16(fp)
 10044fc:	10ffffcc 	andi	r3,r2,65535
 1004500:	00aa9554 	movui	r2,43605
 1004504:	1881751e 	bne	r3,r2,1004adc <Check_for_DOS_FAT+0x628>
 1004508:	e0bffe17 	ldw	r2,-8(fp)
 100450c:	1005003a 	cmpeq	r2,r2,zero
 1004510:	1001721e 	bne	r2,zero,1004adc <Check_for_DOS_FAT+0x628>
		int num_clusters = 0;
 1004514:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] =
 1004518:	d0a6c717 	ldw	r2,-25828(gp)
 100451c:	10800a17 	ldw	r2,40(r2)
 1004520:	10800023 	ldbuio	r2,0(r2)
 1004524:	1007883a 	mov	r3,r2
 1004528:	00804074 	movhi	r2,257
 100452c:	10808504 	addi	r2,r2,532
 1004530:	10c00005 	stb	r3,0(r2)
				(char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
 1004534:	d0a6c717 	ldw	r2,-25828(gp)
 1004538:	10800a17 	ldw	r2,40(r2)
 100453c:	10800044 	addi	r2,r2,1
 1004540:	10800023 	ldbuio	r2,0(r2)
 1004544:	1007883a 	mov	r3,r2
 1004548:	00804074 	movhi	r2,257
 100454c:	10808504 	addi	r2,r2,532
 1004550:	10c00045 	stb	r3,1(r2)
				(char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
 1004554:	d0a6c717 	ldw	r2,-25828(gp)
 1004558:	10800a17 	ldw	r2,40(r2)
 100455c:	10800084 	addi	r2,r2,2
 1004560:	10800023 	ldbuio	r2,0(r2)
 1004564:	1007883a 	mov	r3,r2
 1004568:	00804074 	movhi	r2,257
 100456c:	10808504 	addi	r2,r2,532
 1004570:	10c00085 	stb	r3,2(r2)
				(char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 1004574:	e03ffd15 	stw	zero,-12(fp)
 1004578:	00001006 	br	10045bc <Check_for_DOS_FAT+0x108>
			boot_sector_data.OEM_name[counter] =
 100457c:	e13ffd17 	ldw	r4,-12(fp)
 1004580:	d0a6c717 	ldw	r2,-25828(gp)
 1004584:	10800a17 	ldw	r2,40(r2)
 1004588:	1007883a 	mov	r3,r2
 100458c:	e0bffd17 	ldw	r2,-12(fp)
 1004590:	1885883a 	add	r2,r3,r2
 1004594:	108000c4 	addi	r2,r2,3
 1004598:	10800023 	ldbuio	r2,0(r2)
 100459c:	1007883a 	mov	r3,r2
 10045a0:	00804074 	movhi	r2,257
 10045a4:	10808504 	addi	r2,r2,532
 10045a8:	1105883a 	add	r2,r2,r4
 10045ac:	10c000c5 	stb	r3,3(r2)
				(char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
				(char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
				(char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 10045b0:	e0bffd17 	ldw	r2,-12(fp)
 10045b4:	10800044 	addi	r2,r2,1
 10045b8:	e0bffd15 	stw	r2,-12(fp)
 10045bc:	e0bffd17 	ldw	r2,-12(fp)
 10045c0:	10800210 	cmplti	r2,r2,8
 10045c4:	103fed1e 	bne	r2,zero,100457c <Check_for_DOS_FAT+0xc8>
			boot_sector_data.OEM_name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes =
 10045c8:	d0a6c717 	ldw	r2,-25828(gp)
 10045cc:	10800a17 	ldw	r2,40(r2)
 10045d0:	10800304 	addi	r2,r2,12
 10045d4:	10800023 	ldbuio	r2,0(r2)
 10045d8:	10803fcc 	andi	r2,r2,255
 10045dc:	1004923a 	slli	r2,r2,8
 10045e0:	1007883a 	mov	r3,r2
 10045e4:	d0a6c717 	ldw	r2,-25828(gp)
 10045e8:	10800a17 	ldw	r2,40(r2)
 10045ec:	108002c4 	addi	r2,r2,11
 10045f0:	10800023 	ldbuio	r2,0(r2)
 10045f4:	10803fcc 	andi	r2,r2,255
 10045f8:	1080201c 	xori	r2,r2,128
 10045fc:	10bfe004 	addi	r2,r2,-128
 1004600:	1884b03a 	or	r2,r3,r2
 1004604:	1007883a 	mov	r3,r2
 1004608:	00804074 	movhi	r2,257
 100460c:	10808504 	addi	r2,r2,532
 1004610:	10c0030d 	sth	r3,12(r2)
				(((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8)
						| ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster =
 1004614:	d0a6c717 	ldw	r2,-25828(gp)
 1004618:	10800a17 	ldw	r2,40(r2)
 100461c:	10800344 	addi	r2,r2,13
 1004620:	10800023 	ldbuio	r2,0(r2)
 1004624:	1007883a 	mov	r3,r2
 1004628:	00804074 	movhi	r2,257
 100462c:	10808504 	addi	r2,r2,532
 1004630:	10c00385 	stb	r3,14(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors =
 1004634:	d0a6c717 	ldw	r2,-25828(gp)
 1004638:	10800a17 	ldw	r2,40(r2)
 100463c:	10800384 	addi	r2,r2,14
 1004640:	1080002b 	ldhuio	r2,0(r2)
 1004644:	1007883a 	mov	r3,r2
 1004648:	00804074 	movhi	r2,257
 100464c:	10808504 	addi	r2,r2,532
 1004650:	10c0040d 	sth	r3,16(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs =
 1004654:	d0a6c717 	ldw	r2,-25828(gp)
 1004658:	10800a17 	ldw	r2,40(r2)
 100465c:	10800404 	addi	r2,r2,16
 1004660:	10800023 	ldbuio	r2,0(r2)
 1004664:	1007883a 	mov	r3,r2
 1004668:	00804074 	movhi	r2,257
 100466c:	10808504 	addi	r2,r2,532
 1004670:	10c00485 	stb	r3,18(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires =
 1004674:	d0a6c717 	ldw	r2,-25828(gp)
 1004678:	10800a17 	ldw	r2,40(r2)
 100467c:	10800484 	addi	r2,r2,18
 1004680:	10800023 	ldbuio	r2,0(r2)
 1004684:	10803fcc 	andi	r2,r2,255
 1004688:	1004923a 	slli	r2,r2,8
 100468c:	1007883a 	mov	r3,r2
 1004690:	d0a6c717 	ldw	r2,-25828(gp)
 1004694:	10800a17 	ldw	r2,40(r2)
 1004698:	10800444 	addi	r2,r2,17
 100469c:	10800023 	ldbuio	r2,0(r2)
 10046a0:	10803fcc 	andi	r2,r2,255
 10046a4:	1884b03a 	or	r2,r3,r2
 10046a8:	1007883a 	mov	r3,r2
 10046ac:	00804074 	movhi	r2,257
 10046b0:	10808504 	addi	r2,r2,532
 10046b4:	10c0050d 	sth	r3,20(r2)
				(((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition =
 10046b8:	d0a6c717 	ldw	r2,-25828(gp)
 10046bc:	10800a17 	ldw	r2,40(r2)
 10046c0:	10800504 	addi	r2,r2,20
 10046c4:	10800023 	ldbuio	r2,0(r2)
 10046c8:	10803fcc 	andi	r2,r2,255
 10046cc:	1004923a 	slli	r2,r2,8
 10046d0:	1007883a 	mov	r3,r2
 10046d4:	d0a6c717 	ldw	r2,-25828(gp)
 10046d8:	10800a17 	ldw	r2,40(r2)
 10046dc:	108004c4 	addi	r2,r2,19
 10046e0:	10800023 	ldbuio	r2,0(r2)
 10046e4:	10803fcc 	andi	r2,r2,255
 10046e8:	1884b03a 	or	r2,r3,r2
 10046ec:	1007883a 	mov	r3,r2
 10046f0:	00804074 	movhi	r2,257
 10046f4:	10808504 	addi	r2,r2,532
 10046f8:	10c0058d 	sth	r3,22(r2)
				(((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor =
 10046fc:	d0a6c717 	ldw	r2,-25828(gp)
 1004700:	10800a17 	ldw	r2,40(r2)
 1004704:	10800544 	addi	r2,r2,21
 1004708:	10800023 	ldbuio	r2,0(r2)
 100470c:	1007883a 	mov	r3,r2
 1004710:	00804074 	movhi	r2,257
 1004714:	10808504 	addi	r2,r2,532
 1004718:	10c00605 	stb	r3,24(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table =
 100471c:	d0a6c717 	ldw	r2,-25828(gp)
 1004720:	10800a17 	ldw	r2,40(r2)
 1004724:	10800584 	addi	r2,r2,22
 1004728:	1080002b 	ldhuio	r2,0(r2)
 100472c:	1007883a 	mov	r3,r2
 1004730:	00804074 	movhi	r2,257
 1004734:	10808504 	addi	r2,r2,532
 1004738:	10c0068d 	sth	r3,26(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track =
 100473c:	d0a6c717 	ldw	r2,-25828(gp)
 1004740:	10800a17 	ldw	r2,40(r2)
 1004744:	10800604 	addi	r2,r2,24
 1004748:	1080002b 	ldhuio	r2,0(r2)
 100474c:	1007883a 	mov	r3,r2
 1004750:	00804074 	movhi	r2,257
 1004754:	10808504 	addi	r2,r2,532
 1004758:	10c0070d 	sth	r3,28(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads =
 100475c:	d0a6c717 	ldw	r2,-25828(gp)
 1004760:	10800a17 	ldw	r2,40(r2)
 1004764:	10800684 	addi	r2,r2,26
 1004768:	1080002b 	ldhuio	r2,0(r2)
 100476c:	1007883a 	mov	r3,r2
 1004770:	00804074 	movhi	r2,257
 1004774:	10808504 	addi	r2,r2,532
 1004778:	10c0078d 	sth	r3,30(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors =
 100477c:	d0a6c717 	ldw	r2,-25828(gp)
 1004780:	10800a17 	ldw	r2,40(r2)
 1004784:	10800704 	addi	r2,r2,28
 1004788:	10800037 	ldwio	r2,0(r2)
 100478c:	1007883a 	mov	r3,r2
 1004790:	00804074 	movhi	r2,257
 1004794:	10808504 	addi	r2,r2,532
 1004798:	10c00815 	stw	r3,32(r2)
				((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB =
 100479c:	d0a6c717 	ldw	r2,-25828(gp)
 10047a0:	10800a17 	ldw	r2,40(r2)
 10047a4:	10800804 	addi	r2,r2,32
 10047a8:	10800037 	ldwio	r2,0(r2)
 10047ac:	1007883a 	mov	r3,r2
 10047b0:	00804074 	movhi	r2,257
 10047b4:	10808504 	addi	r2,r2,532
 10047b8:	10c00915 	stw	r3,36(r2)
				((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number =
 10047bc:	d0a6c717 	ldw	r2,-25828(gp)
 10047c0:	10800a17 	ldw	r2,40(r2)
 10047c4:	10800904 	addi	r2,r2,36
 10047c8:	10800023 	ldbuio	r2,0(r2)
 10047cc:	1007883a 	mov	r3,r2
 10047d0:	00804074 	movhi	r2,257
 10047d4:	10808504 	addi	r2,r2,532
 10047d8:	10c00a05 	stb	r3,40(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head =
 10047dc:	d0a6c717 	ldw	r2,-25828(gp)
 10047e0:	10800a17 	ldw	r2,40(r2)
 10047e4:	10800944 	addi	r2,r2,37
 10047e8:	10800023 	ldbuio	r2,0(r2)
 10047ec:	1007883a 	mov	r3,r2
 10047f0:	00804074 	movhi	r2,257
 10047f4:	10808504 	addi	r2,r2,532
 10047f8:	10c00a45 	stb	r3,41(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature =
 10047fc:	d0a6c717 	ldw	r2,-25828(gp)
 1004800:	10800a17 	ldw	r2,40(r2)
 1004804:	10800984 	addi	r2,r2,38
 1004808:	10800023 	ldbuio	r2,0(r2)
 100480c:	1007883a 	mov	r3,r2
 1004810:	00804074 	movhi	r2,257
 1004814:	10808504 	addi	r2,r2,532
 1004818:	10c00a85 	stb	r3,42(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset =
 100481c:	00804074 	movhi	r2,257
 1004820:	10808504 	addi	r2,r2,532
 1004824:	1080040b 	ldhu	r2,16(r2)
 1004828:	10ffffcc 	andi	r3,r2,65535
 100482c:	00804074 	movhi	r2,257
 1004830:	10808504 	addi	r2,r2,532
 1004834:	10c01115 	stw	r3,68(r2)
				boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset =
 1004838:	00804074 	movhi	r2,257
 100483c:	10808504 	addi	r2,r2,532
 1004840:	10c01117 	ldw	r3,68(r2)
 1004844:	00804074 	movhi	r2,257
 1004848:	10808504 	addi	r2,r2,532
 100484c:	1080068b 	ldhu	r2,26(r2)
 1004850:	10bfffcc 	andi	r2,r2,65535
 1004854:	1887883a 	add	r3,r3,r2
 1004858:	00804074 	movhi	r2,257
 100485c:	10808504 	addi	r2,r2,532
 1004860:	10c01215 	stw	r3,72(r2)
				boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset =
 1004864:	00804074 	movhi	r2,257
 1004868:	10808504 	addi	r2,r2,532
 100486c:	10c01217 	ldw	r3,72(r2)
 1004870:	00804074 	movhi	r2,257
 1004874:	10808504 	addi	r2,r2,532
 1004878:	1080068b 	ldhu	r2,26(r2)
 100487c:	10bfffcc 	andi	r2,r2,65535
 1004880:	1887883a 	add	r3,r3,r2
 1004884:	00804074 	movhi	r2,257
 1004888:	10808504 	addi	r2,r2,532
 100488c:	10c01315 	stw	r3,76(r2)
				boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset =
 1004890:	00804074 	movhi	r2,257
 1004894:	10808504 	addi	r2,r2,532
 1004898:	14001317 	ldw	r16,76(r2)
 100489c:	00804074 	movhi	r2,257
 10048a0:	10808504 	addi	r2,r2,532
 10048a4:	1080050b 	ldhu	r2,20(r2)
 10048a8:	10bfffcc 	andi	r2,r2,65535
 10048ac:	1008917a 	slli	r4,r2,5
 10048b0:	00804074 	movhi	r2,257
 10048b4:	10808504 	addi	r2,r2,532
 10048b8:	1080030b 	ldhu	r2,12(r2)
 10048bc:	117fffcc 	andi	r5,r2,65535
 10048c0:	100c5540 	call	100c554 <__divsi3>
 10048c4:	8087883a 	add	r3,r16,r2
 10048c8:	00804074 	movhi	r2,257
 10048cc:	10808504 	addi	r2,r2,532
 10048d0:	10c01415 	stw	r3,80(r2)
				boot_sector_data.root_directory_sector_offset
						+ (32 * boot_sector_data.max_number_of_dir_entires
								/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
 10048d4:	00804074 	movhi	r2,257
 10048d8:	10808504 	addi	r2,r2,532
 10048dc:	1080058b 	ldhu	r2,22(r2)
 10048e0:	10bfffcc 	andi	r2,r2,65535
 10048e4:	1005003a 	cmpeq	r2,r2,zero
 10048e8:	10000b1e 	bne	r2,zero,1004918 <Check_for_DOS_FAT+0x464>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
 10048ec:	00804074 	movhi	r2,257
 10048f0:	10808504 	addi	r2,r2,532
 10048f4:	1080058b 	ldhu	r2,22(r2)
 10048f8:	113fffcc 	andi	r4,r2,65535
 10048fc:	00804074 	movhi	r2,257
 1004900:	10808504 	addi	r2,r2,532
 1004904:	10800383 	ldbu	r2,14(r2)
 1004908:	11403fcc 	andi	r5,r2,255
 100490c:	100c5540 	call	100c554 <__divsi3>
 1004910:	e0bffb15 	stw	r2,-20(fp)
 1004914:	00000906 	br	100493c <Check_for_DOS_FAT+0x488>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
 1004918:	00804074 	movhi	r2,257
 100491c:	10808504 	addi	r2,r2,532
 1004920:	11000917 	ldw	r4,36(r2)
 1004924:	00804074 	movhi	r2,257
 1004928:	10808504 	addi	r2,r2,532
 100492c:	10800383 	ldbu	r2,14(r2)
 1004930:	11403fcc 	andi	r5,r2,255
 1004934:	100c6140 	call	100c614 <__udivsi3>
 1004938:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
 100493c:	e0bffb17 	ldw	r2,-20(fp)
 1004940:	1083fdc8 	cmpgei	r2,r2,4087
 1004944:	1000051e 	bne	r2,zero,100495c <Check_for_DOS_FAT+0x4a8>
			boot_sector_data.bits_for_cluster_index = 12;
 1004948:	00c04074 	movhi	r3,257
 100494c:	18c08504 	addi	r3,r3,532
 1004950:	00800304 	movi	r2,12
 1004954:	18801085 	stb	r2,66(r3)
 1004958:	00000c06 	br	100498c <Check_for_DOS_FAT+0x4d8>
		} else if (num_clusters <= 65517) {
 100495c:	e0fffb17 	ldw	r3,-20(fp)
 1004960:	00bffb54 	movui	r2,65517
 1004964:	10c00516 	blt	r2,r3,100497c <Check_for_DOS_FAT+0x4c8>
			boot_sector_data.bits_for_cluster_index = 16;
 1004968:	00c04074 	movhi	r3,257
 100496c:	18c08504 	addi	r3,r3,532
 1004970:	00800404 	movi	r2,16
 1004974:	18801085 	stb	r2,66(r3)
 1004978:	00000406 	br	100498c <Check_for_DOS_FAT+0x4d8>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
 100497c:	00c04074 	movhi	r3,257
 1004980:	18c08504 	addi	r3,r3,532
 1004984:	00800804 	movi	r2,32
 1004988:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
 100498c:	e03ffd15 	stw	zero,-12(fp)
 1004990:	00001106 	br	10049d8 <Check_for_DOS_FAT+0x524>
			boot_sector_data.volume_id[counter] =
 1004994:	e13ffd17 	ldw	r4,-12(fp)
 1004998:	d0a6c717 	ldw	r2,-25828(gp)
 100499c:	10800a17 	ldw	r2,40(r2)
 10049a0:	1007883a 	mov	r3,r2
 10049a4:	e0bffd17 	ldw	r2,-12(fp)
 10049a8:	1885883a 	add	r2,r3,r2
 10049ac:	108009c4 	addi	r2,r2,39
 10049b0:	10800023 	ldbuio	r2,0(r2)
 10049b4:	1007883a 	mov	r3,r2
 10049b8:	00804074 	movhi	r2,257
 10049bc:	10808504 	addi	r2,r2,532
 10049c0:	2085883a 	add	r2,r4,r2
 10049c4:	10800a04 	addi	r2,r2,40
 10049c8:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
 10049cc:	e0bffd17 	ldw	r2,-12(fp)
 10049d0:	10800044 	addi	r2,r2,1
 10049d4:	e0bffd15 	stw	r2,-12(fp)
 10049d8:	e0bffd17 	ldw	r2,-12(fp)
 10049dc:	10800110 	cmplti	r2,r2,4
 10049e0:	103fec1e 	bne	r2,zero,1004994 <Check_for_DOS_FAT+0x4e0>
			boot_sector_data.volume_id[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 10049e4:	e03ffd15 	stw	zero,-12(fp)
 10049e8:	00001106 	br	1004a30 <Check_for_DOS_FAT+0x57c>
			boot_sector_data.volume_label[counter] =
 10049ec:	e13ffd17 	ldw	r4,-12(fp)
 10049f0:	d0a6c717 	ldw	r2,-25828(gp)
 10049f4:	10800a17 	ldw	r2,40(r2)
 10049f8:	1007883a 	mov	r3,r2
 10049fc:	e0bffd17 	ldw	r2,-12(fp)
 1004a00:	1885883a 	add	r2,r3,r2
 1004a04:	10800ac4 	addi	r2,r2,43
 1004a08:	10800023 	ldbuio	r2,0(r2)
 1004a0c:	1007883a 	mov	r3,r2
 1004a10:	00804074 	movhi	r2,257
 1004a14:	10808504 	addi	r2,r2,532
 1004a18:	2085883a 	add	r2,r4,r2
 1004a1c:	10800b04 	addi	r2,r2,44
 1004a20:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 1004a24:	e0bffd17 	ldw	r2,-12(fp)
 1004a28:	10800044 	addi	r2,r2,1
 1004a2c:	e0bffd15 	stw	r2,-12(fp)
 1004a30:	e0bffd17 	ldw	r2,-12(fp)
 1004a34:	108002d0 	cmplti	r2,r2,11
 1004a38:	103fec1e 	bne	r2,zero,10049ec <Check_for_DOS_FAT+0x538>
			boot_sector_data.volume_label[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 1004a3c:	e03ffd15 	stw	zero,-12(fp)
 1004a40:	00001106 	br	1004a88 <Check_for_DOS_FAT+0x5d4>
			boot_sector_data.file_system_type[counter] =
 1004a44:	e13ffd17 	ldw	r4,-12(fp)
 1004a48:	d0a6c717 	ldw	r2,-25828(gp)
 1004a4c:	10800a17 	ldw	r2,40(r2)
 1004a50:	1007883a 	mov	r3,r2
 1004a54:	e0bffd17 	ldw	r2,-12(fp)
 1004a58:	1885883a 	add	r2,r3,r2
 1004a5c:	10800d84 	addi	r2,r2,54
 1004a60:	10800023 	ldbuio	r2,0(r2)
 1004a64:	1007883a 	mov	r3,r2
 1004a68:	00804074 	movhi	r2,257
 1004a6c:	10808504 	addi	r2,r2,532
 1004a70:	2085883a 	add	r2,r4,r2
 1004a74:	10800e04 	addi	r2,r2,56
 1004a78:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 1004a7c:	e0bffd17 	ldw	r2,-12(fp)
 1004a80:	10800044 	addi	r2,r2,1
 1004a84:	e0bffd15 	stw	r2,-12(fp)
 1004a88:	e0bffd17 	ldw	r2,-12(fp)
 1004a8c:	10800210 	cmplti	r2,r2,8
 1004a90:	103fec1e 	bne	r2,zero,1004a44 <Check_for_DOS_FAT+0x590>
			boot_sector_data.file_system_type[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 1004a94:	e03ffd15 	stw	zero,-12(fp)
 1004a98:	00000a06 	br	1004ac4 <Check_for_DOS_FAT+0x610>
			active_files[counter].in_use = false;
 1004a9c:	e0bffd17 	ldw	r2,-12(fp)
 1004aa0:	00c04074 	movhi	r3,257
 1004aa4:	18c09a04 	addi	r3,r3,616
 1004aa8:	100491ba 	slli	r2,r2,6
 1004aac:	10c5883a 	add	r2,r2,r3
 1004ab0:	10800f04 	addi	r2,r2,60
 1004ab4:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 1004ab8:	e0bffd17 	ldw	r2,-12(fp)
 1004abc:	10800044 	addi	r2,r2,1
 1004ac0:	e0bffd15 	stw	r2,-12(fp)
 1004ac4:	e0bffd17 	ldw	r2,-12(fp)
 1004ac8:	10800510 	cmplti	r2,r2,20
 1004acc:	103ff31e 	bne	r2,zero,1004a9c <Check_for_DOS_FAT+0x5e8>
			active_files[counter].in_use = false;
		}
		result = true;
 1004ad0:	00800044 	movi	r2,1
 1004ad4:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 1004ad8:	00000106 	br	1004ae0 <Check_for_DOS_FAT+0x62c>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
 1004adc:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
 1004ae0:	e0bffe17 	ldw	r2,-8(fp)
}
 1004ae4:	e037883a 	mov	sp,fp
 1004ae8:	dfc00217 	ldw	ra,8(sp)
 1004aec:	df000117 	ldw	fp,4(sp)
 1004af0:	dc000017 	ldw	r16,0(sp)
 1004af4:	dec00304 	addi	sp,sp,12
 1004af8:	f800283a 	ret

01004afc <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 1004afc:	defffc04 	addi	sp,sp,-16
 1004b00:	dfc00315 	stw	ra,12(sp)
 1004b04:	df000215 	stw	fp,8(sp)
 1004b08:	df000204 	addi	fp,sp,8
	bool result = false;
 1004b0c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 1004b10:	100684c0 	call	100684c <alt_up_sd_card_is_Present>
 1004b14:	1005003a 	cmpeq	r2,r2,zero
 1004b18:	1000331e 	bne	r2,zero,1004be8 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
 1004b1c:	0009883a 	mov	r4,zero
 1004b20:	000b883a 	mov	r5,zero
 1004b24:	1007fa40 	call	1007fa4 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
 1004b28:	d0a6c117 	ldw	r2,-25852(gp)
 1004b2c:	1080000b 	ldhu	r2,0(r2)
 1004b30:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
 1004b34:	d026c515 	stw	zero,-25836(gp)
		fat_partition_size_in_512_byte_sectors = 0;
 1004b38:	d026c615 	stw	zero,-25832(gp)

		if (((csd_file_format & 0x8000) == 0)
 1004b3c:	e0bffe0f 	ldh	r2,-8(fp)
 1004b40:	1004803a 	cmplt	r2,r2,zero
 1004b44:	1000281e 	bne	r2,zero,1004be8 <Look_for_FAT16+0xec>
 1004b48:	e0bffe0b 	ldhu	r2,-8(fp)
 1004b4c:	10bfffcc 	andi	r2,r2,65535
 1004b50:	1083000c 	andi	r2,r2,3072
 1004b54:	10830020 	cmpeqi	r2,r2,3072
 1004b58:	1000231e 	bne	r2,zero,1004be8 <Look_for_FAT16+0xec>
				&& ((csd_file_format & 0x0c00) != 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
 1004b5c:	e0bffe0b 	ldhu	r2,-8(fp)
 1004b60:	10bfffcc 	andi	r2,r2,65535
 1004b64:	1083000c 	andi	r2,r2,3072
 1004b68:	10810018 	cmpnei	r2,r2,1024
 1004b6c:	1000031e 	bne	r2,zero,1004b7c <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 1004b70:	0009883a 	mov	r4,zero
 1004b74:	10044b40 	call	10044b4 <Check_for_DOS_FAT>
 1004b78:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
 1004b7c:	e0bffe0b 	ldhu	r2,-8(fp)
 1004b80:	10bfffcc 	andi	r2,r2,65535
 1004b84:	1083000c 	andi	r2,r2,3072
 1004b88:	1004c03a 	cmpne	r2,r2,zero
 1004b8c:	1000061e 	bne	r2,zero,1004ba8 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
 1004b90:	1003dc80 	call	1003dc8 <Check_for_Master_Boot_Record>
 1004b94:	1005003a 	cmpeq	r2,r2,zero
 1004b98:	1000031e 	bne	r2,zero,1004ba8 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
 1004b9c:	d126c517 	ldw	r4,-25836(gp)
 1004ba0:	10044b40 	call	10044b4 <Check_for_DOS_FAT>
 1004ba4:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
 1004ba8:	e0bfff17 	ldw	r2,-4(fp)
 1004bac:	10800058 	cmpnei	r2,r2,1
 1004bb0:	10000d1e 	bne	r2,zero,1004be8 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
 1004bb4:	00804074 	movhi	r2,257
 1004bb8:	10808504 	addi	r2,r2,532
 1004bbc:	10801083 	ldbu	r2,66(r2)
 1004bc0:	10803fcc 	andi	r2,r2,255
 1004bc4:	10800420 	cmpeqi	r2,r2,16
 1004bc8:	1000021e 	bne	r2,zero,1004bd4 <Look_for_FAT16+0xd8>
					result = false;
 1004bcc:	e03fff15 	stw	zero,-4(fp)
 1004bd0:	00000506 	br	1004be8 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors =
 1004bd4:	00804074 	movhi	r2,257
 1004bd8:	10808504 	addi	r2,r2,532
 1004bdc:	1080058b 	ldhu	r2,22(r2)
 1004be0:	10bfffcc 	andi	r2,r2,65535
 1004be4:	d0a6c615 	stw	r2,-25832(gp)
							boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
 1004be8:	e0bfff17 	ldw	r2,-4(fp)
}
 1004bec:	e037883a 	mov	sp,fp
 1004bf0:	dfc00117 	ldw	ra,4(sp)
 1004bf4:	df000017 	ldw	fp,0(sp)
 1004bf8:	dec00204 	addi	sp,sp,8
 1004bfc:	f800283a 	ret

01004c00 <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 1004c00:	defffb04 	addi	sp,sp,-20
 1004c04:	dfc00415 	stw	ra,16(sp)
 1004c08:	df000315 	stw	fp,12(sp)
 1004c0c:	df000304 	addi	fp,sp,12
 1004c10:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
 1004c14:	e13fff17 	ldw	r4,-4(fp)
 1004c18:	100056c0 	call	100056c <strlen>
 1004c1c:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 1004c20:	e03ffe15 	stw	zero,-8(fp)
 1004c24:	00002206 	br	1004cb0 <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
 1004c28:	e0bffe17 	ldw	r2,-8(fp)
 1004c2c:	1007883a 	mov	r3,r2
 1004c30:	e0bfff17 	ldw	r2,-4(fp)
 1004c34:	1885883a 	add	r2,r3,r2
 1004c38:	10800003 	ldbu	r2,0(r2)
 1004c3c:	10803fcc 	andi	r2,r2,255
 1004c40:	1080201c 	xori	r2,r2,128
 1004c44:	10bfe004 	addi	r2,r2,-128
 1004c48:	10801850 	cmplti	r2,r2,97
 1004c4c:	1000151e 	bne	r2,zero,1004ca4 <filename_to_upper_case+0xa4>
 1004c50:	e0bffe17 	ldw	r2,-8(fp)
 1004c54:	1007883a 	mov	r3,r2
 1004c58:	e0bfff17 	ldw	r2,-4(fp)
 1004c5c:	1885883a 	add	r2,r3,r2
 1004c60:	10800003 	ldbu	r2,0(r2)
 1004c64:	10803fcc 	andi	r2,r2,255
 1004c68:	1080201c 	xori	r2,r2,128
 1004c6c:	10bfe004 	addi	r2,r2,-128
 1004c70:	10801ec8 	cmpgei	r2,r2,123
 1004c74:	10000b1e 	bne	r2,zero,1004ca4 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
 1004c78:	e0bffe17 	ldw	r2,-8(fp)
 1004c7c:	1007883a 	mov	r3,r2
 1004c80:	e0bfff17 	ldw	r2,-4(fp)
 1004c84:	1889883a 	add	r4,r3,r2
 1004c88:	e0bffe17 	ldw	r2,-8(fp)
 1004c8c:	1007883a 	mov	r3,r2
 1004c90:	e0bfff17 	ldw	r2,-4(fp)
 1004c94:	1885883a 	add	r2,r3,r2
 1004c98:	10800003 	ldbu	r2,0(r2)
 1004c9c:	10bff804 	addi	r2,r2,-32
 1004ca0:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
 1004ca4:	e0bffe17 	ldw	r2,-8(fp)
 1004ca8:	10800044 	addi	r2,r2,1
 1004cac:	e0bffe15 	stw	r2,-8(fp)
 1004cb0:	e0fffe17 	ldw	r3,-8(fp)
 1004cb4:	e0bffd17 	ldw	r2,-12(fp)
 1004cb8:	18bfdb16 	blt	r3,r2,1004c28 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
 1004cbc:	e037883a 	mov	sp,fp
 1004cc0:	dfc00117 	ldw	ra,4(sp)
 1004cc4:	df000017 	ldw	fp,0(sp)
 1004cc8:	dec00204 	addi	sp,sp,8
 1004ccc:	f800283a 	ret

01004cd0 <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 1004cd0:	defff804 	addi	sp,sp,-32
 1004cd4:	dfc00715 	stw	ra,28(sp)
 1004cd8:	df000615 	stw	fp,24(sp)
 1004cdc:	df000604 	addi	fp,sp,24
 1004ce0:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
 1004ce4:	e13fff17 	ldw	r4,-4(fp)
 1004ce8:	100056c0 	call	100056c <strlen>
 1004cec:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
 1004cf0:	00bfffc4 	movi	r2,-1
 1004cf4:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
 1004cf8:	00bfffc4 	movi	r2,-1
 1004cfc:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
 1004d00:	00800044 	movi	r2,1
 1004d04:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
 1004d08:	e03ffd15 	stw	zero,-12(fp)
 1004d0c:	00007606 	br	1004ee8 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ')
 1004d10:	e0bffd17 	ldw	r2,-12(fp)
 1004d14:	1007883a 	mov	r3,r2
 1004d18:	e0bfff17 	ldw	r2,-4(fp)
 1004d1c:	1885883a 	add	r2,r3,r2
 1004d20:	10800003 	ldbu	r2,0(r2)
 1004d24:	10803fcc 	andi	r2,r2,255
 1004d28:	1080201c 	xori	r2,r2,128
 1004d2c:	10bfe004 	addi	r2,r2,-128
 1004d30:	10800820 	cmpeqi	r2,r2,32
 1004d34:	1000431e 	bne	r2,zero,1004e44 <check_file_name_for_FAT16_compliance+0x174>
 1004d38:	e0bffd17 	ldw	r2,-12(fp)
 1004d3c:	10ffffc4 	addi	r3,r2,-1
 1004d40:	e0bffc17 	ldw	r2,-16(fp)
 1004d44:	1880141e 	bne	r3,r2,1004d98 <check_file_name_for_FAT16_compliance+0xc8>
 1004d48:	e0bffd17 	ldw	r2,-12(fp)
 1004d4c:	1007883a 	mov	r3,r2
 1004d50:	e0bfff17 	ldw	r2,-4(fp)
 1004d54:	1885883a 	add	r2,r3,r2
 1004d58:	10800003 	ldbu	r2,0(r2)
 1004d5c:	10803fcc 	andi	r2,r2,255
 1004d60:	1080201c 	xori	r2,r2,128
 1004d64:	10bfe004 	addi	r2,r2,-128
 1004d68:	10801720 	cmpeqi	r2,r2,92
 1004d6c:	1000351e 	bne	r2,zero,1004e44 <check_file_name_for_FAT16_compliance+0x174>
 1004d70:	e0bffd17 	ldw	r2,-12(fp)
 1004d74:	1007883a 	mov	r3,r2
 1004d78:	e0bfff17 	ldw	r2,-4(fp)
 1004d7c:	1885883a 	add	r2,r3,r2
 1004d80:	10800003 	ldbu	r2,0(r2)
 1004d84:	10803fcc 	andi	r2,r2,255
 1004d88:	1080201c 	xori	r2,r2,128
 1004d8c:	10bfe004 	addi	r2,r2,-128
 1004d90:	10800be0 	cmpeqi	r2,r2,47
 1004d94:	10002b1e 	bne	r2,zero,1004e44 <check_file_name_for_FAT16_compliance+0x174>
 1004d98:	e0fffd17 	ldw	r3,-12(fp)
 1004d9c:	e0bffb17 	ldw	r2,-20(fp)
 1004da0:	1885c83a 	sub	r2,r3,r2
 1004da4:	10800258 	cmpnei	r2,r2,9
 1004da8:	10000a1e 	bne	r2,zero,1004dd4 <check_file_name_for_FAT16_compliance+0x104>
 1004dac:	e0bffd17 	ldw	r2,-12(fp)
 1004db0:	1007883a 	mov	r3,r2
 1004db4:	e0bfff17 	ldw	r2,-4(fp)
 1004db8:	1885883a 	add	r2,r3,r2
 1004dbc:	10800003 	ldbu	r2,0(r2)
 1004dc0:	10803fcc 	andi	r2,r2,255
 1004dc4:	1080201c 	xori	r2,r2,128
 1004dc8:	10bfe004 	addi	r2,r2,-128
 1004dcc:	10800b98 	cmpnei	r2,r2,46
 1004dd0:	10001c1e 	bne	r2,zero,1004e44 <check_file_name_for_FAT16_compliance+0x174>
 1004dd4:	e0fffc17 	ldw	r3,-16(fp)
 1004dd8:	e0bffb17 	ldw	r2,-20(fp)
 1004ddc:	18801b26 	beq	r3,r2,1004e4c <check_file_name_for_FAT16_compliance+0x17c>
 1004de0:	e0fffd17 	ldw	r3,-12(fp)
 1004de4:	e0bffb17 	ldw	r2,-20(fp)
 1004de8:	1885c83a 	sub	r2,r3,r2
 1004dec:	10800110 	cmplti	r2,r2,4
 1004df0:	1000161e 	bne	r2,zero,1004e4c <check_file_name_for_FAT16_compliance+0x17c>
 1004df4:	e0bffd17 	ldw	r2,-12(fp)
 1004df8:	1007883a 	mov	r3,r2
 1004dfc:	e0bfff17 	ldw	r2,-4(fp)
 1004e00:	1885883a 	add	r2,r3,r2
 1004e04:	10800003 	ldbu	r2,0(r2)
 1004e08:	10803fcc 	andi	r2,r2,255
 1004e0c:	1080201c 	xori	r2,r2,128
 1004e10:	10bfe004 	addi	r2,r2,-128
 1004e14:	10801720 	cmpeqi	r2,r2,92
 1004e18:	10000c1e 	bne	r2,zero,1004e4c <check_file_name_for_FAT16_compliance+0x17c>
 1004e1c:	e0bffd17 	ldw	r2,-12(fp)
 1004e20:	1007883a 	mov	r3,r2
 1004e24:	e0bfff17 	ldw	r2,-4(fp)
 1004e28:	1885883a 	add	r2,r3,r2
 1004e2c:	10800003 	ldbu	r2,0(r2)
 1004e30:	10803fcc 	andi	r2,r2,255
 1004e34:	1080201c 	xori	r2,r2,128
 1004e38:	10bfe004 	addi	r2,r2,-128
 1004e3c:	10800be0 	cmpeqi	r2,r2,47
 1004e40:	1000021e 	bne	r2,zero,1004e4c <check_file_name_for_FAT16_compliance+0x17c>
				|| ((index - last_period == 9) && (file_name[index] != '.'))
				|| ((last_dir_break_position != last_period)
						&& (index - last_period > 3)
						&& (file_name[index] != '\\')
						&& (file_name[index] != '/'))) {
			result = false;
 1004e44:	e03ffa15 	stw	zero,-24(fp)
			break;
 1004e48:	00002a06 	br	1004ef4 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
 1004e4c:	e0bffd17 	ldw	r2,-12(fp)
 1004e50:	1007883a 	mov	r3,r2
 1004e54:	e0bfff17 	ldw	r2,-4(fp)
 1004e58:	1885883a 	add	r2,r3,r2
 1004e5c:	10800003 	ldbu	r2,0(r2)
 1004e60:	10803fcc 	andi	r2,r2,255
 1004e64:	1080201c 	xori	r2,r2,128
 1004e68:	10bfe004 	addi	r2,r2,-128
 1004e6c:	10801720 	cmpeqi	r2,r2,92
 1004e70:	10000a1e 	bne	r2,zero,1004e9c <check_file_name_for_FAT16_compliance+0x1cc>
 1004e74:	e0bffd17 	ldw	r2,-12(fp)
 1004e78:	1007883a 	mov	r3,r2
 1004e7c:	e0bfff17 	ldw	r2,-4(fp)
 1004e80:	1885883a 	add	r2,r3,r2
 1004e84:	10800003 	ldbu	r2,0(r2)
 1004e88:	10803fcc 	andi	r2,r2,255
 1004e8c:	1080201c 	xori	r2,r2,128
 1004e90:	10bfe004 	addi	r2,r2,-128
 1004e94:	10800bd8 	cmpnei	r2,r2,47
 1004e98:	1000041e 	bne	r2,zero,1004eac <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
 1004e9c:	e0bffd17 	ldw	r2,-12(fp)
 1004ea0:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
 1004ea4:	e0bffd17 	ldw	r2,-12(fp)
 1004ea8:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
 1004eac:	e0bffd17 	ldw	r2,-12(fp)
 1004eb0:	1007883a 	mov	r3,r2
 1004eb4:	e0bfff17 	ldw	r2,-4(fp)
 1004eb8:	1885883a 	add	r2,r3,r2
 1004ebc:	10800003 	ldbu	r2,0(r2)
 1004ec0:	10803fcc 	andi	r2,r2,255
 1004ec4:	1080201c 	xori	r2,r2,128
 1004ec8:	10bfe004 	addi	r2,r2,-128
 1004ecc:	10800b98 	cmpnei	r2,r2,46
 1004ed0:	1000021e 	bne	r2,zero,1004edc <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
 1004ed4:	e0bffd17 	ldw	r2,-12(fp)
 1004ed8:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
 1004edc:	e0bffd17 	ldw	r2,-12(fp)
 1004ee0:	10800044 	addi	r2,r2,1
 1004ee4:	e0bffd15 	stw	r2,-12(fp)
 1004ee8:	e0fffd17 	ldw	r3,-12(fp)
 1004eec:	e0bffe17 	ldw	r2,-8(fp)
 1004ef0:	18bf8716 	blt	r3,r2,1004d10 <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
 1004ef4:	e0fffe17 	ldw	r3,-8(fp)
 1004ef8:	e0bfff17 	ldw	r2,-4(fp)
 1004efc:	1885883a 	add	r2,r3,r2
 1004f00:	10bfffc4 	addi	r2,r2,-1
 1004f04:	10800003 	ldbu	r2,0(r2)
 1004f08:	10803fcc 	andi	r2,r2,255
 1004f0c:	1080201c 	xori	r2,r2,128
 1004f10:	10bfe004 	addi	r2,r2,-128
 1004f14:	10801720 	cmpeqi	r2,r2,92
 1004f18:	10000a1e 	bne	r2,zero,1004f44 <check_file_name_for_FAT16_compliance+0x274>
 1004f1c:	e0fffe17 	ldw	r3,-8(fp)
 1004f20:	e0bfff17 	ldw	r2,-4(fp)
 1004f24:	1885883a 	add	r2,r3,r2
 1004f28:	10bfffc4 	addi	r2,r2,-1
 1004f2c:	10800003 	ldbu	r2,0(r2)
 1004f30:	10803fcc 	andi	r2,r2,255
 1004f34:	1080201c 	xori	r2,r2,128
 1004f38:	10bfe004 	addi	r2,r2,-128
 1004f3c:	10800bd8 	cmpnei	r2,r2,47
 1004f40:	1000011e 	bne	r2,zero,1004f48 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
 1004f44:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
 1004f48:	e0bffa17 	ldw	r2,-24(fp)
}
 1004f4c:	e037883a 	mov	sp,fp
 1004f50:	dfc00117 	ldw	ra,4(sp)
 1004f54:	df000017 	ldw	fp,0(sp)
 1004f58:	dec00204 	addi	sp,sp,8
 1004f5c:	f800283a 	ret

01004f60 <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 1004f60:	defffb04 	addi	sp,sp,-20
 1004f64:	dfc00415 	stw	ra,16(sp)
 1004f68:	df000315 	stw	fp,12(sp)
 1004f6c:	df000304 	addi	fp,sp,12
 1004f70:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
 1004f74:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
 1004f78:	e13fff17 	ldw	r4,-4(fp)
 1004f7c:	100056c0 	call	100056c <strlen>
 1004f80:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 1004f84:	e03ffe15 	stw	zero,-8(fp)
 1004f88:	00001706 	br	1004fe8 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
 1004f8c:	e0bffe17 	ldw	r2,-8(fp)
 1004f90:	1007883a 	mov	r3,r2
 1004f94:	e0bfff17 	ldw	r2,-4(fp)
 1004f98:	1885883a 	add	r2,r3,r2
 1004f9c:	10800003 	ldbu	r2,0(r2)
 1004fa0:	10803fcc 	andi	r2,r2,255
 1004fa4:	1080201c 	xori	r2,r2,128
 1004fa8:	10bfe004 	addi	r2,r2,-128
 1004fac:	10801720 	cmpeqi	r2,r2,92
 1004fb0:	1000101e 	bne	r2,zero,1004ff4 <get_dir_divider_location+0x94>
 1004fb4:	e0bffe17 	ldw	r2,-8(fp)
 1004fb8:	1007883a 	mov	r3,r2
 1004fbc:	e0bfff17 	ldw	r2,-4(fp)
 1004fc0:	1885883a 	add	r2,r3,r2
 1004fc4:	10800003 	ldbu	r2,0(r2)
 1004fc8:	10803fcc 	andi	r2,r2,255
 1004fcc:	1080201c 	xori	r2,r2,128
 1004fd0:	10bfe004 	addi	r2,r2,-128
 1004fd4:	10800be0 	cmpeqi	r2,r2,47
 1004fd8:	1000061e 	bne	r2,zero,1004ff4 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
 1004fdc:	e0bffe17 	ldw	r2,-8(fp)
 1004fe0:	10800044 	addi	r2,r2,1
 1004fe4:	e0bffe15 	stw	r2,-8(fp)
 1004fe8:	e0fffe17 	ldw	r3,-8(fp)
 1004fec:	e0bffd17 	ldw	r2,-12(fp)
 1004ff0:	18bfe616 	blt	r3,r2,1004f8c <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
 1004ff4:	e0fffe17 	ldw	r3,-8(fp)
 1004ff8:	e0bffd17 	ldw	r2,-12(fp)
 1004ffc:	1880021e 	bne	r3,r2,1005008 <get_dir_divider_location+0xa8>
		index = -1;
 1005000:	00bfffc4 	movi	r2,-1
 1005004:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
 1005008:	e0bffe17 	ldw	r2,-8(fp)
}
 100500c:	e037883a 	mov	sp,fp
 1005010:	dfc00117 	ldw	ra,4(sp)
 1005014:	df000017 	ldw	fp,0(sp)
 1005018:	dec00204 	addi	sp,sp,8
 100501c:	f800283a 	ret

01005020 <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 1005020:	defff604 	addi	sp,sp,-40
 1005024:	df000915 	stw	fp,36(sp)
 1005028:	df000904 	addi	fp,sp,36
 100502c:	e13ff915 	stw	r4,-28(fp)
 1005030:	e17ffa15 	stw	r5,-24(fp)
 1005034:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
 1005038:	00800044 	movi	r2,1
 100503c:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
 1005040:	e03ff715 	stw	zero,-36(fp)
 1005044:	00005006 	br	1005188 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
 1005048:	e0fff717 	ldw	r3,-36(fp)
 100504c:	e0bff917 	ldw	r2,-28(fp)
 1005050:	10c5883a 	add	r2,r2,r3
 1005054:	10800003 	ldbu	r2,0(r2)
 1005058:	10803fcc 	andi	r2,r2,255
 100505c:	10801870 	cmpltui	r2,r2,97
 1005060:	1000111e 	bne	r2,zero,10050a8 <match_file_record_to_name_ext+0x88>
 1005064:	e0fff717 	ldw	r3,-36(fp)
 1005068:	e0bff917 	ldw	r2,-28(fp)
 100506c:	10c5883a 	add	r2,r2,r3
 1005070:	10800003 	ldbu	r2,0(r2)
 1005074:	10803fcc 	andi	r2,r2,255
 1005078:	10801ee8 	cmpgeui	r2,r2,123
 100507c:	10000a1e 	bne	r2,zero,10050a8 <match_file_record_to_name_ext+0x88>
 1005080:	e0fff717 	ldw	r3,-36(fp)
 1005084:	e0bff917 	ldw	r2,-28(fp)
 1005088:	10c5883a 	add	r2,r2,r3
 100508c:	10800003 	ldbu	r2,0(r2)
 1005090:	10bff804 	addi	r2,r2,-32
 1005094:	10803fcc 	andi	r2,r2,255
 1005098:	1080201c 	xori	r2,r2,128
 100509c:	10bfe004 	addi	r2,r2,-128
 10050a0:	e0bfff15 	stw	r2,-4(fp)
 10050a4:	00000806 	br	10050c8 <match_file_record_to_name_ext+0xa8>
 10050a8:	e0fff717 	ldw	r3,-36(fp)
 10050ac:	e0bff917 	ldw	r2,-28(fp)
 10050b0:	10c5883a 	add	r2,r2,r3
 10050b4:	10800003 	ldbu	r2,0(r2)
 10050b8:	10803fcc 	andi	r2,r2,255
 10050bc:	1080201c 	xori	r2,r2,128
 10050c0:	10bfe004 	addi	r2,r2,-128
 10050c4:	e0bfff15 	stw	r2,-4(fp)
 10050c8:	e0bff717 	ldw	r2,-36(fp)
 10050cc:	1007883a 	mov	r3,r2
 10050d0:	e0bffa17 	ldw	r2,-24(fp)
 10050d4:	1885883a 	add	r2,r3,r2
 10050d8:	10800003 	ldbu	r2,0(r2)
 10050dc:	10803fcc 	andi	r2,r2,255
 10050e0:	1080201c 	xori	r2,r2,128
 10050e4:	10bfe004 	addi	r2,r2,-128
 10050e8:	10801850 	cmplti	r2,r2,97
 10050ec:	1000151e 	bne	r2,zero,1005144 <match_file_record_to_name_ext+0x124>
 10050f0:	e0bff717 	ldw	r2,-36(fp)
 10050f4:	1007883a 	mov	r3,r2
 10050f8:	e0bffa17 	ldw	r2,-24(fp)
 10050fc:	1885883a 	add	r2,r3,r2
 1005100:	10800003 	ldbu	r2,0(r2)
 1005104:	10803fcc 	andi	r2,r2,255
 1005108:	1080201c 	xori	r2,r2,128
 100510c:	10bfe004 	addi	r2,r2,-128
 1005110:	10801ec8 	cmpgei	r2,r2,123
 1005114:	10000b1e 	bne	r2,zero,1005144 <match_file_record_to_name_ext+0x124>
 1005118:	e0bff717 	ldw	r2,-36(fp)
 100511c:	1007883a 	mov	r3,r2
 1005120:	e0bffa17 	ldw	r2,-24(fp)
 1005124:	1885883a 	add	r2,r3,r2
 1005128:	10800003 	ldbu	r2,0(r2)
 100512c:	10bff804 	addi	r2,r2,-32
 1005130:	10803fcc 	andi	r2,r2,255
 1005134:	1080201c 	xori	r2,r2,128
 1005138:	10bfe004 	addi	r2,r2,-128
 100513c:	e0bffe15 	stw	r2,-8(fp)
 1005140:	00000906 	br	1005168 <match_file_record_to_name_ext+0x148>
 1005144:	e0bff717 	ldw	r2,-36(fp)
 1005148:	1007883a 	mov	r3,r2
 100514c:	e0bffa17 	ldw	r2,-24(fp)
 1005150:	1885883a 	add	r2,r3,r2
 1005154:	10800003 	ldbu	r2,0(r2)
 1005158:	10803fcc 	andi	r2,r2,255
 100515c:	1080201c 	xori	r2,r2,128
 1005160:	10bfe004 	addi	r2,r2,-128
 1005164:	e0bffe15 	stw	r2,-8(fp)
 1005168:	e0bfff17 	ldw	r2,-4(fp)
 100516c:	e0fffe17 	ldw	r3,-8(fp)
 1005170:	10c00226 	beq	r2,r3,100517c <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
 1005174:	e03ff815 	stw	zero,-32(fp)
			break;
 1005178:	00000606 	br	1005194 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
 100517c:	e0bff717 	ldw	r2,-36(fp)
 1005180:	10800044 	addi	r2,r2,1
 1005184:	e0bff715 	stw	r2,-36(fp)
 1005188:	e0bff717 	ldw	r2,-36(fp)
 100518c:	10800210 	cmplti	r2,r2,8
 1005190:	103fad1e 	bne	r2,zero,1005048 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 1005194:	e03ff715 	stw	zero,-36(fp)
 1005198:	00005406 	br	10052ec <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
 100519c:	e0fff717 	ldw	r3,-36(fp)
 10051a0:	e0bff917 	ldw	r2,-28(fp)
 10051a4:	1885883a 	add	r2,r3,r2
 10051a8:	10800204 	addi	r2,r2,8
 10051ac:	10800003 	ldbu	r2,0(r2)
 10051b0:	10803fcc 	andi	r2,r2,255
 10051b4:	10801870 	cmpltui	r2,r2,97
 10051b8:	1000131e 	bne	r2,zero,1005208 <match_file_record_to_name_ext+0x1e8>
 10051bc:	e0fff717 	ldw	r3,-36(fp)
 10051c0:	e0bff917 	ldw	r2,-28(fp)
 10051c4:	1885883a 	add	r2,r3,r2
 10051c8:	10800204 	addi	r2,r2,8
 10051cc:	10800003 	ldbu	r2,0(r2)
 10051d0:	10803fcc 	andi	r2,r2,255
 10051d4:	10801ee8 	cmpgeui	r2,r2,123
 10051d8:	10000b1e 	bne	r2,zero,1005208 <match_file_record_to_name_ext+0x1e8>
 10051dc:	e0fff717 	ldw	r3,-36(fp)
 10051e0:	e0bff917 	ldw	r2,-28(fp)
 10051e4:	1885883a 	add	r2,r3,r2
 10051e8:	10800204 	addi	r2,r2,8
 10051ec:	10800003 	ldbu	r2,0(r2)
 10051f0:	10bff804 	addi	r2,r2,-32
 10051f4:	10803fcc 	andi	r2,r2,255
 10051f8:	1080201c 	xori	r2,r2,128
 10051fc:	10bfe004 	addi	r2,r2,-128
 1005200:	e0bffd15 	stw	r2,-12(fp)
 1005204:	00000906 	br	100522c <match_file_record_to_name_ext+0x20c>
 1005208:	e0fff717 	ldw	r3,-36(fp)
 100520c:	e0bff917 	ldw	r2,-28(fp)
 1005210:	1885883a 	add	r2,r3,r2
 1005214:	10800204 	addi	r2,r2,8
 1005218:	10800003 	ldbu	r2,0(r2)
 100521c:	10803fcc 	andi	r2,r2,255
 1005220:	1080201c 	xori	r2,r2,128
 1005224:	10bfe004 	addi	r2,r2,-128
 1005228:	e0bffd15 	stw	r2,-12(fp)
 100522c:	e0bff717 	ldw	r2,-36(fp)
 1005230:	1007883a 	mov	r3,r2
 1005234:	e0bffb17 	ldw	r2,-20(fp)
 1005238:	1885883a 	add	r2,r3,r2
 100523c:	10800003 	ldbu	r2,0(r2)
 1005240:	10803fcc 	andi	r2,r2,255
 1005244:	1080201c 	xori	r2,r2,128
 1005248:	10bfe004 	addi	r2,r2,-128
 100524c:	10801850 	cmplti	r2,r2,97
 1005250:	1000151e 	bne	r2,zero,10052a8 <match_file_record_to_name_ext+0x288>
 1005254:	e0bff717 	ldw	r2,-36(fp)
 1005258:	1007883a 	mov	r3,r2
 100525c:	e0bffb17 	ldw	r2,-20(fp)
 1005260:	1885883a 	add	r2,r3,r2
 1005264:	10800003 	ldbu	r2,0(r2)
 1005268:	10803fcc 	andi	r2,r2,255
 100526c:	1080201c 	xori	r2,r2,128
 1005270:	10bfe004 	addi	r2,r2,-128
 1005274:	10801ec8 	cmpgei	r2,r2,123
 1005278:	10000b1e 	bne	r2,zero,10052a8 <match_file_record_to_name_ext+0x288>
 100527c:	e0bff717 	ldw	r2,-36(fp)
 1005280:	1007883a 	mov	r3,r2
 1005284:	e0bffb17 	ldw	r2,-20(fp)
 1005288:	1885883a 	add	r2,r3,r2
 100528c:	10800003 	ldbu	r2,0(r2)
 1005290:	10bff804 	addi	r2,r2,-32
 1005294:	10803fcc 	andi	r2,r2,255
 1005298:	1080201c 	xori	r2,r2,128
 100529c:	10bfe004 	addi	r2,r2,-128
 10052a0:	e0bffc15 	stw	r2,-16(fp)
 10052a4:	00000906 	br	10052cc <match_file_record_to_name_ext+0x2ac>
 10052a8:	e0bff717 	ldw	r2,-36(fp)
 10052ac:	1007883a 	mov	r3,r2
 10052b0:	e0bffb17 	ldw	r2,-20(fp)
 10052b4:	1885883a 	add	r2,r3,r2
 10052b8:	10800003 	ldbu	r2,0(r2)
 10052bc:	10803fcc 	andi	r2,r2,255
 10052c0:	1080201c 	xori	r2,r2,128
 10052c4:	10bfe004 	addi	r2,r2,-128
 10052c8:	e0bffc15 	stw	r2,-16(fp)
 10052cc:	e0bffd17 	ldw	r2,-12(fp)
 10052d0:	e0fffc17 	ldw	r3,-16(fp)
 10052d4:	10c00226 	beq	r2,r3,10052e0 <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
 10052d8:	e03ff815 	stw	zero,-32(fp)
			break;
 10052dc:	00000606 	br	10052f8 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 10052e0:	e0bff717 	ldw	r2,-36(fp)
 10052e4:	10800044 	addi	r2,r2,1
 10052e8:	e0bff715 	stw	r2,-36(fp)
 10052ec:	e0bff717 	ldw	r2,-36(fp)
 10052f0:	108000d0 	cmplti	r2,r2,3
 10052f4:	103fa91e 	bne	r2,zero,100519c <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
 10052f8:	e0bff817 	ldw	r2,-32(fp)
}
 10052fc:	e037883a 	mov	sp,fp
 1005300:	df000017 	ldw	fp,0(sp)
 1005304:	dec00104 	addi	sp,sp,4
 1005308:	f800283a 	ret

0100530c <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 100530c:	deffe604 	addi	sp,sp,-104
 1005310:	dfc01915 	stw	ra,100(sp)
 1005314:	df001815 	stw	fp,96(sp)
 1005318:	df001804 	addi	fp,sp,96
 100531c:	e13ffc15 	stw	r4,-16(fp)
 1005320:	e17ffd15 	stw	r5,-12(fp)
 1005324:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
 1005328:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
 100532c:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
 1005330:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
 1005334:	e13ffc17 	ldw	r4,-16(fp)
 1005338:	1004f600 	call	1004f60 <get_dir_divider_location>
 100533c:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
 1005340:	00012206 	br	10057cc <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 1005344:	00800804 	movi	r2,32
 1005348:	e0bff805 	stb	r2,-32(fp)
 100534c:	00800804 	movi	r2,32
 1005350:	e0bff845 	stb	r2,-31(fp)
 1005354:	00800804 	movi	r2,32
 1005358:	e0bff885 	stb	r2,-30(fp)
 100535c:	00800804 	movi	r2,32
 1005360:	e0bff8c5 	stb	r2,-29(fp)
 1005364:	00800804 	movi	r2,32
 1005368:	e0bff905 	stb	r2,-28(fp)
 100536c:	00800804 	movi	r2,32
 1005370:	e0bff945 	stb	r2,-27(fp)
 1005374:	00800804 	movi	r2,32
 1005378:	e0bff985 	stb	r2,-26(fp)
 100537c:	00800804 	movi	r2,32
 1005380:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
 1005384:	00800804 	movi	r2,32
 1005388:	e0bffa05 	stb	r2,-24(fp)
 100538c:	00800804 	movi	r2,32
 1005390:	e0bffa45 	stb	r2,-23(fp)
 1005394:	00800804 	movi	r2,32
 1005398:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
 100539c:	00bfffc4 	movi	r2,-1
 10053a0:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
 10053a4:	e0bff617 	ldw	r2,-40(fp)
 10053a8:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 10053ac:	e03ff415 	stw	zero,-48(fp)
 10053b0:	00002e06 	br	100546c <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
 10053b4:	e0fff417 	ldw	r3,-48(fp)
 10053b8:	e0bff317 	ldw	r2,-52(fp)
 10053bc:	1885883a 	add	r2,r3,r2
 10053c0:	1007883a 	mov	r3,r2
 10053c4:	e0bffc17 	ldw	r2,-16(fp)
 10053c8:	1885883a 	add	r2,r3,r2
 10053cc:	10800003 	ldbu	r2,0(r2)
 10053d0:	10803fcc 	andi	r2,r2,255
 10053d4:	1080201c 	xori	r2,r2,128
 10053d8:	10bfe004 	addi	r2,r2,-128
 10053dc:	10800b98 	cmpnei	r2,r2,46
 10053e0:	1000031e 	bne	r2,zero,10053f0 <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
 10053e4:	e0bff417 	ldw	r2,-48(fp)
 10053e8:	e0bff215 	stw	r2,-56(fp)
 10053ec:	00001c06 	br	1005460 <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
 10053f0:	e0bff217 	ldw	r2,-56(fp)
 10053f4:	1004403a 	cmpge	r2,r2,zero
 10053f8:	10000c1e 	bne	r2,zero,100542c <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
 10053fc:	e13ff417 	ldw	r4,-48(fp)
 1005400:	e0fff417 	ldw	r3,-48(fp)
 1005404:	e0bff317 	ldw	r2,-52(fp)
 1005408:	1885883a 	add	r2,r3,r2
 100540c:	1007883a 	mov	r3,r2
 1005410:	e0bffc17 	ldw	r2,-16(fp)
 1005414:	1885883a 	add	r2,r3,r2
 1005418:	10c00003 	ldbu	r3,0(r2)
 100541c:	e0bff804 	addi	r2,fp,-32
 1005420:	1105883a 	add	r2,r2,r4
 1005424:	10c00005 	stb	r3,0(r2)
 1005428:	00000d06 	br	1005460 <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index] =
 100542c:	e0fff417 	ldw	r3,-48(fp)
 1005430:	e0bff217 	ldw	r2,-56(fp)
 1005434:	1889c83a 	sub	r4,r3,r2
 1005438:	e0fff417 	ldw	r3,-48(fp)
 100543c:	e0bff317 	ldw	r2,-52(fp)
 1005440:	1885883a 	add	r2,r3,r2
 1005444:	1007883a 	mov	r3,r2
 1005448:	e0bffc17 	ldw	r2,-16(fp)
 100544c:	1885883a 	add	r2,r3,r2
 1005450:	10c00003 	ldbu	r3,0(r2)
 1005454:	e0bffa04 	addi	r2,fp,-24
 1005458:	1105883a 	add	r2,r2,r4
 100545c:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 1005460:	e0bff417 	ldw	r2,-48(fp)
 1005464:	10800044 	addi	r2,r2,1
 1005468:	e0bff415 	stw	r2,-48(fp)
 100546c:	e0fff417 	ldw	r3,-48(fp)
 1005470:	e0bff517 	ldw	r2,-44(fp)
 1005474:	18bfcf16 	blt	r3,r2,10053b4 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index] =
						file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
 1005478:	e0bff617 	ldw	r2,-40(fp)
 100547c:	1004c03a 	cmpne	r2,r2,zero
 1005480:	1000551e 	bne	r2,zero,10055d8 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 1005484:	00804074 	movhi	r2,257
 1005488:	10808504 	addi	r2,r2,532
 100548c:	1080050b 	ldhu	r2,20(r2)
 1005490:	10bfffcc 	andi	r2,r2,65535
 1005494:	1008917a 	slli	r4,r2,5
 1005498:	00804074 	movhi	r2,257
 100549c:	10808504 	addi	r2,r2,532
 10054a0:	1080030b 	ldhu	r2,12(r2)
 10054a4:	117fffcc 	andi	r5,r2,65535
 10054a8:	100c5540 	call	100c554 <__divsi3>
 10054ac:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 10054b0:	e03fef15 	stw	zero,-68(fp)
 10054b4:	00003806 	br	1005598 <get_home_directory_cluster_for_file+0x28c>
					sector_index++) {
				if (Read_Sector_Data(
 10054b8:	00804074 	movhi	r2,257
 10054bc:	10808504 	addi	r2,r2,532
 10054c0:	10c01317 	ldw	r3,76(r2)
 10054c4:	e0bfef17 	ldw	r2,-68(fp)
 10054c8:	1885883a 	add	r2,r3,r2
 10054cc:	1009883a 	mov	r4,r2
 10054d0:	d166c517 	ldw	r5,-25836(gp)
 10054d4:	1003b300 	call	1003b30 <Read_Sector_Data>
 10054d8:	1005003a 	cmpeq	r2,r2,zero
 10054dc:	1000311e 	bne	r2,zero,10055a4 <get_home_directory_cluster_for_file+0x298>
						sector_index
								+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 10054e0:	e03fee15 	stw	zero,-72(fp)
 10054e4:	00002306 	br	1005574 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 10054e8:	e0bfee17 	ldw	r2,-72(fp)
 10054ec:	1008917a 	slli	r4,r2,5
 10054f0:	e1ffef17 	ldw	r7,-68(fp)
 10054f4:	e17ffe17 	ldw	r5,-8(fp)
 10054f8:	000d883a 	mov	r6,zero
 10054fc:	1003f780 	call	1003f78 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
 1005500:	e0bffe17 	ldw	r2,-8(fp)
 1005504:	10800003 	ldbu	r2,0(r2)
 1005508:	10803fcc 	andi	r2,r2,255
 100550c:	10803960 	cmpeqi	r2,r2,229
 1005510:	1000151e 	bne	r2,zero,1005568 <get_home_directory_cluster_for_file+0x25c>
 1005514:	e0bffe17 	ldw	r2,-8(fp)
 1005518:	10800003 	ldbu	r2,0(r2)
 100551c:	10803fcc 	andi	r2,r2,255
 1005520:	1005003a 	cmpeq	r2,r2,zero
 1005524:	1000101e 	bne	r2,zero,1005568 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 1005528:	e17ff804 	addi	r5,fp,-32
 100552c:	e1bffa04 	addi	r6,fp,-24
 1005530:	e13ffe17 	ldw	r4,-8(fp)
 1005534:	10050200 	call	1005020 <match_file_record_to_name_ext>
 1005538:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
 100553c:	e0bfed17 	ldw	r2,-76(fp)
 1005540:	1005003a 	cmpeq	r2,r2,zero
 1005544:	1000081e 	bne	r2,zero,1005568 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
 1005548:	e0bffe17 	ldw	r2,-8(fp)
 100554c:	1080058b 	ldhu	r2,22(r2)
 1005550:	10bfffcc 	andi	r2,r2,65535
 1005554:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 1005558:	e0fffe17 	ldw	r3,-8(fp)
 100555c:	00800044 	movi	r2,1
 1005560:	18800a15 	stw	r2,40(r3)
								break;
 1005564:	00000606 	br	1005580 <get_home_directory_cluster_for_file+0x274>
						sector_index
								+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1005568:	e0bfee17 	ldw	r2,-72(fp)
 100556c:	10800044 	addi	r2,r2,1
 1005570:	e0bfee15 	stw	r2,-72(fp)
 1005574:	e0bfee17 	ldw	r2,-72(fp)
 1005578:	10800410 	cmplti	r2,r2,16
 100557c:	103fda1e 	bne	r2,zero,10054e8 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
 1005580:	e0fff117 	ldw	r3,-60(fp)
 1005584:	e0bff617 	ldw	r2,-40(fp)
 1005588:	1880061e 	bne	r3,r2,10055a4 <get_home_directory_cluster_for_file+0x298>
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
					sector_index++) {
 100558c:	e0bfef17 	ldw	r2,-68(fp)
 1005590:	10800044 	addi	r2,r2,1
 1005594:	e0bfef15 	stw	r2,-68(fp)
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 1005598:	e0ffef17 	ldw	r3,-68(fp)
 100559c:	e0bff017 	ldw	r2,-64(fp)
 10055a0:	18bfc516 	blt	r3,r2,10054b8 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
 10055a4:	e0fff117 	ldw	r3,-60(fp)
 10055a8:	e0bff617 	ldw	r2,-40(fp)
 10055ac:	18800826 	beq	r3,r2,10055d0 <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 10055b0:	e0bff117 	ldw	r2,-60(fp)
 10055b4:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 10055b8:	e0fff317 	ldw	r3,-52(fp)
 10055bc:	e0bff517 	ldw	r2,-44(fp)
 10055c0:	1885883a 	add	r2,r3,r2
 10055c4:	10800044 	addi	r2,r2,1
 10055c8:	e0bff315 	stw	r2,-52(fp)
 10055cc:	00007406 	br	10057a0 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 10055d0:	e03fff15 	stw	zero,-4(fp)
 10055d4:	00008c06 	br	1005808 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
 10055d8:	e0bff617 	ldw	r2,-40(fp)
 10055dc:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
 10055e0:	e0bfec17 	ldw	r2,-80(fp)
 10055e4:	113fff84 	addi	r4,r2,-2
 10055e8:	00804074 	movhi	r2,257
 10055ec:	10808504 	addi	r2,r2,532
 10055f0:	10800383 	ldbu	r2,14(r2)
 10055f4:	11403fcc 	andi	r5,r2,255
 10055f8:	1002dfc0 	call	1002dfc <__mulsi3>
 10055fc:	1007883a 	mov	r3,r2
 1005600:	00804074 	movhi	r2,257
 1005604:	10808504 	addi	r2,r2,532
 1005608:	10801417 	ldw	r2,80(r2)
 100560c:	1885883a 	add	r2,r3,r2
 1005610:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0;
 1005614:	e03fea15 	stw	zero,-88(fp)
						sector_index < boot_sector_data.sectors_per_cluster;
 1005618:	00003206 	br	10056e4 <get_home_directory_cluster_for_file+0x3d8>
						sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
 100561c:	e0ffea17 	ldw	r3,-88(fp)
 1005620:	e0bfeb17 	ldw	r2,-84(fp)
 1005624:	1889883a 	add	r4,r3,r2
 1005628:	d166c517 	ldw	r5,-25836(gp)
 100562c:	1003b300 	call	1003b30 <Read_Sector_Data>
 1005630:	1005003a 	cmpeq	r2,r2,zero
 1005634:	1000311e 	bne	r2,zero,10056fc <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 1005638:	e03fe915 	stw	zero,-92(fp)
 100563c:	00002006 	br	10056c0 <get_home_directory_cluster_for_file+0x3b4>
								file_counter++) {
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
 1005640:	e0bfe917 	ldw	r2,-92(fp)
 1005644:	1008917a 	slli	r4,r2,5
 1005648:	e1bfec17 	ldw	r6,-80(fp)
 100564c:	e1ffea17 	ldw	r7,-88(fp)
 1005650:	e17ffe17 	ldw	r5,-8(fp)
 1005654:	1003f780 	call	1003f78 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
 1005658:	e0bffe17 	ldw	r2,-8(fp)
 100565c:	10800003 	ldbu	r2,0(r2)
 1005660:	10803fcc 	andi	r2,r2,255
 1005664:	10803960 	cmpeqi	r2,r2,229
 1005668:	1000121e 	bne	r2,zero,10056b4 <get_home_directory_cluster_for_file+0x3a8>
 100566c:	e0bffe17 	ldw	r2,-8(fp)
 1005670:	10800003 	ldbu	r2,0(r2)
 1005674:	10803fcc 	andi	r2,r2,255
 1005678:	1005003a 	cmpeq	r2,r2,zero
 100567c:	10000d1e 	bne	r2,zero,10056b4 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
 1005680:	e17ff804 	addi	r5,fp,-32
 1005684:	e1bffa04 	addi	r6,fp,-24
 1005688:	e13ffe17 	ldw	r4,-8(fp)
 100568c:	10050200 	call	1005020 <match_file_record_to_name_ext>
 1005690:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
 1005694:	e0bfe817 	ldw	r2,-96(fp)
 1005698:	1005003a 	cmpeq	r2,r2,zero
 100569c:	1000051e 	bne	r2,zero,10056b4 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster =
 10056a0:	e0bffe17 	ldw	r2,-8(fp)
 10056a4:	1080058b 	ldhu	r2,22(r2)
 10056a8:	10bfffcc 	andi	r2,r2,65535
 10056ac:	e0bff115 	stw	r2,-60(fp)
											file_record->start_cluster_index;
									break;
 10056b0:	00000606 	br	10056cc <get_home_directory_cluster_for_file+0x3c0>
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
								file_counter++) {
 10056b4:	e0bfe917 	ldw	r2,-92(fp)
 10056b8:	10800044 	addi	r2,r2,1
 10056bc:	e0bfe915 	stw	r2,-92(fp)
						sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 10056c0:	e0bfe917 	ldw	r2,-92(fp)
 10056c4:	10800410 	cmplti	r2,r2,16
 10056c8:	103fdd1e 	bne	r2,zero,1005640 <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
 10056cc:	e0fff117 	ldw	r3,-60(fp)
 10056d0:	e0bff617 	ldw	r2,-40(fp)
 10056d4:	1880091e 	bne	r3,r2,10056fc <get_home_directory_cluster_for_file+0x3f0>
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
						sector_index < boot_sector_data.sectors_per_cluster;
						sector_index++) {
 10056d8:	e0bfea17 	ldw	r2,-88(fp)
 10056dc:	10800044 	addi	r2,r2,1
 10056e0:	e0bfea15 	stw	r2,-88(fp)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
						sector_index < boot_sector_data.sectors_per_cluster;
 10056e4:	00804074 	movhi	r2,257
 10056e8:	10808504 	addi	r2,r2,532
 10056ec:	10800383 	ldbu	r2,14(r2)
 10056f0:	10c03fcc 	andi	r3,r2,255
 10056f4:	e0bfea17 	ldw	r2,-88(fp)
 10056f8:	10ffc816 	blt	r2,r3,100561c <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
 10056fc:	e0fff117 	ldw	r3,-60(fp)
 1005700:	e0bff617 	ldw	r2,-40(fp)
 1005704:	1880131e 	bne	r3,r2,1005754 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
 1005708:	e13ff117 	ldw	r4,-60(fp)
 100570c:	e17ffb04 	addi	r5,fp,-20
 1005710:	1003c2c0 	call	1003c2c <get_cluster_flag>
 1005714:	1005003a 	cmpeq	r2,r2,zero
 1005718:	10000c1e 	bne	r2,zero,100574c <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 100571c:	e0bffb0b 	ldhu	r2,-20(fp)
 1005720:	10bfffcc 	andi	r2,r2,65535
 1005724:	10fffe0c 	andi	r3,r2,65528
 1005728:	00bffe14 	movui	r2,65528
 100572c:	1880021e 	bne	r3,r2,1005738 <get_home_directory_cluster_for_file+0x42c>
							return false;
 1005730:	e03fff15 	stw	zero,-4(fp)
 1005734:	00003406 	br	1005808 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 1005738:	e0bffb0b 	ldhu	r2,-20(fp)
 100573c:	10bfffcc 	andi	r2,r2,65535
 1005740:	10bffe0c 	andi	r2,r2,65528
 1005744:	e0bff115 	stw	r2,-60(fp)
 1005748:	00000206 	br	1005754 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
 100574c:	e03fff15 	stw	zero,-4(fp)
 1005750:	00002d06 	br	1005808 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 1005754:	e0ffec17 	ldw	r3,-80(fp)
 1005758:	00bffdd4 	movui	r2,65527
 100575c:	10c00316 	blt	r2,r3,100576c <get_home_directory_cluster_for_file+0x460>
 1005760:	e0fff117 	ldw	r3,-60(fp)
 1005764:	e0bff617 	ldw	r2,-40(fp)
 1005768:	18bf9d26 	beq	r3,r2,10055e0 <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
 100576c:	e0fff117 	ldw	r3,-60(fp)
 1005770:	e0bff617 	ldw	r2,-40(fp)
 1005774:	18800826 	beq	r3,r2,1005798 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 1005778:	e0bff117 	ldw	r2,-60(fp)
 100577c:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 1005780:	e0fff317 	ldw	r3,-52(fp)
 1005784:	e0bff517 	ldw	r2,-44(fp)
 1005788:	1885883a 	add	r2,r3,r2
 100578c:	10800044 	addi	r2,r2,1
 1005790:	e0bff315 	stw	r2,-52(fp)
 1005794:	00000206 	br	10057a0 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 1005798:	e03fff15 	stw	zero,-4(fp)
 100579c:	00001a06 	br	1005808 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
 10057a0:	e0bff317 	ldw	r2,-52(fp)
 10057a4:	1007883a 	mov	r3,r2
 10057a8:	e0bffc17 	ldw	r2,-16(fp)
 10057ac:	1889883a 	add	r4,r3,r2
 10057b0:	1004f600 	call	1004f60 <get_dir_divider_location>
 10057b4:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
 10057b8:	e0bff517 	ldw	r2,-44(fp)
 10057bc:	1004403a 	cmpge	r2,r2,zero
 10057c0:	1000021e 	bne	r2,zero,10057cc <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
 10057c4:	00800044 	movi	r2,1
 10057c8:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
 10057cc:	e0bff517 	ldw	r2,-44(fp)
 10057d0:	10800048 	cmpgei	r2,r2,1
 10057d4:	103edb1e 	bne	r2,zero,1005344 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
 10057d8:	e0fffd17 	ldw	r3,-12(fp)
 10057dc:	e0bff617 	ldw	r2,-40(fp)
 10057e0:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
 10057e4:	e0bff617 	ldw	r2,-40(fp)
 10057e8:	1004c03a 	cmpne	r2,r2,zero
 10057ec:	1000041e 	bne	r2,zero,1005800 <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
 10057f0:	e0bffe17 	ldw	r2,-8(fp)
 10057f4:	10000a15 	stw	zero,40(r2)
		result = true;
 10057f8:	00800044 	movi	r2,1
 10057fc:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
 1005800:	e0bff717 	ldw	r2,-36(fp)
 1005804:	e0bfff15 	stw	r2,-4(fp)
 1005808:	e0bfff17 	ldw	r2,-4(fp)
}
 100580c:	e037883a 	mov	sp,fp
 1005810:	dfc00117 	ldw	ra,4(sp)
 1005814:	df000017 	ldw	fp,0(sp)
 1005818:	dec00204 	addi	sp,sp,8
 100581c:	f800283a 	ret

01005820 <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 1005820:	deffe704 	addi	sp,sp,-100
 1005824:	dfc01815 	stw	ra,96(sp)
 1005828:	df001715 	stw	fp,92(sp)
 100582c:	df001704 	addi	fp,sp,92
 1005830:	e13ffc15 	stw	r4,-16(fp)
 1005834:	e17ffd15 	stw	r5,-12(fp)
 1005838:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
 100583c:	e13ffd17 	ldw	r4,-12(fp)
 1005840:	1004f600 	call	1004f60 <get_dir_divider_location>
 1005844:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
 1005848:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 100584c:	00800804 	movi	r2,32
 1005850:	e0bff805 	stb	r2,-32(fp)
 1005854:	00800804 	movi	r2,32
 1005858:	e0bff845 	stb	r2,-31(fp)
 100585c:	00800804 	movi	r2,32
 1005860:	e0bff885 	stb	r2,-30(fp)
 1005864:	00800804 	movi	r2,32
 1005868:	e0bff8c5 	stb	r2,-29(fp)
 100586c:	00800804 	movi	r2,32
 1005870:	e0bff905 	stb	r2,-28(fp)
 1005874:	00800804 	movi	r2,32
 1005878:	e0bff945 	stb	r2,-27(fp)
 100587c:	00800804 	movi	r2,32
 1005880:	e0bff985 	stb	r2,-26(fp)
 1005884:	00800804 	movi	r2,32
 1005888:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
 100588c:	00800804 	movi	r2,32
 1005890:	e0bffa05 	stb	r2,-24(fp)
 1005894:	00800804 	movi	r2,32
 1005898:	e0bffa45 	stb	r2,-23(fp)
 100589c:	00800804 	movi	r2,32
 10058a0:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
 10058a4:	00bfffc4 	movi	r2,-1
 10058a8:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
 10058ac:	e0bffc17 	ldw	r2,-16(fp)
 10058b0:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
 10058b4:	e13ffd17 	ldw	r4,-12(fp)
 10058b8:	100056c0 	call	100056c <strlen>
 10058bc:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
 10058c0:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
 10058c4:	00000b06 	br	10058f4 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
 10058c8:	e0fff617 	ldw	r3,-40(fp)
 10058cc:	e0bff717 	ldw	r2,-36(fp)
 10058d0:	1885883a 	add	r2,r3,r2
 10058d4:	10800044 	addi	r2,r2,1
 10058d8:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
 10058dc:	e0bff617 	ldw	r2,-40(fp)
 10058e0:	1007883a 	mov	r3,r2
 10058e4:	e0bffd17 	ldw	r2,-12(fp)
 10058e8:	1889883a 	add	r4,r3,r2
 10058ec:	1004f600 	call	1004f60 <get_dir_divider_location>
 10058f0:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
 10058f4:	e0bff717 	ldw	r2,-36(fp)
 10058f8:	10800048 	cmpgei	r2,r2,1
 10058fc:	103ff21e 	bne	r2,zero,10058c8 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 1005900:	e0bff617 	ldw	r2,-40(fp)
 1005904:	e0bff315 	stw	r2,-52(fp)
 1005908:	00002b06 	br	10059b8 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
 100590c:	e0bff317 	ldw	r2,-52(fp)
 1005910:	1007883a 	mov	r3,r2
 1005914:	e0bffd17 	ldw	r2,-12(fp)
 1005918:	1885883a 	add	r2,r3,r2
 100591c:	10800003 	ldbu	r2,0(r2)
 1005920:	10803fcc 	andi	r2,r2,255
 1005924:	1080201c 	xori	r2,r2,128
 1005928:	10bfe004 	addi	r2,r2,-128
 100592c:	10800b98 	cmpnei	r2,r2,46
 1005930:	1000031e 	bne	r2,zero,1005940 <find_file_in_directory+0x120>
			ext_index = index;
 1005934:	e0bff317 	ldw	r2,-52(fp)
 1005938:	e0bff515 	stw	r2,-44(fp)
 100593c:	00001b06 	br	10059ac <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
 1005940:	e0bff517 	ldw	r2,-44(fp)
 1005944:	1004403a 	cmpge	r2,r2,zero
 1005948:	10000c1e 	bne	r2,zero,100597c <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
 100594c:	e0fff317 	ldw	r3,-52(fp)
 1005950:	e0bff617 	ldw	r2,-40(fp)
 1005954:	1889c83a 	sub	r4,r3,r2
 1005958:	e0bff317 	ldw	r2,-52(fp)
 100595c:	1007883a 	mov	r3,r2
 1005960:	e0bffd17 	ldw	r2,-12(fp)
 1005964:	1885883a 	add	r2,r3,r2
 1005968:	10c00003 	ldbu	r3,0(r2)
 100596c:	e0bff804 	addi	r2,fp,-32
 1005970:	1105883a 	add	r2,r2,r4
 1005974:	10c00005 	stb	r3,0(r2)
 1005978:	00000c06 	br	10059ac <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
 100597c:	e0fff317 	ldw	r3,-52(fp)
 1005980:	e0bff517 	ldw	r2,-44(fp)
 1005984:	1885c83a 	sub	r2,r3,r2
 1005988:	113fffc4 	addi	r4,r2,-1
 100598c:	e0bff317 	ldw	r2,-52(fp)
 1005990:	1007883a 	mov	r3,r2
 1005994:	e0bffd17 	ldw	r2,-12(fp)
 1005998:	1885883a 	add	r2,r3,r2
 100599c:	10c00003 	ldbu	r3,0(r2)
 10059a0:	e0bffa04 	addi	r2,fp,-24
 10059a4:	1105883a 	add	r2,r2,r4
 10059a8:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 10059ac:	e0bff317 	ldw	r2,-52(fp)
 10059b0:	10800044 	addi	r2,r2,1
 10059b4:	e0bff315 	stw	r2,-52(fp)
 10059b8:	e0fff317 	ldw	r3,-52(fp)
 10059bc:	e0bff217 	ldw	r2,-56(fp)
 10059c0:	18bfd216 	blt	r3,r2,100590c <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
 10059c4:	e0bffc17 	ldw	r2,-16(fp)
 10059c8:	1004c03a 	cmpne	r2,r2,zero
 10059cc:	1000441e 	bne	r2,zero,1005ae0 <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
 10059d0:	00804074 	movhi	r2,257
 10059d4:	10808504 	addi	r2,r2,532
 10059d8:	1080050b 	ldhu	r2,20(r2)
 10059dc:	10bfffcc 	andi	r2,r2,65535
 10059e0:	1008917a 	slli	r4,r2,5
 10059e4:	00804074 	movhi	r2,257
 10059e8:	10808504 	addi	r2,r2,532
 10059ec:	1080030b 	ldhu	r2,12(r2)
 10059f0:	117fffcc 	andi	r5,r2,65535
 10059f4:	100c5540 	call	100c554 <__divsi3>
 10059f8:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 10059fc:	e03fef15 	stw	zero,-68(fp)
 1005a00:	00003306 	br	1005ad0 <find_file_in_directory+0x2b0>
				sector_index++) {
			if (Read_Sector_Data(
 1005a04:	00804074 	movhi	r2,257
 1005a08:	10808504 	addi	r2,r2,532
 1005a0c:	10c01317 	ldw	r3,76(r2)
 1005a10:	e0bfef17 	ldw	r2,-68(fp)
 1005a14:	1885883a 	add	r2,r3,r2
 1005a18:	1009883a 	mov	r4,r2
 1005a1c:	d166c517 	ldw	r5,-25836(gp)
 1005a20:	1003b300 	call	1003b30 <Read_Sector_Data>
 1005a24:	1005003a 	cmpeq	r2,r2,zero
 1005a28:	10008e1e 	bne	r2,zero,1005c64 <find_file_in_directory+0x444>
					sector_index
							+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1005a2c:	e03fee15 	stw	zero,-72(fp)
 1005a30:	00001e06 	br	1005aac <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
 1005a34:	e0bfee17 	ldw	r2,-72(fp)
 1005a38:	1008917a 	slli	r4,r2,5
 1005a3c:	e1ffef17 	ldw	r7,-68(fp)
 1005a40:	e17ffe17 	ldw	r5,-8(fp)
 1005a44:	000d883a 	mov	r6,zero
 1005a48:	1003f780 	call	1003f78 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5)
 1005a4c:	e0bffe17 	ldw	r2,-8(fp)
 1005a50:	10800003 	ldbu	r2,0(r2)
 1005a54:	10803fcc 	andi	r2,r2,255
 1005a58:	10803960 	cmpeqi	r2,r2,229
 1005a5c:	1000101e 	bne	r2,zero,1005aa0 <find_file_in_directory+0x280>
 1005a60:	e0bffe17 	ldw	r2,-8(fp)
 1005a64:	10800003 	ldbu	r2,0(r2)
 1005a68:	10803fcc 	andi	r2,r2,255
 1005a6c:	1005003a 	cmpeq	r2,r2,zero
 1005a70:	10000b1e 	bne	r2,zero,1005aa0 <find_file_in_directory+0x280>
							&& (file_record->name[0] != 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
 1005a74:	e17ff804 	addi	r5,fp,-32
 1005a78:	e1bffa04 	addi	r6,fp,-24
 1005a7c:	e13ffe17 	ldw	r4,-8(fp)
 1005a80:	10050200 	call	1005020 <match_file_record_to_name_ext>
 1005a84:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
 1005a88:	e0bfed17 	ldw	r2,-76(fp)
 1005a8c:	1005003a 	cmpeq	r2,r2,zero
 1005a90:	1000031e 	bne	r2,zero,1005aa0 <find_file_in_directory+0x280>
							result = true;
 1005a94:	00800044 	movi	r2,1
 1005a98:	e0bff115 	stw	r2,-60(fp)
							break;
 1005a9c:	00000606 	br	1005ab8 <find_file_in_directory+0x298>
					sector_index
							+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1005aa0:	e0bfee17 	ldw	r2,-72(fp)
 1005aa4:	10800044 	addi	r2,r2,1
 1005aa8:	e0bfee15 	stw	r2,-72(fp)
 1005aac:	e0bfee17 	ldw	r2,-72(fp)
 1005ab0:	10800410 	cmplti	r2,r2,16
 1005ab4:	103fdf1e 	bne	r2,zero,1005a34 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
 1005ab8:	e0bff117 	ldw	r2,-60(fp)
 1005abc:	1004c03a 	cmpne	r2,r2,zero
 1005ac0:	1000681e 	bne	r2,zero,1005c64 <find_file_in_directory+0x444>
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
				sector_index++) {
 1005ac4:	e0bfef17 	ldw	r2,-68(fp)
 1005ac8:	10800044 	addi	r2,r2,1
 1005acc:	e0bfef15 	stw	r2,-68(fp)
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 1005ad0:	e0ffef17 	ldw	r3,-68(fp)
 1005ad4:	e0bff017 	ldw	r2,-64(fp)
 1005ad8:	18bfca16 	blt	r3,r2,1005a04 <find_file_in_directory+0x1e4>
 1005adc:	00006106 	br	1005c64 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
 1005ae0:	e0bff417 	ldw	r2,-48(fp)
 1005ae4:	113fff84 	addi	r4,r2,-2
 1005ae8:	00804074 	movhi	r2,257
 1005aec:	10808504 	addi	r2,r2,532
 1005af0:	10800383 	ldbu	r2,14(r2)
 1005af4:	11403fcc 	andi	r5,r2,255
 1005af8:	1002dfc0 	call	1002dfc <__mulsi3>
 1005afc:	1007883a 	mov	r3,r2
 1005b00:	00804074 	movhi	r2,257
 1005b04:	10808504 	addi	r2,r2,532
 1005b08:	10801417 	ldw	r2,80(r2)
 1005b0c:	1885883a 	add	r2,r3,r2
 1005b10:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0;
 1005b14:	e03feb15 	stw	zero,-84(fp)
					sector_index < boot_sector_data.sectors_per_cluster;
 1005b18:	00003006 	br	1005bdc <find_file_in_directory+0x3bc>
					sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
 1005b1c:	e0ffeb17 	ldw	r3,-84(fp)
 1005b20:	e0bfec17 	ldw	r2,-80(fp)
 1005b24:	1889883a 	add	r4,r3,r2
 1005b28:	d166c517 	ldw	r5,-25836(gp)
 1005b2c:	1003b300 	call	1003b30 <Read_Sector_Data>
 1005b30:	1005003a 	cmpeq	r2,r2,zero
 1005b34:	10002f1e 	bne	r2,zero,1005bf4 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1005b38:	e03fea15 	stw	zero,-88(fp)
 1005b3c:	00001e06 	br	1005bb8 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 1005b40:	e0bfea17 	ldw	r2,-88(fp)
 1005b44:	1008917a 	slli	r4,r2,5
 1005b48:	e1bff417 	ldw	r6,-48(fp)
 1005b4c:	e1ffeb17 	ldw	r7,-84(fp)
 1005b50:	e17ffe17 	ldw	r5,-8(fp)
 1005b54:	1003f780 	call	1003f78 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
 1005b58:	e0bffe17 	ldw	r2,-8(fp)
 1005b5c:	10800003 	ldbu	r2,0(r2)
 1005b60:	10803fcc 	andi	r2,r2,255
 1005b64:	10803960 	cmpeqi	r2,r2,229
 1005b68:	1000101e 	bne	r2,zero,1005bac <find_file_in_directory+0x38c>
 1005b6c:	e0bffe17 	ldw	r2,-8(fp)
 1005b70:	10800003 	ldbu	r2,0(r2)
 1005b74:	10803fcc 	andi	r2,r2,255
 1005b78:	1005003a 	cmpeq	r2,r2,zero
 1005b7c:	10000b1e 	bne	r2,zero,1005bac <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 1005b80:	e17ff804 	addi	r5,fp,-32
 1005b84:	e1bffa04 	addi	r6,fp,-24
 1005b88:	e13ffe17 	ldw	r4,-8(fp)
 1005b8c:	10050200 	call	1005020 <match_file_record_to_name_ext>
 1005b90:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
 1005b94:	e0bfe917 	ldw	r2,-92(fp)
 1005b98:	1005003a 	cmpeq	r2,r2,zero
 1005b9c:	1000031e 	bne	r2,zero,1005bac <find_file_in_directory+0x38c>
								result = true;
 1005ba0:	00800044 	movi	r2,1
 1005ba4:	e0bff115 	stw	r2,-60(fp)
								break;
 1005ba8:	00000606 	br	1005bc4 <find_file_in_directory+0x3a4>
					sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1005bac:	e0bfea17 	ldw	r2,-88(fp)
 1005bb0:	10800044 	addi	r2,r2,1
 1005bb4:	e0bfea15 	stw	r2,-88(fp)
 1005bb8:	e0bfea17 	ldw	r2,-88(fp)
 1005bbc:	10800410 	cmplti	r2,r2,16
 1005bc0:	103fdf1e 	bne	r2,zero,1005b40 <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
 1005bc4:	e0bff117 	ldw	r2,-60(fp)
 1005bc8:	1004c03a 	cmpne	r2,r2,zero
 1005bcc:	1000091e 	bne	r2,zero,1005bf4 <find_file_in_directory+0x3d4>
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
					sector_index++) {
 1005bd0:	e0bfeb17 	ldw	r2,-84(fp)
 1005bd4:	10800044 	addi	r2,r2,1
 1005bd8:	e0bfeb15 	stw	r2,-84(fp)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
 1005bdc:	00804074 	movhi	r2,257
 1005be0:	10808504 	addi	r2,r2,532
 1005be4:	10800383 	ldbu	r2,14(r2)
 1005be8:	10c03fcc 	andi	r3,r2,255
 1005bec:	e0bfeb17 	ldw	r2,-84(fp)
 1005bf0:	10ffca16 	blt	r2,r3,1005b1c <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
 1005bf4:	e0bff117 	ldw	r2,-60(fp)
 1005bf8:	1004c03a 	cmpne	r2,r2,zero
 1005bfc:	1000131e 	bne	r2,zero,1005c4c <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
 1005c00:	e13ff417 	ldw	r4,-48(fp)
 1005c04:	e17ffb04 	addi	r5,fp,-20
 1005c08:	1003c2c0 	call	1003c2c <get_cluster_flag>
 1005c0c:	1005003a 	cmpeq	r2,r2,zero
 1005c10:	10000c1e 	bne	r2,zero,1005c44 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 1005c14:	e0bffb0b 	ldhu	r2,-20(fp)
 1005c18:	10bfffcc 	andi	r2,r2,65535
 1005c1c:	10fffe0c 	andi	r3,r2,65528
 1005c20:	00bffe14 	movui	r2,65528
 1005c24:	1880021e 	bne	r3,r2,1005c30 <find_file_in_directory+0x410>
						return false;
 1005c28:	e03fff15 	stw	zero,-4(fp)
 1005c2c:	00000f06 	br	1005c6c <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
 1005c30:	e0bffb0b 	ldhu	r2,-20(fp)
 1005c34:	10bfffcc 	andi	r2,r2,65535
 1005c38:	10bffe0c 	andi	r2,r2,65528
 1005c3c:	e0bff415 	stw	r2,-48(fp)
 1005c40:	00000206 	br	1005c4c <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
 1005c44:	e03fff15 	stw	zero,-4(fp)
 1005c48:	00000806 	br	1005c6c <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
 1005c4c:	e0fff417 	ldw	r3,-48(fp)
 1005c50:	00bffdd4 	movui	r2,65527
 1005c54:	10c00316 	blt	r2,r3,1005c64 <find_file_in_directory+0x444>
 1005c58:	e0bff117 	ldw	r2,-60(fp)
 1005c5c:	1005003a 	cmpeq	r2,r2,zero
 1005c60:	103f9f1e 	bne	r2,zero,1005ae0 <find_file_in_directory+0x2c0>
	}

	return result;
 1005c64:	e0bff117 	ldw	r2,-60(fp)
 1005c68:	e0bfff15 	stw	r2,-4(fp)
 1005c6c:	e0bfff17 	ldw	r2,-4(fp)
}
 1005c70:	e037883a 	mov	sp,fp
 1005c74:	dfc00117 	ldw	ra,4(sp)
 1005c78:	df000017 	ldw	fp,0(sp)
 1005c7c:	dec00204 	addi	sp,sp,8
 1005c80:	f800283a 	ret

01005c84 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 1005c84:	defff504 	addi	sp,sp,-44
 1005c88:	dfc00a15 	stw	ra,40(sp)
 1005c8c:	df000915 	stw	fp,36(sp)
 1005c90:	df000904 	addi	fp,sp,36
 1005c94:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
 1005c98:	00804074 	movhi	r2,257
 1005c9c:	10808504 	addi	r2,r2,532
 1005ca0:	10801117 	ldw	r2,68(r2)
 1005ca4:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
 1005ca8:	00800084 	movi	r2,2
 1005cac:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
 1005cb0:	00bfffc4 	movi	r2,-1
 1005cb4:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
 1005cb8:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
 1005cbc:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 1005cc0:	00804074 	movhi	r2,257
 1005cc4:	10808504 	addi	r2,r2,532
 1005cc8:	10801417 	ldw	r2,80(r2)
 1005ccc:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 1005cd0:	00804074 	movhi	r2,257
 1005cd4:	10808504 	addi	r2,r2,532
 1005cd8:	1080058b 	ldhu	r2,22(r2)
 1005cdc:	10bfffcc 	andi	r2,r2,65535
 1005ce0:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
 1005ce4:	00804074 	movhi	r2,257
 1005ce8:	10808504 	addi	r2,r2,532
 1005cec:	10800917 	ldw	r2,36(r2)
 1005cf0:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
 1005cf4:	e0fff817 	ldw	r3,-32(fp)
 1005cf8:	e0bff717 	ldw	r2,-36(fp)
 1005cfc:	10c00b2e 	bgeu	r2,r3,1005d2c <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
 1005d00:	e0fff817 	ldw	r3,-32(fp)
 1005d04:	e0bff917 	ldw	r2,-28(fp)
 1005d08:	1889c83a 	sub	r4,r3,r2
 1005d0c:	00804074 	movhi	r2,257
 1005d10:	10808504 	addi	r2,r2,532
 1005d14:	10800383 	ldbu	r2,14(r2)
 1005d18:	11403fcc 	andi	r5,r2,255
 1005d1c:	100c6140 	call	100c614 <__udivsi3>
 1005d20:	10800044 	addi	r2,r2,1
 1005d24:	e0bffa15 	stw	r2,-24(fp)
 1005d28:	00002906 	br	1005dd0 <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
 1005d2c:	e0fff717 	ldw	r3,-36(fp)
 1005d30:	e0bff917 	ldw	r2,-28(fp)
 1005d34:	1889c83a 	sub	r4,r3,r2
 1005d38:	00804074 	movhi	r2,257
 1005d3c:	10808504 	addi	r2,r2,532
 1005d40:	10800383 	ldbu	r2,14(r2)
 1005d44:	11403fcc 	andi	r5,r2,255
 1005d48:	100c6140 	call	100c614 <__udivsi3>
 1005d4c:	10800044 	addi	r2,r2,1
 1005d50:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 1005d54:	00001e06 	br	1005dd0 <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector,
 1005d58:	e13ffe17 	ldw	r4,-8(fp)
 1005d5c:	d166c517 	ldw	r5,-25836(gp)
 1005d60:	1003b300 	call	1003b30 <Read_Sector_Data>
 1005d64:	1005003a 	cmpeq	r2,r2,zero
 1005d68:	1000131e 	bne	r2,zero,1005db8 <find_first_empty_cluster+0x134>
				fat_partition_offset_in_512_byte_sectors)) {
			do {
				cluster =
 1005d6c:	d0a6c717 	ldw	r2,-25828(gp)
 1005d70:	10800a17 	ldw	r2,40(r2)
 1005d74:	1007883a 	mov	r3,r2
 1005d78:	e0bffd17 	ldw	r2,-12(fp)
 1005d7c:	10803fcc 	andi	r2,r2,255
 1005d80:	1085883a 	add	r2,r2,r2
 1005d84:	1885883a 	add	r2,r3,r2
 1005d88:	1080002b 	ldhuio	r2,0(r2)
 1005d8c:	e0bffc0d 	sth	r2,-16(fp)
						((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
 1005d90:	e0bffc0f 	ldh	r2,-16(fp)
 1005d94:	1005003a 	cmpeq	r2,r2,zero
 1005d98:	1000071e 	bne	r2,zero,1005db8 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
 1005d9c:	e0bffd17 	ldw	r2,-12(fp)
 1005da0:	10800044 	addi	r2,r2,1
 1005da4:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
 1005da8:	e0bffd17 	ldw	r2,-12(fp)
 1005dac:	10803fcc 	andi	r2,r2,255
 1005db0:	1004c03a 	cmpne	r2,r2,zero
 1005db4:	103fed1e 	bne	r2,zero,1005d6c <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
 1005db8:	e0bffc0f 	ldh	r2,-16(fp)
 1005dbc:	1005003a 	cmpeq	r2,r2,zero
 1005dc0:	1000081e 	bne	r2,zero,1005de4 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
 1005dc4:	e0bffe17 	ldw	r2,-8(fp)
 1005dc8:	10800044 	addi	r2,r2,1
 1005dcc:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 1005dd0:	00804074 	movhi	r2,257
 1005dd4:	10808504 	addi	r2,r2,532
 1005dd8:	10c01217 	ldw	r3,72(r2)
 1005ddc:	e0bffe17 	ldw	r2,-8(fp)
 1005de0:	18bfdd1e 	bne	r3,r2,1005d58 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
 1005de4:	e0bffc0f 	ldh	r2,-16(fp)
 1005de8:	1004c03a 	cmpne	r2,r2,zero
 1005dec:	1000081e 	bne	r2,zero,1005e10 <find_first_empty_cluster+0x18c>
 1005df0:	e0fffc0f 	ldh	r3,-16(fp)
 1005df4:	e0bffa17 	ldw	r2,-24(fp)
 1005df8:	10c00536 	bltu	r2,r3,1005e10 <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
 1005dfc:	e0bfff17 	ldw	r2,-4(fp)
 1005e00:	e0fffd17 	ldw	r3,-12(fp)
 1005e04:	10c00015 	stw	r3,0(r2)
		result = true;
 1005e08:	00800044 	movi	r2,1
 1005e0c:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 1005e10:	e0bffb17 	ldw	r2,-20(fp)
}
 1005e14:	e037883a 	mov	sp,fp
 1005e18:	dfc00117 	ldw	ra,4(sp)
 1005e1c:	df000017 	ldw	fp,0(sp)
 1005e20:	dec00204 	addi	sp,sp,8
 1005e24:	f800283a 	ret

01005e28 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 1005e28:	defff404 	addi	sp,sp,-48
 1005e2c:	dfc00b15 	stw	ra,44(sp)
 1005e30:	df000a15 	stw	fp,40(sp)
 1005e34:	df000a04 	addi	fp,sp,40
 1005e38:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
 1005e3c:	00bfffc4 	movi	r2,-1
 1005e40:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
 1005e44:	e0bffe17 	ldw	r2,-8(fp)
 1005e48:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
 1005e4c:	e0bffa17 	ldw	r2,-24(fp)
 1005e50:	113fff84 	addi	r4,r2,-2
 1005e54:	00804074 	movhi	r2,257
 1005e58:	10808504 	addi	r2,r2,532
 1005e5c:	10800383 	ldbu	r2,14(r2)
 1005e60:	11403fcc 	andi	r5,r2,255
 1005e64:	1002dfc0 	call	1002dfc <__mulsi3>
 1005e68:	1007883a 	mov	r3,r2
 1005e6c:	00804074 	movhi	r2,257
 1005e70:	10808504 	addi	r2,r2,532
 1005e74:	10801417 	ldw	r2,80(r2)
 1005e78:	1885883a 	add	r2,r3,r2
 1005e7c:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0;
 1005e80:	e03ff815 	stw	zero,-32(fp)
				sector_index < boot_sector_data.sectors_per_cluster;
 1005e84:	00002c06 	br	1005f38 <find_first_empty_record_in_a_subdirectory+0x110>
				sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
 1005e88:	e0fff817 	ldw	r3,-32(fp)
 1005e8c:	e0bff917 	ldw	r2,-28(fp)
 1005e90:	1889883a 	add	r4,r3,r2
 1005e94:	d166c517 	ldw	r5,-25836(gp)
 1005e98:	1003b300 	call	1003b30 <Read_Sector_Data>
 1005e9c:	1005003a 	cmpeq	r2,r2,zero
 1005ea0:	10002b1e 	bne	r2,zero,1005f50 <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1005ea4:	e03ff715 	stw	zero,-36(fp)
 1005ea8:	00001d06 	br	1005f20 <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char =
 1005eac:	d0a6c717 	ldw	r2,-25828(gp)
 1005eb0:	10800a17 	ldw	r2,40(r2)
 1005eb4:	1007883a 	mov	r3,r2
 1005eb8:	e0bff717 	ldw	r2,-36(fp)
 1005ebc:	1004917a 	slli	r2,r2,5
 1005ec0:	1885883a 	add	r2,r3,r2
 1005ec4:	10800023 	ldbuio	r2,0(r2)
 1005ec8:	10803fcc 	andi	r2,r2,255
 1005ecc:	e0bff60d 	sth	r2,-40(fp)
							((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
 1005ed0:	e0bff60b 	ldhu	r2,-40(fp)
 1005ed4:	10803960 	cmpeqi	r2,r2,229
 1005ed8:	1000031e 	bne	r2,zero,1005ee8 <find_first_empty_record_in_a_subdirectory+0xc0>
 1005edc:	e0bff60b 	ldhu	r2,-40(fp)
 1005ee0:	1004c03a 	cmpne	r2,r2,zero
 1005ee4:	10000b1e 	bne	r2,zero,1005f14 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
 1005ee8:	e0bff817 	ldw	r2,-32(fp)
 1005eec:	1006913a 	slli	r3,r2,4
 1005ef0:	e0bff717 	ldw	r2,-36(fp)
 1005ef4:	1885883a 	add	r2,r3,r2
 1005ef8:	1006943a 	slli	r3,r2,16
 1005efc:	e0bffa17 	ldw	r2,-24(fp)
 1005f00:	1884b03a 	or	r2,r3,r2
 1005f04:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
 1005f08:	e0bffb17 	ldw	r2,-20(fp)
 1005f0c:	e0bfff15 	stw	r2,-4(fp)
 1005f10:	00005206 	br	100605c <find_first_empty_record_in_a_subdirectory+0x234>
				sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1005f14:	e0bff717 	ldw	r2,-36(fp)
 1005f18:	10800044 	addi	r2,r2,1
 1005f1c:	e0bff715 	stw	r2,-36(fp)
 1005f20:	e0bff717 	ldw	r2,-36(fp)
 1005f24:	10800410 	cmplti	r2,r2,16
 1005f28:	103fe01e 	bne	r2,zero,1005eac <find_first_empty_record_in_a_subdirectory+0x84>
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
				sector_index++) {
 1005f2c:	e0bff817 	ldw	r2,-32(fp)
 1005f30:	10800044 	addi	r2,r2,1
 1005f34:	e0bff815 	stw	r2,-32(fp)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
 1005f38:	00804074 	movhi	r2,257
 1005f3c:	10808504 	addi	r2,r2,532
 1005f40:	10800383 	ldbu	r2,14(r2)
 1005f44:	10c03fcc 	andi	r3,r2,255
 1005f48:	e0bff817 	ldw	r2,-32(fp)
 1005f4c:	10ffce16 	blt	r2,r3,1005e88 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
 1005f50:	e0bffb17 	ldw	r2,-20(fp)
 1005f54:	1004403a 	cmpge	r2,r2,zero
 1005f58:	1000381e 	bne	r2,zero,100603c <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
 1005f5c:	e13ffa17 	ldw	r4,-24(fp)
 1005f60:	e17ffc04 	addi	r5,fp,-16
 1005f64:	1003c2c0 	call	1003c2c <get_cluster_flag>
 1005f68:	1005003a 	cmpeq	r2,r2,zero
 1005f6c:	1000311e 	bne	r2,zero,1006034 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 1005f70:	e0bffc0b 	ldhu	r2,-16(fp)
 1005f74:	10bfffcc 	andi	r2,r2,65535
 1005f78:	10fffe0c 	andi	r3,r2,65528
 1005f7c:	00bffe14 	movui	r2,65528
 1005f80:	18802e1e 	bne	r3,r2,100603c <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
 1005f84:	e13ffd04 	addi	r4,fp,-12
 1005f88:	1005c840 	call	1005c84 <find_first_empty_cluster>
 1005f8c:	1005003a 	cmpeq	r2,r2,zero
 1005f90:	1000231e 	bne	r2,zero,1006020 <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
 1005f94:	e13ffa17 	ldw	r4,-24(fp)
 1005f98:	e0bffd17 	ldw	r2,-12(fp)
 1005f9c:	117fffcc 	andi	r5,r2,65535
 1005fa0:	2960001c 	xori	r5,r5,32768
 1005fa4:	29600004 	addi	r5,r5,-32768
 1005fa8:	01800044 	movi	r6,1
 1005fac:	1003ce40 	call	1003ce4 <mark_cluster>
 1005fb0:	1005003a 	cmpeq	r2,r2,zero
 1005fb4:	10001a1e 	bne	r2,zero,1006020 <find_first_empty_record_in_a_subdirectory+0x1f8>
 1005fb8:	e0bffd17 	ldw	r2,-12(fp)
 1005fbc:	1009883a 	mov	r4,r2
 1005fc0:	017fffc4 	movi	r5,-1
 1005fc4:	01800044 	movi	r6,1
 1005fc8:	1003ce40 	call	1003ce4 <mark_cluster>
 1005fcc:	1005003a 	cmpeq	r2,r2,zero
 1005fd0:	1000131e 	bne	r2,zero,1006020 <find_first_empty_record_in_a_subdirectory+0x1f8>
 1005fd4:	e13ffa17 	ldw	r4,-24(fp)
 1005fd8:	e0bffd17 	ldw	r2,-12(fp)
 1005fdc:	117fffcc 	andi	r5,r2,65535
 1005fe0:	2960001c 	xori	r5,r5,32768
 1005fe4:	29600004 	addi	r5,r5,-32768
 1005fe8:	000d883a 	mov	r6,zero
 1005fec:	1003ce40 	call	1003ce4 <mark_cluster>
 1005ff0:	1005003a 	cmpeq	r2,r2,zero
 1005ff4:	10000a1e 	bne	r2,zero,1006020 <find_first_empty_record_in_a_subdirectory+0x1f8>
 1005ff8:	e0bffd17 	ldw	r2,-12(fp)
 1005ffc:	1009883a 	mov	r4,r2
 1006000:	017fffc4 	movi	r5,-1
 1006004:	000d883a 	mov	r6,zero
 1006008:	1003ce40 	call	1003ce4 <mark_cluster>
 100600c:	1005003a 	cmpeq	r2,r2,zero
 1006010:	1000031e 	bne	r2,zero,1006020 <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
 1006014:	1003ae00 	call	1003ae0 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
 1006018:	e0bffd17 	ldw	r2,-12(fp)
 100601c:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 1006020:	e0bffc0b 	ldhu	r2,-16(fp)
 1006024:	10bfffcc 	andi	r2,r2,65535
 1006028:	10bffe0c 	andi	r2,r2,65528
 100602c:	e0bffa15 	stw	r2,-24(fp)
 1006030:	00000206 	br	100603c <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
 1006034:	00bfffc4 	movi	r2,-1
 1006038:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
 100603c:	e0fffa17 	ldw	r3,-24(fp)
 1006040:	00bffdd4 	movui	r2,65527
 1006044:	10c00316 	blt	r2,r3,1006054 <find_first_empty_record_in_a_subdirectory+0x22c>
 1006048:	e0bffb17 	ldw	r2,-20(fp)
 100604c:	10bfffe0 	cmpeqi	r2,r2,-1
 1006050:	103f7e1e 	bne	r2,zero,1005e4c <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
 1006054:	e0bffb17 	ldw	r2,-20(fp)
 1006058:	e0bfff15 	stw	r2,-4(fp)
 100605c:	e0bfff17 	ldw	r2,-4(fp)
}
 1006060:	e037883a 	mov	sp,fp
 1006064:	dfc00117 	ldw	ra,4(sp)
 1006068:	df000017 	ldw	fp,0(sp)
 100606c:	dec00204 	addi	sp,sp,8
 1006070:	f800283a 	ret

01006074 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 1006074:	defff804 	addi	sp,sp,-32
 1006078:	dfc00715 	stw	ra,28(sp)
 100607c:	df000615 	stw	fp,24(sp)
 1006080:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors =
			((32 * boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 1006084:	00804074 	movhi	r2,257
 1006088:	10808504 	addi	r2,r2,532
 100608c:	1080050b 	ldhu	r2,20(r2)
 1006090:	10bfffcc 	andi	r2,r2,65535
 1006094:	1008917a 	slli	r4,r2,5
 1006098:	00804074 	movhi	r2,257
 100609c:	10808504 	addi	r2,r2,532
 10060a0:	1080030b 	ldhu	r2,12(r2)
 10060a4:	117fffcc 	andi	r5,r2,65535
 10060a8:	100c5540 	call	100c554 <__divsi3>
 10060ac:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
 10060b0:	00bfffc4 	movi	r2,-1
 10060b4:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 10060b8:	e03ffd15 	stw	zero,-12(fp)
 10060bc:	00002d06 	br	1006174 <find_first_empty_record_in_root_directory+0x100>
			sector_index++) {
		if (Read_Sector_Data(
 10060c0:	00804074 	movhi	r2,257
 10060c4:	10808504 	addi	r2,r2,532
 10060c8:	10c01317 	ldw	r3,76(r2)
 10060cc:	e0bffd17 	ldw	r2,-12(fp)
 10060d0:	1885883a 	add	r2,r3,r2
 10060d4:	1009883a 	mov	r4,r2
 10060d8:	d166c517 	ldw	r5,-25836(gp)
 10060dc:	1003b300 	call	1003b30 <Read_Sector_Data>
 10060e0:	1005003a 	cmpeq	r2,r2,zero
 10060e4:	1000261e 	bne	r2,zero,1006180 <find_first_empty_record_in_root_directory+0x10c>
				sector_index + boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 10060e8:	e03ffb15 	stw	zero,-20(fp)
 10060ec:	00001b06 	br	100615c <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char =
 10060f0:	d0a6c717 	ldw	r2,-25828(gp)
 10060f4:	10800a17 	ldw	r2,40(r2)
 10060f8:	1007883a 	mov	r3,r2
 10060fc:	e0bffb17 	ldw	r2,-20(fp)
 1006100:	1004917a 	slli	r2,r2,5
 1006104:	1885883a 	add	r2,r3,r2
 1006108:	10800023 	ldbuio	r2,0(r2)
 100610c:	10803fcc 	andi	r2,r2,255
 1006110:	e0bffa0d 	sth	r2,-24(fp)
						((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
 1006114:	e0bffa0b 	ldhu	r2,-24(fp)
 1006118:	10803960 	cmpeqi	r2,r2,229
 100611c:	1000031e 	bne	r2,zero,100612c <find_first_empty_record_in_root_directory+0xb8>
 1006120:	e0bffa0b 	ldhu	r2,-24(fp)
 1006124:	1004c03a 	cmpne	r2,r2,zero
 1006128:	1000091e 	bne	r2,zero,1006150 <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
 100612c:	e0bffd17 	ldw	r2,-12(fp)
 1006130:	1006913a 	slli	r3,r2,4
 1006134:	e0bffb17 	ldw	r2,-20(fp)
 1006138:	1885883a 	add	r2,r3,r2
 100613c:	1004943a 	slli	r2,r2,16
 1006140:	e0bffc15 	stw	r2,-16(fp)
					return result;
 1006144:	e0bffc17 	ldw	r2,-16(fp)
 1006148:	e0bfff15 	stw	r2,-4(fp)
 100614c:	00000e06 	br	1006188 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(
				sector_index + boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 1006150:	e0bffb17 	ldw	r2,-20(fp)
 1006154:	10800044 	addi	r2,r2,1
 1006158:	e0bffb15 	stw	r2,-20(fp)
 100615c:	e0bffb17 	ldw	r2,-20(fp)
 1006160:	10800410 	cmplti	r2,r2,16
 1006164:	103fe21e 	bne	r2,zero,10060f0 <find_first_empty_record_in_root_directory+0x7c>
					/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
			sector_index++) {
 1006168:	e0bffd17 	ldw	r2,-12(fp)
 100616c:	10800044 	addi	r2,r2,1
 1006170:	e0bffd15 	stw	r2,-12(fp)
			((32 * boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 1006174:	e0fffd17 	ldw	r3,-12(fp)
 1006178:	e0bffe17 	ldw	r2,-8(fp)
 100617c:	18bfd016 	blt	r3,r2,10060c0 <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
 1006180:	e0bffc17 	ldw	r2,-16(fp)
 1006184:	e0bfff15 	stw	r2,-4(fp)
 1006188:	e0bfff17 	ldw	r2,-4(fp)
}
 100618c:	e037883a 	mov	sp,fp
 1006190:	dfc00117 	ldw	ra,4(sp)
 1006194:	df000017 	ldw	fp,0(sp)
 1006198:	dec00204 	addi	sp,sp,8
 100619c:	f800283a 	ret

010061a0 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
 10061a0:	defffa04 	addi	sp,sp,-24
 10061a4:	df000515 	stw	fp,20(sp)
 10061a8:	df000504 	addi	fp,sp,20
 10061ac:	e13ffd15 	stw	r4,-12(fp)
 10061b0:	e17ffe15 	stw	r5,-8(fp)
 10061b4:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
 10061b8:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
 10061bc:	e03ffc15 	stw	zero,-16(fp)
 10061c0:	00002b06 	br	1006270 <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
 10061c4:	e0bffb17 	ldw	r2,-20(fp)
 10061c8:	1007883a 	mov	r3,r2
 10061cc:	e0bffd17 	ldw	r2,-12(fp)
 10061d0:	1885883a 	add	r2,r3,r2
 10061d4:	10800003 	ldbu	r2,0(r2)
 10061d8:	10803fcc 	andi	r2,r2,255
 10061dc:	1080201c 	xori	r2,r2,128
 10061e0:	10bfe004 	addi	r2,r2,-128
 10061e4:	10800ba0 	cmpeqi	r2,r2,46
 10061e8:	1000181e 	bne	r2,zero,100624c <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
 10061ec:	e0bffc17 	ldw	r2,-16(fp)
 10061f0:	1007883a 	mov	r3,r2
 10061f4:	e0bffe17 	ldw	r2,-8(fp)
 10061f8:	1889883a 	add	r4,r3,r2
 10061fc:	e0bffb17 	ldw	r2,-20(fp)
 1006200:	1007883a 	mov	r3,r2
 1006204:	e0bffd17 	ldw	r2,-12(fp)
 1006208:	1885883a 	add	r2,r3,r2
 100620c:	10800003 	ldbu	r2,0(r2)
 1006210:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
 1006214:	e0bffb17 	ldw	r2,-20(fp)
 1006218:	1007883a 	mov	r3,r2
 100621c:	e0bffd17 	ldw	r2,-12(fp)
 1006220:	1885883a 	add	r2,r3,r2
 1006224:	10800003 	ldbu	r2,0(r2)
 1006228:	10803fcc 	andi	r2,r2,255
 100622c:	1080201c 	xori	r2,r2,128
 1006230:	10bfe004 	addi	r2,r2,-128
 1006234:	1005003a 	cmpeq	r2,r2,zero
 1006238:	10000a1e 	bne	r2,zero,1006264 <convert_filename_to_name_extension+0xc4>
				local++;
 100623c:	e0bffb17 	ldw	r2,-20(fp)
 1006240:	10800044 	addi	r2,r2,1
 1006244:	e0bffb15 	stw	r2,-20(fp)
 1006248:	00000606 	br	1006264 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
 100624c:	e0bffc17 	ldw	r2,-16(fp)
 1006250:	1007883a 	mov	r3,r2
 1006254:	e0bffe17 	ldw	r2,-8(fp)
 1006258:	1887883a 	add	r3,r3,r2
 100625c:	00800804 	movi	r2,32
 1006260:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
 1006264:	e0bffc17 	ldw	r2,-16(fp)
 1006268:	10800044 	addi	r2,r2,1
 100626c:	e0bffc15 	stw	r2,-16(fp)
 1006270:	e0bffc17 	ldw	r2,-16(fp)
 1006274:	10800210 	cmplti	r2,r2,8
 1006278:	103fd21e 	bne	r2,zero,10061c4 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
 100627c:	e0bffb17 	ldw	r2,-20(fp)
 1006280:	1007883a 	mov	r3,r2
 1006284:	e0bffd17 	ldw	r2,-12(fp)
 1006288:	1885883a 	add	r2,r3,r2
 100628c:	10800003 	ldbu	r2,0(r2)
 1006290:	10803fcc 	andi	r2,r2,255
 1006294:	1080201c 	xori	r2,r2,128
 1006298:	10bfe004 	addi	r2,r2,-128
 100629c:	10800b98 	cmpnei	r2,r2,46
 10062a0:	1000031e 	bne	r2,zero,10062b0 <convert_filename_to_name_extension+0x110>
		local++;
 10062a4:	e0bffb17 	ldw	r2,-20(fp)
 10062a8:	10800044 	addi	r2,r2,1
 10062ac:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
 10062b0:	e03ffc15 	stw	zero,-16(fp)
 10062b4:	00002106 	br	100633c <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
 10062b8:	e0bffb17 	ldw	r2,-20(fp)
 10062bc:	1007883a 	mov	r3,r2
 10062c0:	e0bffd17 	ldw	r2,-12(fp)
 10062c4:	1885883a 	add	r2,r3,r2
 10062c8:	10800003 	ldbu	r2,0(r2)
 10062cc:	10803fcc 	andi	r2,r2,255
 10062d0:	1080201c 	xori	r2,r2,128
 10062d4:	10bfe004 	addi	r2,r2,-128
 10062d8:	1005003a 	cmpeq	r2,r2,zero
 10062dc:	10000e1e 	bne	r2,zero,1006318 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
 10062e0:	e0bffc17 	ldw	r2,-16(fp)
 10062e4:	1007883a 	mov	r3,r2
 10062e8:	e0bfff17 	ldw	r2,-4(fp)
 10062ec:	1889883a 	add	r4,r3,r2
 10062f0:	e0bffb17 	ldw	r2,-20(fp)
 10062f4:	1007883a 	mov	r3,r2
 10062f8:	e0bffd17 	ldw	r2,-12(fp)
 10062fc:	1885883a 	add	r2,r3,r2
 1006300:	10800003 	ldbu	r2,0(r2)
 1006304:	20800005 	stb	r2,0(r4)
			local++;
 1006308:	e0bffb17 	ldw	r2,-20(fp)
 100630c:	10800044 	addi	r2,r2,1
 1006310:	e0bffb15 	stw	r2,-20(fp)
 1006314:	00000606 	br	1006330 <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
 1006318:	e0bffc17 	ldw	r2,-16(fp)
 100631c:	1007883a 	mov	r3,r2
 1006320:	e0bfff17 	ldw	r2,-4(fp)
 1006324:	1887883a 	add	r3,r3,r2
 1006328:	00800804 	movi	r2,32
 100632c:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
 1006330:	e0bffc17 	ldw	r2,-16(fp)
 1006334:	10800044 	addi	r2,r2,1
 1006338:	e0bffc15 	stw	r2,-16(fp)
 100633c:	e0bffc17 	ldw	r2,-16(fp)
 1006340:	108000d0 	cmplti	r2,r2,3
 1006344:	103fdc1e 	bne	r2,zero,10062b8 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
 1006348:	e037883a 	mov	sp,fp
 100634c:	df000017 	ldw	fp,0(sp)
 1006350:	dec00104 	addi	sp,sp,4
 1006354:	f800283a 	ret

01006358 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 1006358:	defff204 	addi	sp,sp,-56
 100635c:	dfc00d15 	stw	ra,52(sp)
 1006360:	df000c15 	stw	fp,48(sp)
 1006364:	dc000b15 	stw	r16,44(sp)
 1006368:	df000b04 	addi	fp,sp,44
 100636c:	e13ffb15 	stw	r4,-20(fp)
 1006370:	e17ffc15 	stw	r5,-16(fp)
 1006374:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
 1006378:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
 100637c:	e13ffa04 	addi	r4,fp,-24
 1006380:	1005c840 	call	1005c84 <find_first_empty_cluster>
 1006384:	1005003a 	cmpeq	r2,r2,zero
 1006388:	1000a31e 	bne	r2,zero,1006618 <create_file+0x2c0>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
 100638c:	e0bffd17 	ldw	r2,-12(fp)
 1006390:	10800a17 	ldw	r2,40(r2)
 1006394:	1004c03a 	cmpne	r2,r2,zero
 1006398:	1000031e 	bne	r2,zero,10063a8 <create_file+0x50>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
 100639c:	10060740 	call	1006074 <find_first_empty_record_in_root_directory>
 10063a0:	e0bff815 	stw	r2,-32(fp)
 10063a4:	00000506 	br	10063bc <create_file+0x64>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
 10063a8:	e0bffd17 	ldw	r2,-12(fp)
 10063ac:	1080058b 	ldhu	r2,22(r2)
 10063b0:	113fffcc 	andi	r4,r2,65535
 10063b4:	1005e280 	call	1005e28 <find_first_empty_record_in_a_subdirectory>
 10063b8:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
 10063bc:	e0bff817 	ldw	r2,-32(fp)
 10063c0:	1004803a 	cmplt	r2,r2,zero
 10063c4:	1000941e 	bne	r2,zero,1006618 <create_file+0x2c0>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
 10063c8:	e13ffb17 	ldw	r4,-20(fp)
 10063cc:	1004f600 	call	1004f60 <get_dir_divider_location>
 10063d0:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
 10063d4:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
 10063d8:	00000b06 	br	1006408 <create_file+0xb0>
				last_dir_separator = last_dir_separator + location + 1;
 10063dc:	e0fff517 	ldw	r3,-44(fp)
 10063e0:	e0bff617 	ldw	r2,-40(fp)
 10063e4:	1885883a 	add	r2,r3,r2
 10063e8:	10800044 	addi	r2,r2,1
 10063ec:	e0bff515 	stw	r2,-44(fp)
				location = get_dir_divider_location(
 10063f0:	e0bff517 	ldw	r2,-44(fp)
 10063f4:	1007883a 	mov	r3,r2
 10063f8:	e0bffb17 	ldw	r2,-20(fp)
 10063fc:	1889883a 	add	r4,r3,r2
 1006400:	1004f600 	call	1004f60 <get_dir_divider_location>
 1006404:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
 1006408:	e0bff617 	ldw	r2,-40(fp)
 100640c:	10800048 	cmpgei	r2,r2,1
 1006410:	103ff21e 	bne	r2,zero,10063dc <create_file+0x84>
				last_dir_separator = last_dir_separator + location + 1;
				location = get_dir_divider_location(
						&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
 1006414:	e0bff517 	ldw	r2,-44(fp)
 1006418:	1007883a 	mov	r3,r2
 100641c:	e0bffb17 	ldw	r2,-20(fp)
 1006420:	1889883a 	add	r4,r3,r2
 1006424:	e0bffc17 	ldw	r2,-16(fp)
 1006428:	100b883a 	mov	r5,r2
 100642c:	e0bffc17 	ldw	r2,-16(fp)
 1006430:	10800204 	addi	r2,r2,8
 1006434:	100d883a 	mov	r6,r2
 1006438:	10061a00 	call	10061a0 <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
 100643c:	e0bffc17 	ldw	r2,-16(fp)
 1006440:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
 1006444:	e0bffc17 	ldw	r2,-16(fp)
 1006448:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
 100644c:	e0bffc17 	ldw	r2,-16(fp)
 1006450:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
 1006454:	e0bffc17 	ldw	r2,-16(fp)
 1006458:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
 100645c:	e0bffc17 	ldw	r2,-16(fp)
 1006460:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
 1006464:	e0bffc17 	ldw	r2,-16(fp)
 1006468:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
 100646c:	e0bffa17 	ldw	r2,-24(fp)
 1006470:	1007883a 	mov	r3,r2
 1006474:	e0bffc17 	ldw	r2,-16(fp)
 1006478:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
 100647c:	e0bffc17 	ldw	r2,-16(fp)
 1006480:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
 1006484:	e0fffa17 	ldw	r3,-24(fp)
 1006488:	e0bffc17 	ldw	r2,-16(fp)
 100648c:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
 1006490:	e0bffc17 	ldw	r2,-16(fp)
 1006494:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
 1006498:	e0bffc17 	ldw	r2,-16(fp)
 100649c:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
 10064a0:	e0bff817 	ldw	r2,-32(fp)
 10064a4:	10ffffcc 	andi	r3,r2,65535
 10064a8:	e0bffc17 	ldw	r2,-16(fp)
 10064ac:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
 10064b0:	e0bff817 	ldw	r2,-32(fp)
 10064b4:	1005d43a 	srai	r2,r2,16
 10064b8:	10bfffcc 	andi	r2,r2,65535
 10064bc:	e0bfff15 	stw	r2,-4(fp)
 10064c0:	e0ffff17 	ldw	r3,-4(fp)
 10064c4:	1804403a 	cmpge	r2,r3,zero
 10064c8:	1000031e 	bne	r2,zero,10064d8 <create_file+0x180>
 10064cc:	e0bfff17 	ldw	r2,-4(fp)
 10064d0:	108003c4 	addi	r2,r2,15
 10064d4:	e0bfff15 	stw	r2,-4(fp)
 10064d8:	e0ffff17 	ldw	r3,-4(fp)
 10064dc:	1805d13a 	srai	r2,r3,4
 10064e0:	1007883a 	mov	r3,r2
 10064e4:	e0bffc17 	ldw	r2,-16(fp)
 10064e8:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
 10064ec:	e0bff817 	ldw	r2,-32(fp)
 10064f0:	1005d43a 	srai	r2,r2,16
 10064f4:	108003cc 	andi	r2,r2,15
 10064f8:	1004917a 	slli	r2,r2,5
 10064fc:	1007883a 	mov	r3,r2
 1006500:	e0bffc17 	ldw	r2,-16(fp)
 1006504:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
 1006508:	e0bffd17 	ldw	r2,-12(fp)
 100650c:	1080058b 	ldhu	r2,22(r2)
 1006510:	10ffffcc 	andi	r3,r2,65535
 1006514:	e0bffc17 	ldw	r2,-16(fp)
 1006518:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
 100651c:	e0fffc17 	ldw	r3,-16(fp)
 1006520:	00800044 	movi	r2,1
 1006524:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
 1006528:	e0fffc17 	ldw	r3,-16(fp)
 100652c:	00800044 	movi	r2,1
 1006530:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector =
 1006534:	e0bffc17 	ldw	r2,-16(fp)
 1006538:	10800a17 	ldw	r2,40(r2)
 100653c:	1004c03a 	cmpne	r2,r2,zero
 1006540:	1000081e 	bne	r2,zero,1006564 <create_file+0x20c>
 1006544:	00804074 	movhi	r2,257
 1006548:	10808504 	addi	r2,r2,532
 100654c:	10c01317 	ldw	r3,76(r2)
 1006550:	e0bffc17 	ldw	r2,-16(fp)
 1006554:	10800b17 	ldw	r2,44(r2)
 1006558:	1887883a 	add	r3,r3,r2
 100655c:	e0fffe15 	stw	r3,-8(fp)
 1006560:	00001006 	br	10065a4 <create_file+0x24c>
 1006564:	00804074 	movhi	r2,257
 1006568:	10808504 	addi	r2,r2,532
 100656c:	14001417 	ldw	r16,80(r2)
 1006570:	e0bffc17 	ldw	r2,-16(fp)
 1006574:	10800a17 	ldw	r2,40(r2)
 1006578:	113fff84 	addi	r4,r2,-2
 100657c:	00804074 	movhi	r2,257
 1006580:	10808504 	addi	r2,r2,532
 1006584:	10800383 	ldbu	r2,14(r2)
 1006588:	11403fcc 	andi	r5,r2,255
 100658c:	1002dfc0 	call	1002dfc <__mulsi3>
 1006590:	8087883a 	add	r3,r16,r2
 1006594:	e0bffc17 	ldw	r2,-16(fp)
 1006598:	10800b17 	ldw	r2,44(r2)
 100659c:	1887883a 	add	r3,r3,r2
 10065a0:	e0fffe15 	stw	r3,-8(fp)
 10065a4:	e0bffe17 	ldw	r2,-8(fp)
 10065a8:	e0bff715 	stw	r2,-36(fp)
							(boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
 10065ac:	e13ff717 	ldw	r4,-36(fp)
 10065b0:	d166c517 	ldw	r5,-25836(gp)
 10065b4:	1003b300 	call	1003b30 <Read_Sector_Data>
 10065b8:	1005003a 	cmpeq	r2,r2,zero
 10065bc:	1000161e 	bne	r2,zero,1006618 <create_file+0x2c0>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(file_record->file_record_offset,
 10065c0:	e0bffc17 	ldw	r2,-16(fp)
 10065c4:	10800c0b 	ldhu	r2,48(r2)
 10065c8:	113fffcc 	andi	r4,r2,65535
 10065cc:	2120001c 	xori	r4,r4,32768
 10065d0:	21200004 	addi	r4,r4,-32768
 10065d4:	e17ffc17 	ldw	r5,-16(fp)
 10065d8:	10041fc0 	call	10041fc <Write_File_Record_At_Offset>
 10065dc:	1005003a 	cmpeq	r2,r2,zero
 10065e0:	10000d1e 	bne	r2,zero,1006618 <create_file+0x2c0>
						file_record)) {
					Save_Modified_Sector();
 10065e4:	1003ae00 	call	1003ae0 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
 10065e8:	e13ffa17 	ldw	r4,-24(fp)
 10065ec:	017fffc4 	movi	r5,-1
 10065f0:	01800044 	movi	r6,1
 10065f4:	1003ce40 	call	1003ce4 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
 10065f8:	e13ffa17 	ldw	r4,-24(fp)
 10065fc:	017fffc4 	movi	r5,-1
 1006600:	000d883a 	mov	r6,zero
 1006604:	1003ce40 	call	1003ce4 <mark_cluster>
 1006608:	1005003a 	cmpeq	r2,r2,zero
 100660c:	1000021e 	bne	r2,zero,1006618 <create_file+0x2c0>
							false)) {
						result = true;
 1006610:	00800044 	movi	r2,1
 1006614:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
 1006618:	e0bff917 	ldw	r2,-28(fp)
}
 100661c:	e037883a 	mov	sp,fp
 1006620:	dfc00217 	ldw	ra,8(sp)
 1006624:	df000117 	ldw	fp,4(sp)
 1006628:	dc000017 	ldw	r16,0(sp)
 100662c:	dec00304 	addi	sp,sp,12
 1006630:	f800283a 	ret

01006634 <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
 1006634:	defffb04 	addi	sp,sp,-20
 1006638:	df000415 	stw	fp,16(sp)
 100663c:	df000404 	addi	fp,sp,16
 1006640:	e13ffe15 	stw	r4,-8(fp)
 1006644:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 1006648:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 100664c:	e03ffd15 	stw	zero,-12(fp)
 1006650:	00001606 	br	10066ac <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
 1006654:	e0fffd17 	ldw	r3,-12(fp)
 1006658:	e0bffe17 	ldw	r2,-8(fp)
 100665c:	10c5883a 	add	r2,r2,r3
 1006660:	10800003 	ldbu	r2,0(r2)
 1006664:	10803fcc 	andi	r2,r2,255
 1006668:	10800820 	cmpeqi	r2,r2,32
 100666c:	10000c1e 	bne	r2,zero,10066a0 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
 1006670:	e0bffc17 	ldw	r2,-16(fp)
 1006674:	1007883a 	mov	r3,r2
 1006678:	e0bfff17 	ldw	r2,-4(fp)
 100667c:	1889883a 	add	r4,r3,r2
 1006680:	e0fffd17 	ldw	r3,-12(fp)
 1006684:	e0bffe17 	ldw	r2,-8(fp)
 1006688:	10c5883a 	add	r2,r2,r3
 100668c:	10800003 	ldbu	r2,0(r2)
 1006690:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
 1006694:	e0bffc17 	ldw	r2,-16(fp)
 1006698:	10800044 	addi	r2,r2,1
 100669c:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 10066a0:	e0bffd17 	ldw	r2,-12(fp)
 10066a4:	10800044 	addi	r2,r2,1
 10066a8:	e0bffd15 	stw	r2,-12(fp)
 10066ac:	e0bffd17 	ldw	r2,-12(fp)
 10066b0:	10800210 	cmplti	r2,r2,8
 10066b4:	103fe71e 	bne	r2,zero,1006654 <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
 10066b8:	e0bffe17 	ldw	r2,-8(fp)
 10066bc:	10800203 	ldbu	r2,8(r2)
 10066c0:	10803fcc 	andi	r2,r2,255
 10066c4:	10800820 	cmpeqi	r2,r2,32
 10066c8:	1000261e 	bne	r2,zero,1006764 <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
 10066cc:	e0bffc17 	ldw	r2,-16(fp)
 10066d0:	1007883a 	mov	r3,r2
 10066d4:	e0bfff17 	ldw	r2,-4(fp)
 10066d8:	1887883a 	add	r3,r3,r2
 10066dc:	00800b84 	movi	r2,46
 10066e0:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
 10066e4:	e0bffc17 	ldw	r2,-16(fp)
 10066e8:	10800044 	addi	r2,r2,1
 10066ec:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
 10066f0:	e03ffd15 	stw	zero,-12(fp)
 10066f4:	00001806 	br	1006758 <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
 10066f8:	e0fffd17 	ldw	r3,-12(fp)
 10066fc:	e0bffe17 	ldw	r2,-8(fp)
 1006700:	1885883a 	add	r2,r3,r2
 1006704:	10800204 	addi	r2,r2,8
 1006708:	10800003 	ldbu	r2,0(r2)
 100670c:	10803fcc 	andi	r2,r2,255
 1006710:	10800820 	cmpeqi	r2,r2,32
 1006714:	10000d1e 	bne	r2,zero,100674c <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
 1006718:	e0bffc17 	ldw	r2,-16(fp)
 100671c:	1007883a 	mov	r3,r2
 1006720:	e0bfff17 	ldw	r2,-4(fp)
 1006724:	1889883a 	add	r4,r3,r2
 1006728:	e0fffd17 	ldw	r3,-12(fp)
 100672c:	e0bffe17 	ldw	r2,-8(fp)
 1006730:	1885883a 	add	r2,r3,r2
 1006734:	10800204 	addi	r2,r2,8
 1006738:	10800003 	ldbu	r2,0(r2)
 100673c:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
 1006740:	e0bffc17 	ldw	r2,-16(fp)
 1006744:	10800044 	addi	r2,r2,1
 1006748:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
 100674c:	e0bffd17 	ldw	r2,-12(fp)
 1006750:	10800044 	addi	r2,r2,1
 1006754:	e0bffd15 	stw	r2,-12(fp)
 1006758:	e0bffd17 	ldw	r2,-12(fp)
 100675c:	108000d0 	cmplti	r2,r2,3
 1006760:	103fe51e 	bne	r2,zero,10066f8 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 1006764:	e0bffc17 	ldw	r2,-16(fp)
 1006768:	1007883a 	mov	r3,r2
 100676c:	e0bfff17 	ldw	r2,-4(fp)
 1006770:	1885883a 	add	r2,r3,r2
 1006774:	10000005 	stb	zero,0(r2)
}
 1006778:	e037883a 	mov	sp,fp
 100677c:	df000017 	ldw	fp,0(sp)
 1006780:	dec00104 	addi	sp,sp,4
 1006784:	f800283a 	ret

01006788 <alt_up_sd_card_open_dev>:

///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////

alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
 1006788:	defffc04 	addi	sp,sp,-16
 100678c:	dfc00315 	stw	ra,12(sp)
 1006790:	df000215 	stw	fp,8(sp)
 1006794:	df000204 	addi	fp,sp,8
 1006798:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
 100679c:	e13fff17 	ldw	r4,-4(fp)
 10067a0:	01404074 	movhi	r5,257
 10067a4:	2979af04 	addi	r5,r5,-6468
 10067a8:	100935c0 	call	100935c <alt_find_dev>
 10067ac:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
 10067b0:	e0bffe17 	ldw	r2,-8(fp)
 10067b4:	1005003a 	cmpeq	r2,r2,zero
 10067b8:	10001e1e 	bne	r2,zero,1006834 <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 10067bc:	e0bffe17 	ldw	r2,-8(fp)
 10067c0:	10800a17 	ldw	r2,40(r2)
 10067c4:	10808d04 	addi	r2,r2,564
 10067c8:	d0a6bf15 	stw	r2,-25860(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 10067cc:	e0bffe17 	ldw	r2,-8(fp)
 10067d0:	10800a17 	ldw	r2,40(r2)
 10067d4:	10808904 	addi	r2,r2,548
 10067d8:	d0a6c015 	stw	r2,-25856(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 10067dc:	e0bffe17 	ldw	r2,-8(fp)
 10067e0:	10800a17 	ldw	r2,40(r2)
 10067e4:	10808404 	addi	r2,r2,528
 10067e8:	d0a6c115 	stw	r2,-25852(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 10067ec:	e0bffe17 	ldw	r2,-8(fp)
 10067f0:	10800a17 	ldw	r2,40(r2)
 10067f4:	10808c04 	addi	r2,r2,560
 10067f8:	d0a6c215 	stw	r2,-25848(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 10067fc:	e0bffe17 	ldw	r2,-8(fp)
 1006800:	10800a17 	ldw	r2,40(r2)
 1006804:	10808b04 	addi	r2,r2,556
 1006808:	d0a6c315 	stw	r2,-25844(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 100680c:	e0bffe17 	ldw	r2,-8(fp)
 1006810:	10800a17 	ldw	r2,40(r2)
 1006814:	d0a6c415 	stw	r2,-25840(gp)
		device_pointer = dev;
 1006818:	e0bffe17 	ldw	r2,-8(fp)
 100681c:	d0a6c715 	stw	r2,-25828(gp)
		initialized = false;
 1006820:	d026bd15 	stw	zero,-25868(gp)
		is_sd_card_formated_as_FAT16 = false;
 1006824:	d026be15 	stw	zero,-25864(gp)
		search_data.valid = false;
 1006828:	00804074 	movhi	r2,257
 100682c:	10808004 	addi	r2,r2,512
 1006830:	10000415 	stw	zero,16(r2)
	}
	return dev;
 1006834:	e0bffe17 	ldw	r2,-8(fp)
}
 1006838:	e037883a 	mov	sp,fp
 100683c:	dfc00117 	ldw	ra,4(sp)
 1006840:	df000017 	ldw	fp,0(sp)
 1006844:	dec00204 	addi	sp,sp,8
 1006848:	f800283a 	ret

0100684c <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 100684c:	defffd04 	addi	sp,sp,-12
 1006850:	df000215 	stw	fp,8(sp)
 1006854:	df000204 	addi	fp,sp,8
	bool result = false;
 1006858:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL)
 100685c:	d0a6c717 	ldw	r2,-25828(gp)
 1006860:	1005003a 	cmpeq	r2,r2,zero
 1006864:	1000081e 	bne	r2,zero,1006888 <alt_up_sd_card_is_Present+0x3c>
 1006868:	d0a6bf17 	ldw	r2,-25860(gp)
 100686c:	1080002b 	ldhuio	r2,0(r2)
 1006870:	1080008c 	andi	r2,r2,2
 1006874:	1005003a 	cmpeq	r2,r2,zero
 1006878:	1000031e 	bne	r2,zero,1006888 <alt_up_sd_card_is_Present+0x3c>
			&& ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0)) {
		result = true;
 100687c:	00800044 	movi	r2,1
 1006880:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL)
 1006884:	00001e06 	br	1006900 <alt_up_sd_card_is_Present+0xb4>
			&& ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
 1006888:	d0a6bd17 	ldw	r2,-25868(gp)
 100688c:	10800058 	cmpnei	r2,r2,1
 1006890:	10001b1e 	bne	r2,zero,1006900 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
 1006894:	d026bd15 	stw	zero,-25868(gp)
		search_data.valid = false;
 1006898:	00804074 	movhi	r2,257
 100689c:	10808004 	addi	r2,r2,512
 10068a0:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 10068a4:	d026be15 	stw	zero,-25864(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 10068a8:	e03ffe15 	stw	zero,-8(fp)
 10068ac:	00001106 	br	10068f4 <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
 10068b0:	e0bffe17 	ldw	r2,-8(fp)
 10068b4:	00c04074 	movhi	r3,257
 10068b8:	18c09a04 	addi	r3,r3,616
 10068bc:	100491ba 	slli	r2,r2,6
 10068c0:	10c5883a 	add	r2,r2,r3
 10068c4:	10800f04 	addi	r2,r2,60
 10068c8:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 10068cc:	e0bffe17 	ldw	r2,-8(fp)
 10068d0:	00c04074 	movhi	r3,257
 10068d4:	18c09a04 	addi	r3,r3,616
 10068d8:	100491ba 	slli	r2,r2,6
 10068dc:	10c5883a 	add	r2,r2,r3
 10068e0:	10800e04 	addi	r2,r2,56
 10068e4:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 10068e8:	e0bffe17 	ldw	r2,-8(fp)
 10068ec:	10800044 	addi	r2,r2,1
 10068f0:	e0bffe15 	stw	r2,-8(fp)
 10068f4:	e0bffe17 	ldw	r2,-8(fp)
 10068f8:	10800510 	cmplti	r2,r2,20
 10068fc:	103fec1e 	bne	r2,zero,10068b0 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
 1006900:	e0bfff17 	ldw	r2,-4(fp)
}
 1006904:	e037883a 	mov	sp,fp
 1006908:	df000017 	ldw	fp,0(sp)
 100690c:	dec00104 	addi	sp,sp,4
 1006910:	f800283a 	ret

01006914 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 1006914:	defffd04 	addi	sp,sp,-12
 1006918:	dfc00215 	stw	ra,8(sp)
 100691c:	df000115 	stw	fp,4(sp)
 1006920:	df000104 	addi	fp,sp,4
	bool result = false;
 1006924:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 1006928:	100684c0 	call	100684c <alt_up_sd_card_is_Present>
 100692c:	1005003a 	cmpeq	r2,r2,zero
 1006930:	10000d1e 	bne	r2,zero,1006968 <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
 1006934:	d0a6bd17 	ldw	r2,-25868(gp)
 1006938:	1004c03a 	cmpne	r2,r2,zero
 100693c:	1000071e 	bne	r2,zero,100695c <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 1006940:	1004afc0 	call	1004afc <Look_for_FAT16>
 1006944:	d0a6be15 	stw	r2,-25864(gp)
			initialized = is_sd_card_formated_as_FAT16;
 1006948:	d0a6be17 	ldw	r2,-25864(gp)
 100694c:	d0a6bd15 	stw	r2,-25868(gp)
			search_data.valid = false;
 1006950:	00804074 	movhi	r2,257
 1006954:	10808004 	addi	r2,r2,512
 1006958:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 100695c:	d0a6be17 	ldw	r2,-25864(gp)
 1006960:	e0bfff15 	stw	r2,-4(fp)
 1006964:	00000206 	br	1006970 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
 1006968:	d026bd15 	stw	zero,-25868(gp)
		is_sd_card_formated_as_FAT16 = false;
 100696c:	d026be15 	stw	zero,-25864(gp)
	}

	return result;
 1006970:	e0bfff17 	ldw	r2,-4(fp)
}
 1006974:	e037883a 	mov	sp,fp
 1006978:	dfc00117 	ldw	ra,4(sp)
 100697c:	df000017 	ldw	fp,0(sp)
 1006980:	dec00204 	addi	sp,sp,8
 1006984:	f800283a 	ret

01006988 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 1006988:	deffea04 	addi	sp,sp,-88
 100698c:	dfc01515 	stw	ra,84(sp)
 1006990:	df001415 	stw	fp,80(sp)
 1006994:	df001404 	addi	fp,sp,80
 1006998:	e13ffe15 	stw	r4,-8(fp)
 100699c:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 10069a0:	00800084 	movi	r2,2
 10069a4:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 10069a8:	100684c0 	call	100684c <alt_up_sd_card_is_Present>
 10069ac:	1005003a 	cmpeq	r2,r2,zero
 10069b0:	1000241e 	bne	r2,zero,1006a44 <alt_up_sd_card_find_first+0xbc>
 10069b4:	d0a6be17 	ldw	r2,-25864(gp)
 10069b8:	1005003a 	cmpeq	r2,r2,zero
 10069bc:	1000211e 	bne	r2,zero,1006a44 <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
 10069c0:	e17fed04 	addi	r5,fp,-76
 10069c4:	e1bfee04 	addi	r6,fp,-72
 10069c8:	e13ffe17 	ldw	r4,-8(fp)
 10069cc:	100530c0 	call	100530c <get_home_directory_cluster_for_file>
 10069d0:	1005003a 	cmpeq	r2,r2,zero
 10069d4:	1000191e 	bne	r2,zero,1006a3c <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
 10069d8:	e0bfed17 	ldw	r2,-76(fp)
 10069dc:	1007883a 	mov	r3,r2
 10069e0:	00804074 	movhi	r2,257
 10069e4:	10808004 	addi	r2,r2,512
 10069e8:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 10069ec:	e0bfed17 	ldw	r2,-76(fp)
 10069f0:	1007883a 	mov	r3,r2
 10069f4:	00804074 	movhi	r2,257
 10069f8:	10808004 	addi	r2,r2,512
 10069fc:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 1006a00:	00804074 	movhi	r2,257
 1006a04:	10808004 	addi	r2,r2,512
 1006a08:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 1006a0c:	00c04074 	movhi	r3,257
 1006a10:	18c08004 	addi	r3,r3,512
 1006a14:	00bfffc4 	movi	r2,-1
 1006a18:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
 1006a1c:	00c04074 	movhi	r3,257
 1006a20:	18c08004 	addi	r3,r3,512
 1006a24:	00800044 	movi	r2,1
 1006a28:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
 1006a2c:	e13fff17 	ldw	r4,-4(fp)
 1006a30:	1006a5c0 	call	1006a5c <alt_up_sd_card_find_next>
 1006a34:	e0bfec0d 	sth	r2,-80(fp)
 1006a38:	00000206 	br	1006a44 <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
 1006a3c:	00800044 	movi	r2,1
 1006a40:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 1006a44:	e0bfec0f 	ldh	r2,-80(fp)
}
 1006a48:	e037883a 	mov	sp,fp
 1006a4c:	dfc00117 	ldw	ra,4(sp)
 1006a50:	df000017 	ldw	fp,0(sp)
 1006a54:	dec00204 	addi	sp,sp,8
 1006a58:	f800283a 	ret

01006a5c <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 1006a5c:	deffe404 	addi	sp,sp,-112
 1006a60:	dfc01b15 	stw	ra,108(sp)
 1006a64:	df001a15 	stw	fp,104(sp)
 1006a68:	df001a04 	addi	fp,sp,104
 1006a6c:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
 1006a70:	00800084 	movi	r2,2
 1006a74:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1006a78:	100684c0 	call	100684c <alt_up_sd_card_is_Present>
 1006a7c:	1005003a 	cmpeq	r2,r2,zero
 1006a80:	1000da1e 	bne	r2,zero,1006dec <alt_up_sd_card_find_next+0x390>
 1006a84:	d0a6be17 	ldw	r2,-25864(gp)
 1006a88:	1005003a 	cmpeq	r2,r2,zero
 1006a8c:	1000d71e 	bne	r2,zero,1006dec <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
 1006a90:	00804074 	movhi	r2,257
 1006a94:	10808004 	addi	r2,r2,512
 1006a98:	10800417 	ldw	r2,16(r2)
 1006a9c:	1005003a 	cmpeq	r2,r2,zero
 1006aa0:	1000d01e 	bne	r2,zero,1006de4 <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 1006aa4:	00804074 	movhi	r2,257
 1006aa8:	10808004 	addi	r2,r2,512
 1006aac:	10800117 	ldw	r2,4(r2)
 1006ab0:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
 1006ab4:	e0bfec17 	ldw	r2,-80(fp)
 1006ab8:	1004c03a 	cmpne	r2,r2,zero
 1006abc:	1000511e 	bne	r2,zero,1006c04 <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
 1006ac0:	00804074 	movhi	r2,257
 1006ac4:	10808504 	addi	r2,r2,532
 1006ac8:	1080050b 	ldhu	r2,20(r2)
 1006acc:	10bfffcc 	andi	r2,r2,65535
 1006ad0:	1008917a 	slli	r4,r2,5
 1006ad4:	00804074 	movhi	r2,257
 1006ad8:	10808504 	addi	r2,r2,532
 1006adc:	1080030b 	ldhu	r2,12(r2)
 1006ae0:	117fffcc 	andi	r5,r2,65535
 1006ae4:	100c5540 	call	100c554 <__divsi3>
 1006ae8:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
 1006aec:	00804074 	movhi	r2,257
 1006af0:	10808004 	addi	r2,r2,512
 1006af4:	10800217 	ldw	r2,8(r2)
 1006af8:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
 1006afc:	00804074 	movhi	r2,257
 1006b00:	10808004 	addi	r2,r2,512
 1006b04:	1080030b 	ldhu	r2,12(r2)
 1006b08:	10bfffcc 	andi	r2,r2,65535
 1006b0c:	10a0001c 	xori	r2,r2,32768
 1006b10:	10a00004 	addi	r2,r2,-32768
 1006b14:	10800044 	addi	r2,r2,1
 1006b18:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 1006b1c:	00003306 	br	1006bec <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(
 1006b20:	00804074 	movhi	r2,257
 1006b24:	10808504 	addi	r2,r2,532
 1006b28:	10c01317 	ldw	r3,76(r2)
 1006b2c:	e0bfea17 	ldw	r2,-88(fp)
 1006b30:	1885883a 	add	r2,r3,r2
 1006b34:	1009883a 	mov	r4,r2
 1006b38:	d166c517 	ldw	r5,-25836(gp)
 1006b3c:	1003b300 	call	1003b30 <Read_Sector_Data>
 1006b40:	1005003a 	cmpeq	r2,r2,zero
 1006b44:	10002c1e 	bne	r2,zero,1006bf8 <alt_up_sd_card_find_next+0x19c>
							sector_index
									+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 1006b48:	00002106 	br	1006bd0 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
 1006b4c:	e0bfe917 	ldw	r2,-92(fp)
 1006b50:	1008917a 	slli	r4,r2,5
 1006b54:	e1ffea17 	ldw	r7,-88(fp)
 1006b58:	e17fee04 	addi	r5,fp,-72
 1006b5c:	000d883a 	mov	r6,zero
 1006b60:	1003f780 	call	1003f78 <Read_File_Record_At_Offset>
 1006b64:	1005003a 	cmpeq	r2,r2,zero
 1006b68:	1000161e 	bne	r2,zero,1006bc4 <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
 1006b6c:	e0bfee03 	ldbu	r2,-72(fp)
 1006b70:	10803fcc 	andi	r2,r2,255
 1006b74:	1005003a 	cmpeq	r2,r2,zero
 1006b78:	1000121e 	bne	r2,zero,1006bc4 <alt_up_sd_card_find_next+0x168>
 1006b7c:	e0bfee03 	ldbu	r2,-72(fp)
 1006b80:	10803fcc 	andi	r2,r2,255
 1006b84:	10803960 	cmpeqi	r2,r2,229
 1006b88:	10000e1e 	bne	r2,zero,1006bc4 <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector =
 1006b8c:	e0bfe917 	ldw	r2,-92(fp)
 1006b90:	1007883a 	mov	r3,r2
 1006b94:	00804074 	movhi	r2,257
 1006b98:	10808004 	addi	r2,r2,512
 1006b9c:	10c0030d 	sth	r3,12(r2)
											file_counter;
									search_data.current_sector_in_cluster =
 1006ba0:	e0ffea17 	ldw	r3,-88(fp)
 1006ba4:	00804074 	movhi	r2,257
 1006ba8:	10808004 	addi	r2,r2,512
 1006bac:	10c00215 	stw	r3,8(r2)
											sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
 1006bb0:	e13fee04 	addi	r4,fp,-72
 1006bb4:	e17ffe17 	ldw	r5,-8(fp)
 1006bb8:	10066340 	call	1006634 <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
 1006bbc:	e03fff15 	stw	zero,-4(fp)
 1006bc0:	00008c06 	br	1006df4 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(
							sector_index
									+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 1006bc4:	e0bfe917 	ldw	r2,-92(fp)
 1006bc8:	10800044 	addi	r2,r2,1
 1006bcc:	e0bfe915 	stw	r2,-92(fp)
 1006bd0:	e0bfe917 	ldw	r2,-92(fp)
 1006bd4:	10800410 	cmplti	r2,r2,16
 1006bd8:	103fdc1e 	bne	r2,zero,1006b4c <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 1006bdc:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 1006be0:	e0bfea17 	ldw	r2,-88(fp)
 1006be4:	10800044 	addi	r2,r2,1
 1006be8:	e0bfea15 	stw	r2,-88(fp)
 1006bec:	e0ffea17 	ldw	r3,-88(fp)
 1006bf0:	e0bfeb17 	ldw	r2,-84(fp)
 1006bf4:	18bfca16 	blt	r3,r2,1006b20 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
 1006bf8:	00bfffc4 	movi	r2,-1
 1006bfc:	e0bfed0d 	sth	r2,-76(fp)
 1006c00:	00007a06 	br	1006dec <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
 1006c04:	00804074 	movhi	r2,257
 1006c08:	10808004 	addi	r2,r2,512
 1006c0c:	1080030b 	ldhu	r2,12(r2)
 1006c10:	10bfffcc 	andi	r2,r2,65535
 1006c14:	10a0001c 	xori	r2,r2,32768
 1006c18:	10a00004 	addi	r2,r2,-32768
 1006c1c:	10800044 	addi	r2,r2,1
 1006c20:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
 1006c24:	e0bfec17 	ldw	r2,-80(fp)
 1006c28:	113fff84 	addi	r4,r2,-2
 1006c2c:	00804074 	movhi	r2,257
 1006c30:	10808504 	addi	r2,r2,532
 1006c34:	10800383 	ldbu	r2,14(r2)
 1006c38:	11403fcc 	andi	r5,r2,255
 1006c3c:	1002dfc0 	call	1002dfc <__mulsi3>
 1006c40:	1007883a 	mov	r3,r2
 1006c44:	00804074 	movhi	r2,257
 1006c48:	10808504 	addi	r2,r2,532
 1006c4c:	10801417 	ldw	r2,80(r2)
 1006c50:	1885883a 	add	r2,r3,r2
 1006c54:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
 1006c58:	00804074 	movhi	r2,257
 1006c5c:	10808004 	addi	r2,r2,512
 1006c60:	10800217 	ldw	r2,8(r2)
 1006c64:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 1006c68:	00003406 	br	1006d3c <alt_up_sd_card_find_next+0x2e0>
							sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
 1006c6c:	e0ffe617 	ldw	r3,-104(fp)
 1006c70:	e0bfe717 	ldw	r2,-100(fp)
 1006c74:	1889883a 	add	r4,r3,r2
 1006c78:	d166c517 	ldw	r5,-25836(gp)
 1006c7c:	1003b300 	call	1003b30 <Read_Sector_Data>
 1006c80:	1005003a 	cmpeq	r2,r2,zero
 1006c84:	1000331e 	bne	r2,zero,1006d54 <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 1006c88:	00002506 	br	1006d20 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(
 1006c8c:	e0bfe817 	ldw	r2,-96(fp)
 1006c90:	1008917a 	slli	r4,r2,5
 1006c94:	e1bfec17 	ldw	r6,-80(fp)
 1006c98:	e1ffe617 	ldw	r7,-104(fp)
 1006c9c:	e17fee04 	addi	r5,fp,-72
 1006ca0:	1003f780 	call	1003f78 <Read_File_Record_At_Offset>
 1006ca4:	1005003a 	cmpeq	r2,r2,zero
 1006ca8:	10001a1e 	bne	r2,zero,1006d14 <alt_up_sd_card_find_next+0x2b8>
										file_counter * 32, &file_record,
										cluster, sector_index)) {
									if ((file_record.name[0] != 0)
 1006cac:	e0bfee03 	ldbu	r2,-72(fp)
 1006cb0:	10803fcc 	andi	r2,r2,255
 1006cb4:	1005003a 	cmpeq	r2,r2,zero
 1006cb8:	1000161e 	bne	r2,zero,1006d14 <alt_up_sd_card_find_next+0x2b8>
 1006cbc:	e0bfee03 	ldbu	r2,-72(fp)
 1006cc0:	10803fcc 	andi	r2,r2,255
 1006cc4:	10803960 	cmpeqi	r2,r2,229
 1006cc8:	1000121e 	bne	r2,zero,1006d14 <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index =
 1006ccc:	e0ffec17 	ldw	r3,-80(fp)
 1006cd0:	00804074 	movhi	r2,257
 1006cd4:	10808004 	addi	r2,r2,512
 1006cd8:	10c00115 	stw	r3,4(r2)
												cluster;
										search_data.file_index_in_sector =
 1006cdc:	e0bfe817 	ldw	r2,-96(fp)
 1006ce0:	1007883a 	mov	r3,r2
 1006ce4:	00804074 	movhi	r2,257
 1006ce8:	10808004 	addi	r2,r2,512
 1006cec:	10c0030d 	sth	r3,12(r2)
												file_counter;
										search_data.current_sector_in_cluster =
 1006cf0:	e0ffe617 	ldw	r3,-104(fp)
 1006cf4:	00804074 	movhi	r2,257
 1006cf8:	10808004 	addi	r2,r2,512
 1006cfc:	10c00215 	stw	r3,8(r2)
												sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
 1006d00:	e13fee04 	addi	r4,fp,-72
 1006d04:	e17ffe17 	ldw	r5,-8(fp)
 1006d08:	10066340 	call	1006634 <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
 1006d0c:	e03fff15 	stw	zero,-4(fp)
 1006d10:	00003806 	br	1006df4 <alt_up_sd_card_find_next+0x398>

					for (; sector_index < boot_sector_data.sectors_per_cluster;
							sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 1006d14:	e0bfe817 	ldw	r2,-96(fp)
 1006d18:	10800044 	addi	r2,r2,1
 1006d1c:	e0bfe815 	stw	r2,-96(fp)
 1006d20:	e0bfe817 	ldw	r2,-96(fp)
 1006d24:	10800410 	cmplti	r2,r2,16
 1006d28:	103fd81e 	bne	r2,zero,1006c8c <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 1006d2c:	e03fe815 	stw	zero,-96(fp)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
							sector_index++) {
 1006d30:	e0bfe617 	ldw	r2,-104(fp)
 1006d34:	10800044 	addi	r2,r2,1
 1006d38:	e0bfe615 	stw	r2,-104(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 1006d3c:	00804074 	movhi	r2,257
 1006d40:	10808504 	addi	r2,r2,532
 1006d44:	10800383 	ldbu	r2,14(r2)
 1006d48:	10c03fcc 	andi	r3,r2,255
 1006d4c:	e0bfe617 	ldw	r2,-104(fp)
 1006d50:	10ffc616 	blt	r2,r3,1006c6c <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
 1006d54:	00804074 	movhi	r2,257
 1006d58:	10808504 	addi	r2,r2,532
 1006d5c:	10800383 	ldbu	r2,14(r2)
 1006d60:	10c03fcc 	andi	r3,r2,255
 1006d64:	e0bfe617 	ldw	r2,-104(fp)
 1006d68:	10c01a16 	blt	r2,r3,1006dd4 <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
 1006d6c:	e13fec17 	ldw	r4,-80(fp)
 1006d70:	e17fed84 	addi	r5,fp,-74
 1006d74:	1003c2c0 	call	1003c2c <get_cluster_flag>
 1006d78:	1005003a 	cmpeq	r2,r2,zero
 1006d7c:	1000131e 	bne	r2,zero,1006dcc <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 1006d80:	e0bfed8b 	ldhu	r2,-74(fp)
 1006d84:	10bfffcc 	andi	r2,r2,65535
 1006d88:	10a0001c 	xori	r2,r2,32768
 1006d8c:	10a00004 	addi	r2,r2,-32768
 1006d90:	10fffe0c 	andi	r3,r2,65528
 1006d94:	00bffe14 	movui	r2,65528
 1006d98:	1880051e 	bne	r3,r2,1006db0 <alt_up_sd_card_find_next+0x354>
								result = -1;
 1006d9c:	00bfffc4 	movi	r2,-1
 1006da0:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
 1006da4:	00804074 	movhi	r2,257
 1006da8:	10808004 	addi	r2,r2,512
 1006dac:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 1006db0:	e0bfed8b 	ldhu	r2,-74(fp)
 1006db4:	10bfffcc 	andi	r2,r2,65535
 1006db8:	10a0001c 	xori	r2,r2,32768
 1006dbc:	10a00004 	addi	r2,r2,-32768
 1006dc0:	10bffe0c 	andi	r2,r2,65528
 1006dc4:	e0bfec15 	stw	r2,-80(fp)
 1006dc8:	00000206 	br	1006dd4 <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
 1006dcc:	00bfffc4 	movi	r2,-1
 1006dd0:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
 1006dd4:	e0ffec17 	ldw	r3,-80(fp)
 1006dd8:	00bffdd4 	movui	r2,65527
 1006ddc:	10ff910e 	bge	r2,r3,1006c24 <alt_up_sd_card_find_next+0x1c8>
 1006de0:	00000206 	br	1006dec <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
 1006de4:	008000c4 	movi	r2,3
 1006de8:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
 1006dec:	e0bfed0f 	ldh	r2,-76(fp)
 1006df0:	e0bfff15 	stw	r2,-4(fp)
 1006df4:	e0bfff17 	ldw	r2,-4(fp)
}
 1006df8:	e037883a 	mov	sp,fp
 1006dfc:	dfc00117 	ldw	ra,4(sp)
 1006e00:	df000017 	ldw	fp,0(sp)
 1006e04:	dec00204 	addi	sp,sp,8
 1006e08:	f800283a 	ret

01006e0c <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 1006e0c:	deffe804 	addi	sp,sp,-96
 1006e10:	dfc01715 	stw	ra,92(sp)
 1006e14:	df001615 	stw	fp,88(sp)
 1006e18:	df001604 	addi	fp,sp,88
 1006e1c:	e13ffd15 	stw	r4,-12(fp)
 1006e20:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
 1006e24:	00bfffc4 	movi	r2,-1
 1006e28:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1006e2c:	100684c0 	call	100684c <alt_up_sd_card_is_Present>
 1006e30:	1005003a 	cmpeq	r2,r2,zero
 1006e34:	1000d71e 	bne	r2,zero,1007194 <alt_up_sd_card_fopen+0x388>
 1006e38:	d0a6be17 	ldw	r2,-25864(gp)
 1006e3c:	1005003a 	cmpeq	r2,r2,zero
 1006e40:	1000d41e 	bne	r2,zero,1007194 <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
 1006e44:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
 1006e48:	e13ffd17 	ldw	r4,-12(fp)
 1006e4c:	1004c000 	call	1004c00 <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
 1006e50:	e13ffd17 	ldw	r4,-12(fp)
 1006e54:	1004cd00 	call	1004cd0 <check_file_name_for_FAT16_compliance>
 1006e58:	1005003a 	cmpeq	r2,r2,zero
 1006e5c:	1000cd1e 	bne	r2,zero,1007194 <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
 1006e60:	e17fec04 	addi	r5,fp,-80
 1006e64:	e1bfed04 	addi	r6,fp,-76
 1006e68:	e13ffd17 	ldw	r4,-12(fp)
 1006e6c:	100530c0 	call	100530c <get_home_directory_cluster_for_file>
 1006e70:	1004c03a 	cmpne	r2,r2,zero
 1006e74:	1000031e 	bne	r2,zero,1006e84 <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
 1006e78:	e0bfeb0f 	ldh	r2,-84(fp)
 1006e7c:	e0bfff15 	stw	r2,-4(fp)
 1006e80:	0000c606 	br	100719c <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 1006e84:	e03fea15 	stw	zero,-88(fp)
 1006e88:	00000f06 	br	1006ec8 <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
 1006e8c:	e0bfea17 	ldw	r2,-88(fp)
 1006e90:	00c04074 	movhi	r3,257
 1006e94:	18c09a04 	addi	r3,r3,616
 1006e98:	100491ba 	slli	r2,r2,6
 1006e9c:	10c5883a 	add	r2,r2,r3
 1006ea0:	10800f04 	addi	r2,r2,60
 1006ea4:	10800017 	ldw	r2,0(r2)
 1006ea8:	1004c03a 	cmpne	r2,r2,zero
 1006eac:	1000031e 	bne	r2,zero,1006ebc <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
 1006eb0:	e0bfea17 	ldw	r2,-88(fp)
 1006eb4:	e0bfeb0d 	sth	r2,-84(fp)
					break;
 1006eb8:	00000606 	br	1006ed4 <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 1006ebc:	e0bfea17 	ldw	r2,-88(fp)
 1006ec0:	10800044 	addi	r2,r2,1
 1006ec4:	e0bfea15 	stw	r2,-88(fp)
 1006ec8:	e0bfea17 	ldw	r2,-88(fp)
 1006ecc:	10800510 	cmplti	r2,r2,20
 1006ed0:	103fee1e 	bne	r2,zero,1006e8c <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
 1006ed4:	e0bfeb0f 	ldh	r2,-84(fp)
 1006ed8:	1004803a 	cmplt	r2,r2,zero
 1006edc:	1000ad1e 	bne	r2,zero,1007194 <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
 1006ee0:	e0bfec17 	ldw	r2,-80(fp)
 1006ee4:	1009883a 	mov	r4,r2
 1006ee8:	e0bfeb0f 	ldh	r2,-84(fp)
 1006eec:	100491ba 	slli	r2,r2,6
 1006ef0:	1007883a 	mov	r3,r2
 1006ef4:	00804074 	movhi	r2,257
 1006ef8:	10809a04 	addi	r2,r2,616
 1006efc:	188d883a 	add	r6,r3,r2
 1006f00:	e17ffd17 	ldw	r5,-12(fp)
 1006f04:	10058200 	call	1005820 <find_file_in_directory>
 1006f08:	1005003a 	cmpeq	r2,r2,zero
 1006f0c:	10007d1e 	bne	r2,zero,1007104 <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
 1006f10:	e0bffe17 	ldw	r2,-8(fp)
 1006f14:	1005003a 	cmpeq	r2,r2,zero
 1006f18:	1000031e 	bne	r2,zero,1006f28 <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
 1006f1c:	00bfffc4 	movi	r2,-1
 1006f20:	e0bfff15 	stw	r2,-4(fp)
 1006f24:	00009d06 	br	100719c <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index =
 1006f28:	e17feb0f 	ldh	r5,-84(fp)
 1006f2c:	e0bfeb0f 	ldh	r2,-84(fp)
 1006f30:	00c04074 	movhi	r3,257
 1006f34:	18c09a04 	addi	r3,r3,616
 1006f38:	100491ba 	slli	r2,r2,6
 1006f3c:	10c5883a 	add	r2,r2,r3
 1006f40:	10800504 	addi	r2,r2,20
 1006f44:	1080008b 	ldhu	r2,2(r2)
 1006f48:	113fffcc 	andi	r4,r2,65535
 1006f4c:	00c04074 	movhi	r3,257
 1006f50:	18c09a04 	addi	r3,r3,616
 1006f54:	280491ba 	slli	r2,r5,6
 1006f58:	10c5883a 	add	r2,r2,r3
 1006f5c:	10800704 	addi	r2,r2,28
 1006f60:	11000015 	stw	r4,0(r2)
							active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster =
 1006f64:	e0bfeb0f 	ldh	r2,-84(fp)
 1006f68:	00c04074 	movhi	r3,257
 1006f6c:	18c09a04 	addi	r3,r3,616
 1006f70:	100491ba 	slli	r2,r2,6
 1006f74:	10c5883a 	add	r2,r2,r3
 1006f78:	10800804 	addi	r2,r2,32
 1006f7c:	10000015 	stw	zero,0(r2)
							0;
					active_files[file_record_index].current_byte_position = 0;
 1006f80:	e0bfeb0f 	ldh	r2,-84(fp)
 1006f84:	00c04074 	movhi	r3,257
 1006f88:	18c09a04 	addi	r3,r3,616
 1006f8c:	100491ba 	slli	r2,r2,6
 1006f90:	10c5883a 	add	r2,r2,r3
 1006f94:	10800904 	addi	r2,r2,36
 1006f98:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
 1006f9c:	e0bfeb0f 	ldh	r2,-84(fp)
 1006fa0:	00c04074 	movhi	r3,257
 1006fa4:	18c09a04 	addi	r3,r3,616
 1006fa8:	100491ba 	slli	r2,r2,6
 1006fac:	10c5883a 	add	r2,r2,r3
 1006fb0:	10c00f04 	addi	r3,r2,60
 1006fb4:	00800044 	movi	r2,1
 1006fb8:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
 1006fbc:	e0bfeb0f 	ldh	r2,-84(fp)
 1006fc0:	00c04074 	movhi	r3,257
 1006fc4:	18c09a04 	addi	r3,r3,616
 1006fc8:	100491ba 	slli	r2,r2,6
 1006fcc:	10c5883a 	add	r2,r2,r3
 1006fd0:	10800e04 	addi	r2,r2,56
 1006fd4:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 1006fd8:	e03fea15 	stw	zero,-88(fp)
 1006fdc:	00004506 	br	10070f4 <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
 1006fe0:	e0ffeb0f 	ldh	r3,-84(fp)
 1006fe4:	e0bfea17 	ldw	r2,-88(fp)
 1006fe8:	18803f26 	beq	r3,r2,10070e8 <alt_up_sd_card_fopen+0x2dc>
 1006fec:	e0bfea17 	ldw	r2,-88(fp)
 1006ff0:	00c04074 	movhi	r3,257
 1006ff4:	18c09a04 	addi	r3,r3,616
 1006ff8:	100491ba 	slli	r2,r2,6
 1006ffc:	10c5883a 	add	r2,r2,r3
 1007000:	10800f04 	addi	r2,r2,60
 1007004:	10800017 	ldw	r2,0(r2)
 1007008:	10800058 	cmpnei	r2,r2,1
 100700c:	1000361e 	bne	r2,zero,10070e8 <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
 1007010:	e0bfeb0f 	ldh	r2,-84(fp)
 1007014:	00c04074 	movhi	r3,257
 1007018:	18c09a04 	addi	r3,r3,616
 100701c:	100491ba 	slli	r2,r2,6
 1007020:	10c5883a 	add	r2,r2,r3
 1007024:	10800a04 	addi	r2,r2,40
 1007028:	11000017 	ldw	r4,0(r2)
 100702c:	e0bfea17 	ldw	r2,-88(fp)
 1007030:	00c04074 	movhi	r3,257
 1007034:	18c09a04 	addi	r3,r3,616
 1007038:	100491ba 	slli	r2,r2,6
 100703c:	10c5883a 	add	r2,r2,r3
 1007040:	10800a04 	addi	r2,r2,40
 1007044:	10800017 	ldw	r2,0(r2)
 1007048:	2080271e 	bne	r4,r2,10070e8 <alt_up_sd_card_fopen+0x2dc>
 100704c:	e0bfeb0f 	ldh	r2,-84(fp)
 1007050:	00c04074 	movhi	r3,257
 1007054:	18c09a04 	addi	r3,r3,616
 1007058:	100491ba 	slli	r2,r2,6
 100705c:	10c5883a 	add	r2,r2,r3
 1007060:	10800b04 	addi	r2,r2,44
 1007064:	11000017 	ldw	r4,0(r2)
 1007068:	e0bfea17 	ldw	r2,-88(fp)
 100706c:	00c04074 	movhi	r3,257
 1007070:	18c09a04 	addi	r3,r3,616
 1007074:	100491ba 	slli	r2,r2,6
 1007078:	10c5883a 	add	r2,r2,r3
 100707c:	10800b04 	addi	r2,r2,44
 1007080:	10800017 	ldw	r2,0(r2)
 1007084:	2080181e 	bne	r4,r2,10070e8 <alt_up_sd_card_fopen+0x2dc>
 1007088:	e0bfeb0f 	ldh	r2,-84(fp)
 100708c:	00c04074 	movhi	r3,257
 1007090:	18c09a04 	addi	r3,r3,616
 1007094:	100491ba 	slli	r2,r2,6
 1007098:	10c5883a 	add	r2,r2,r3
 100709c:	10800c04 	addi	r2,r2,48
 10070a0:	1100000b 	ldhu	r4,0(r2)
 10070a4:	e0bfea17 	ldw	r2,-88(fp)
 10070a8:	00c04074 	movhi	r3,257
 10070ac:	18c09a04 	addi	r3,r3,616
 10070b0:	100491ba 	slli	r2,r2,6
 10070b4:	10c5883a 	add	r2,r2,r3
 10070b8:	10800c04 	addi	r2,r2,48
 10070bc:	1080000b 	ldhu	r2,0(r2)
 10070c0:	20ffffcc 	andi	r3,r4,65535
 10070c4:	18e0001c 	xori	r3,r3,32768
 10070c8:	18e00004 	addi	r3,r3,-32768
 10070cc:	10bfffcc 	andi	r2,r2,65535
 10070d0:	10a0001c 	xori	r2,r2,32768
 10070d4:	10a00004 	addi	r2,r2,-32768
 10070d8:	1880031e 	bne	r3,r2,10070e8 <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
 10070dc:	00bfff84 	movi	r2,-2
 10070e0:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 10070e4:	00002b06 	br	1007194 <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 10070e8:	e0bfea17 	ldw	r2,-88(fp)
 10070ec:	10800044 	addi	r2,r2,1
 10070f0:	e0bfea15 	stw	r2,-88(fp)
 10070f4:	e0bfea17 	ldw	r2,-88(fp)
 10070f8:	10800510 	cmplti	r2,r2,20
 10070fc:	103fb81e 	bne	r2,zero,1006fe0 <alt_up_sd_card_fopen+0x1d4>
 1007100:	00002406 	br	1007194 <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
 1007104:	e0bffe17 	ldw	r2,-8(fp)
 1007108:	1005003a 	cmpeq	r2,r2,zero
 100710c:	10001f1e 	bne	r2,zero,100718c <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
 1007110:	e0bfeb0f 	ldh	r2,-84(fp)
 1007114:	100491ba 	slli	r2,r2,6
 1007118:	1007883a 	mov	r3,r2
 100711c:	00804074 	movhi	r2,257
 1007120:	10809a04 	addi	r2,r2,616
 1007124:	188b883a 	add	r5,r3,r2
 1007128:	e1bfed04 	addi	r6,fp,-76
 100712c:	e13ffd17 	ldw	r4,-12(fp)
 1007130:	10063580 	call	1006358 <create_file>
 1007134:	1005003a 	cmpeq	r2,r2,zero
 1007138:	1000111e 	bne	r2,zero,1007180 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
 100713c:	e0bfeb0f 	ldh	r2,-84(fp)
 1007140:	00c04074 	movhi	r3,257
 1007144:	18c09a04 	addi	r3,r3,616
 1007148:	100491ba 	slli	r2,r2,6
 100714c:	10c5883a 	add	r2,r2,r3
 1007150:	10c00f04 	addi	r3,r2,60
 1007154:	00800044 	movi	r2,1
 1007158:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
 100715c:	e0bfeb0f 	ldh	r2,-84(fp)
 1007160:	00c04074 	movhi	r3,257
 1007164:	18c09a04 	addi	r3,r3,616
 1007168:	100491ba 	slli	r2,r2,6
 100716c:	10c5883a 	add	r2,r2,r3
 1007170:	10c00e04 	addi	r3,r2,56
 1007174:	00800044 	movi	r2,1
 1007178:	18800015 	stw	r2,0(r3)
 100717c:	00000506 	br	1007194 <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
 1007180:	00bfffc4 	movi	r2,-1
 1007184:	e0bfeb0d 	sth	r2,-84(fp)
 1007188:	00000206 	br	1007194 <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
 100718c:	00bfffc4 	movi	r2,-1
 1007190:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
 1007194:	e0bfeb0f 	ldh	r2,-84(fp)
 1007198:	e0bfff15 	stw	r2,-4(fp)
 100719c:	e0bfff17 	ldw	r2,-4(fp)
}
 10071a0:	e037883a 	mov	sp,fp
 10071a4:	dfc00117 	ldw	ra,4(sp)
 10071a8:	df000017 	ldw	fp,0(sp)
 10071ac:	dec00204 	addi	sp,sp,8
 10071b0:	f800283a 	ret

010071b4 <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 10071b4:	defffd04 	addi	sp,sp,-12
 10071b8:	df000215 	stw	fp,8(sp)
 10071bc:	df000204 	addi	fp,sp,8
 10071c0:	e13ffe0d 	sth	r4,-8(fp)
 10071c4:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 10071c8:	e0bffe0f 	ldh	r2,-8(fp)
 10071cc:	1004803a 	cmplt	r2,r2,zero
 10071d0:	1000181e 	bne	r2,zero,1007234 <alt_up_sd_card_set_attributes+0x80>
 10071d4:	e0bffe0f 	ldh	r2,-8(fp)
 10071d8:	10800508 	cmpgei	r2,r2,20
 10071dc:	1000151e 	bne	r2,zero,1007234 <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
 10071e0:	e0bffe0f 	ldh	r2,-8(fp)
 10071e4:	00c04074 	movhi	r3,257
 10071e8:	18c09a04 	addi	r3,r3,616
 10071ec:	100491ba 	slli	r2,r2,6
 10071f0:	10c5883a 	add	r2,r2,r3
 10071f4:	10800f04 	addi	r2,r2,60
 10071f8:	10800017 	ldw	r2,0(r2)
 10071fc:	1005003a 	cmpeq	r2,r2,zero
 1007200:	10000c1e 	bne	r2,zero,1007234 <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes =
 1007204:	e17ffe0f 	ldh	r5,-8(fp)
 1007208:	e0bfff0b 	ldhu	r2,-4(fp)
 100720c:	1007883a 	mov	r3,r2
 1007210:	00bfffc4 	movi	r2,-1
 1007214:	1884703a 	and	r2,r3,r2
 1007218:	1009883a 	mov	r4,r2
 100721c:	00c04074 	movhi	r3,257
 1007220:	18c09a04 	addi	r3,r3,616
 1007224:	280491ba 	slli	r2,r5,6
 1007228:	10c5883a 	add	r2,r2,r3
 100722c:	10800204 	addi	r2,r2,8
 1007230:	110000c5 	stb	r4,3(r2)
					((char) (attributes & 0x00ff));
		}
	}
}
 1007234:	e037883a 	mov	sp,fp
 1007238:	df000017 	ldw	fp,0(sp)
 100723c:	dec00104 	addi	sp,sp,4
 1007240:	f800283a 	ret

01007244 <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 1007244:	defffd04 	addi	sp,sp,-12
 1007248:	df000215 	stw	fp,8(sp)
 100724c:	df000204 	addi	fp,sp,8
 1007250:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
 1007254:	00bfffc4 	movi	r2,-1
 1007258:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 100725c:	e0bfff0f 	ldh	r2,-4(fp)
 1007260:	1004803a 	cmplt	r2,r2,zero
 1007264:	1000151e 	bne	r2,zero,10072bc <alt_up_sd_card_get_attributes+0x78>
 1007268:	e0bfff0f 	ldh	r2,-4(fp)
 100726c:	10800508 	cmpgei	r2,r2,20
 1007270:	1000121e 	bne	r2,zero,10072bc <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
 1007274:	e0bfff0f 	ldh	r2,-4(fp)
 1007278:	00c04074 	movhi	r3,257
 100727c:	18c09a04 	addi	r3,r3,616
 1007280:	100491ba 	slli	r2,r2,6
 1007284:	10c5883a 	add	r2,r2,r3
 1007288:	10800f04 	addi	r2,r2,60
 100728c:	10800017 	ldw	r2,0(r2)
 1007290:	1005003a 	cmpeq	r2,r2,zero
 1007294:	1000091e 	bne	r2,zero,10072bc <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
 1007298:	e0bfff0f 	ldh	r2,-4(fp)
 100729c:	00c04074 	movhi	r3,257
 10072a0:	18c09a04 	addi	r3,r3,616
 10072a4:	100491ba 	slli	r2,r2,6
 10072a8:	10c5883a 	add	r2,r2,r3
 10072ac:	10800204 	addi	r2,r2,8
 10072b0:	108000c3 	ldbu	r2,3(r2)
 10072b4:	10803fcc 	andi	r2,r2,255
 10072b8:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 10072bc:	e0bffe0f 	ldh	r2,-8(fp)
}
 10072c0:	e037883a 	mov	sp,fp
 10072c4:	df000017 	ldw	fp,0(sp)
 10072c8:	dec00104 	addi	sp,sp,4
 10072cc:	f800283a 	ret

010072d0 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 10072d0:	defff904 	addi	sp,sp,-28
 10072d4:	dfc00615 	stw	ra,24(sp)
 10072d8:	df000515 	stw	fp,20(sp)
 10072dc:	dc000415 	stw	r16,16(sp)
 10072e0:	df000404 	addi	fp,sp,16
 10072e4:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
 10072e8:	00bfffc4 	movi	r2,-1
 10072ec:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 10072f0:	e0bffe0f 	ldh	r2,-8(fp)
 10072f4:	1004803a 	cmplt	r2,r2,zero
 10072f8:	1000d31e 	bne	r2,zero,1007648 <alt_up_sd_card_read+0x378>
 10072fc:	e0bffe0f 	ldh	r2,-8(fp)
 1007300:	10800508 	cmpgei	r2,r2,20
 1007304:	1000d01e 	bne	r2,zero,1007648 <alt_up_sd_card_read+0x378>
		if (active_files[file_handle].in_use) {
 1007308:	e0bffe0f 	ldh	r2,-8(fp)
 100730c:	00c04074 	movhi	r3,257
 1007310:	18c09a04 	addi	r3,r3,616
 1007314:	100491ba 	slli	r2,r2,6
 1007318:	10c5883a 	add	r2,r2,r3
 100731c:	10800f04 	addi	r2,r2,60
 1007320:	10800017 	ldw	r2,0(r2)
 1007324:	1005003a 	cmpeq	r2,r2,zero
 1007328:	1000c71e 	bne	r2,zero,1007648 <alt_up_sd_card_read+0x378>
			if (active_files[file_handle].current_byte_position
 100732c:	e0bffe0f 	ldh	r2,-8(fp)
 1007330:	00c04074 	movhi	r3,257
 1007334:	18c09a04 	addi	r3,r3,616
 1007338:	100491ba 	slli	r2,r2,6
 100733c:	10c5883a 	add	r2,r2,r3
 1007340:	10800904 	addi	r2,r2,36
 1007344:	11000017 	ldw	r4,0(r2)
 1007348:	e0bffe0f 	ldh	r2,-8(fp)
 100734c:	00c04074 	movhi	r3,257
 1007350:	18c09a04 	addi	r3,r3,616
 1007354:	100491ba 	slli	r2,r2,6
 1007358:	10c5883a 	add	r2,r2,r3
 100735c:	10800604 	addi	r2,r2,24
 1007360:	10800017 	ldw	r2,0(r2)
 1007364:	2080b82e 	bgeu	r4,r2,1007648 <alt_up_sd_card_read+0x378>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
 1007368:	00804074 	movhi	r2,257
 100736c:	10808504 	addi	r2,r2,532
 1007370:	14001417 	ldw	r16,80(r2)
 1007374:	e0bffe0f 	ldh	r2,-8(fp)
 1007378:	00c04074 	movhi	r3,257
 100737c:	18c09a04 	addi	r3,r3,616
 1007380:	100491ba 	slli	r2,r2,6
 1007384:	10c5883a 	add	r2,r2,r3
 1007388:	10800704 	addi	r2,r2,28
 100738c:	10800017 	ldw	r2,0(r2)
 1007390:	113fff84 	addi	r4,r2,-2
 1007394:	00804074 	movhi	r2,257
 1007398:	10808504 	addi	r2,r2,532
 100739c:	10800383 	ldbu	r2,14(r2)
 10073a0:	11403fcc 	andi	r5,r2,255
 10073a4:	1002dfc0 	call	1002dfc <__mulsi3>
 10073a8:	8089883a 	add	r4,r16,r2
 10073ac:	e0bffe0f 	ldh	r2,-8(fp)
 10073b0:	00c04074 	movhi	r3,257
 10073b4:	18c09a04 	addi	r3,r3,616
 10073b8:	100491ba 	slli	r2,r2,6
 10073bc:	10c5883a 	add	r2,r2,r3
 10073c0:	10800804 	addi	r2,r2,32
 10073c4:	10800017 	ldw	r2,0(r2)
 10073c8:	2085883a 	add	r2,r4,r2
 10073cc:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
 10073d0:	e0bffe0f 	ldh	r2,-8(fp)
 10073d4:	00c04074 	movhi	r3,257
 10073d8:	18c09a04 	addi	r3,r3,616
 10073dc:	100491ba 	slli	r2,r2,6
 10073e0:	10c5883a 	add	r2,r2,r3
 10073e4:	10800904 	addi	r2,r2,36
 10073e8:	10800017 	ldw	r2,0(r2)
 10073ec:	1005003a 	cmpeq	r2,r2,zero
 10073f0:	10006a1e 	bne	r2,zero,100759c <alt_up_sd_card_read+0x2cc>
 10073f4:	e0bffe0f 	ldh	r2,-8(fp)
 10073f8:	00c04074 	movhi	r3,257
 10073fc:	18c09a04 	addi	r3,r3,616
 1007400:	100491ba 	slli	r2,r2,6
 1007404:	10c5883a 	add	r2,r2,r3
 1007408:	10800904 	addi	r2,r2,36
 100740c:	10800017 	ldw	r2,0(r2)
 1007410:	10807fcc 	andi	r2,r2,511
 1007414:	1004c03a 	cmpne	r2,r2,zero
 1007418:	1000601e 	bne	r2,zero,100759c <alt_up_sd_card_read+0x2cc>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 100741c:	e0bffe0f 	ldh	r2,-8(fp)
 1007420:	00c04074 	movhi	r3,257
 1007424:	18c09a04 	addi	r3,r3,616
 1007428:	100491ba 	slli	r2,r2,6
 100742c:	10c5883a 	add	r2,r2,r3
 1007430:	10800804 	addi	r2,r2,32
 1007434:	10c00017 	ldw	r3,0(r2)
 1007438:	00804074 	movhi	r2,257
 100743c:	10808504 	addi	r2,r2,532
 1007440:	10800383 	ldbu	r2,14(r2)
 1007444:	10803fcc 	andi	r2,r2,255
 1007448:	10bfffc4 	addi	r2,r2,-1
 100744c:	1880411e 	bne	r3,r2,1007554 <alt_up_sd_card_read+0x284>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 1007450:	e0bffe0f 	ldh	r2,-8(fp)
 1007454:	00c04074 	movhi	r3,257
 1007458:	18c09a04 	addi	r3,r3,616
 100745c:	100491ba 	slli	r2,r2,6
 1007460:	10c5883a 	add	r2,r2,r3
 1007464:	10800704 	addi	r2,r2,28
 1007468:	11000017 	ldw	r4,0(r2)
 100746c:	e17ffd84 	addi	r5,fp,-10
 1007470:	1003c2c0 	call	1003c2c <get_cluster_flag>
 1007474:	1005003a 	cmpeq	r2,r2,zero
 1007478:	1000331e 	bne	r2,zero,1007548 <alt_up_sd_card_read+0x278>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 100747c:	e0bffd8b 	ldhu	r2,-10(fp)
 1007480:	10bfffcc 	andi	r2,r2,65535
 1007484:	10fffe0c 	andi	r3,r2,65528
 1007488:	00bffe14 	movui	r2,65528
 100748c:	1880031e 	bne	r3,r2,100749c <alt_up_sd_card_read+0x1cc>
								/* End of file */
								return -1;
 1007490:	00bfffc4 	movi	r2,-1
 1007494:	e0bfff15 	stw	r2,-4(fp)
 1007498:	00006d06 	br	1007650 <alt_up_sd_card_read+0x380>
							} else {
								active_files[file_handle].current_cluster_index =
 100749c:	e13ffe0f 	ldh	r4,-8(fp)
 10074a0:	e0bffd8b 	ldhu	r2,-10(fp)
 10074a4:	117fffcc 	andi	r5,r2,65535
 10074a8:	00c04074 	movhi	r3,257
 10074ac:	18c09a04 	addi	r3,r3,616
 10074b0:	200491ba 	slli	r2,r4,6
 10074b4:	10c5883a 	add	r2,r2,r3
 10074b8:	10800704 	addi	r2,r2,28
 10074bc:	11400015 	stw	r5,0(r2)
										next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 10074c0:	e0bffe0f 	ldh	r2,-8(fp)
 10074c4:	00c04074 	movhi	r3,257
 10074c8:	18c09a04 	addi	r3,r3,616
 10074cc:	100491ba 	slli	r2,r2,6
 10074d0:	10c5883a 	add	r2,r2,r3
 10074d4:	10800804 	addi	r2,r2,32
 10074d8:	10000015 	stw	zero,0(r2)
										0;
								data_sector =
 10074dc:	00804074 	movhi	r2,257
 10074e0:	10808504 	addi	r2,r2,532
 10074e4:	14001417 	ldw	r16,80(r2)
 10074e8:	e0bffe0f 	ldh	r2,-8(fp)
 10074ec:	00c04074 	movhi	r3,257
 10074f0:	18c09a04 	addi	r3,r3,616
 10074f4:	100491ba 	slli	r2,r2,6
 10074f8:	10c5883a 	add	r2,r2,r3
 10074fc:	10800704 	addi	r2,r2,28
 1007500:	10800017 	ldw	r2,0(r2)
 1007504:	113fff84 	addi	r4,r2,-2
 1007508:	00804074 	movhi	r2,257
 100750c:	10808504 	addi	r2,r2,532
 1007510:	10800383 	ldbu	r2,14(r2)
 1007514:	11403fcc 	andi	r5,r2,255
 1007518:	1002dfc0 	call	1002dfc <__mulsi3>
 100751c:	8089883a 	add	r4,r16,r2
 1007520:	e0bffe0f 	ldh	r2,-8(fp)
 1007524:	00c04074 	movhi	r3,257
 1007528:	18c09a04 	addi	r3,r3,616
 100752c:	100491ba 	slli	r2,r2,6
 1007530:	10c5883a 	add	r2,r2,r3
 1007534:	10800804 	addi	r2,r2,32
 1007538:	10800017 	ldw	r2,0(r2)
 100753c:	2085883a 	add	r2,r4,r2
 1007540:	e0bffc15 	stw	r2,-16(fp)
 1007544:	00001506 	br	100759c <alt_up_sd_card_read+0x2cc>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
 1007548:	00bfff84 	movi	r2,-2
 100754c:	e0bfff15 	stw	r2,-4(fp)
 1007550:	00003f06 	br	1007650 <alt_up_sd_card_read+0x380>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster =
 1007554:	e17ffe0f 	ldh	r5,-8(fp)
 1007558:	e0bffe0f 	ldh	r2,-8(fp)
 100755c:	00c04074 	movhi	r3,257
 1007560:	18c09a04 	addi	r3,r3,616
 1007564:	100491ba 	slli	r2,r2,6
 1007568:	10c5883a 	add	r2,r2,r3
 100756c:	10800804 	addi	r2,r2,32
 1007570:	10800017 	ldw	r2,0(r2)
 1007574:	11000044 	addi	r4,r2,1
 1007578:	00c04074 	movhi	r3,257
 100757c:	18c09a04 	addi	r3,r3,616
 1007580:	280491ba 	slli	r2,r5,6
 1007584:	10c5883a 	add	r2,r2,r3
 1007588:	10800804 	addi	r2,r2,32
 100758c:	11000015 	stw	r4,0(r2)
								active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
 1007590:	e0bffc17 	ldw	r2,-16(fp)
 1007594:	10800044 	addi	r2,r2,1
 1007598:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index
 100759c:	d0e6c517 	ldw	r3,-25836(gp)
 10075a0:	e0bffc17 	ldw	r2,-16(fp)
 10075a4:	1885883a 	add	r2,r3,r2
 10075a8:	1007883a 	mov	r3,r2
 10075ac:	d0a6c917 	ldw	r2,-25820(gp)
 10075b0:	18800826 	beq	r3,r2,10075d4 <alt_up_sd_card_read+0x304>
						!= (data_sector
								+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
 10075b4:	d166c517 	ldw	r5,-25836(gp)
 10075b8:	e13ffc17 	ldw	r4,-16(fp)
 10075bc:	1003b300 	call	1003b30 <Read_Sector_Data>
 10075c0:	1004c03a 	cmpne	r2,r2,zero
 10075c4:	1000031e 	bne	r2,zero,10075d4 <alt_up_sd_card_read+0x304>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
 10075c8:	00bfff84 	movi	r2,-2
 10075cc:	e0bfff15 	stw	r2,-4(fp)
 10075d0:	00001f06 	br	1007650 <alt_up_sd_card_read+0x380>
					}
				}

				ch =
 10075d4:	e0bffe0f 	ldh	r2,-8(fp)
 10075d8:	00c04074 	movhi	r3,257
 10075dc:	18c09a04 	addi	r3,r3,616
 10075e0:	100491ba 	slli	r2,r2,6
 10075e4:	10c5883a 	add	r2,r2,r3
 10075e8:	10800904 	addi	r2,r2,36
 10075ec:	10800017 	ldw	r2,0(r2)
 10075f0:	10807fcc 	andi	r2,r2,511
 10075f4:	1007883a 	mov	r3,r2
 10075f8:	d0a6c417 	ldw	r2,-25840(gp)
 10075fc:	1885883a 	add	r2,r3,r2
 1007600:	10800023 	ldbuio	r2,0(r2)
 1007604:	10803fcc 	andi	r2,r2,255
 1007608:	e0bffd0d 	sth	r2,-12(fp)
						(unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position =
 100760c:	e17ffe0f 	ldh	r5,-8(fp)
 1007610:	e0bffe0f 	ldh	r2,-8(fp)
 1007614:	00c04074 	movhi	r3,257
 1007618:	18c09a04 	addi	r3,r3,616
 100761c:	100491ba 	slli	r2,r2,6
 1007620:	10c5883a 	add	r2,r2,r3
 1007624:	10800904 	addi	r2,r2,36
 1007628:	10800017 	ldw	r2,0(r2)
 100762c:	11000044 	addi	r4,r2,1
 1007630:	00c04074 	movhi	r3,257
 1007634:	18c09a04 	addi	r3,r3,616
 1007638:	280491ba 	slli	r2,r5,6
 100763c:	10c5883a 	add	r2,r2,r3
 1007640:	10800904 	addi	r2,r2,36
 1007644:	11000015 	stw	r4,0(r2)
						active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
 1007648:	e0bffd0f 	ldh	r2,-12(fp)
 100764c:	e0bfff15 	stw	r2,-4(fp)
 1007650:	e0bfff17 	ldw	r2,-4(fp)
}
 1007654:	e037883a 	mov	sp,fp
 1007658:	dfc00217 	ldw	ra,8(sp)
 100765c:	df000117 	ldw	fp,4(sp)
 1007660:	dc000017 	ldw	r16,0(sp)
 1007664:	dec00304 	addi	sp,sp,12
 1007668:	f800283a 	ret

0100766c <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 100766c:	defff504 	addi	sp,sp,-44
 1007670:	dfc00a15 	stw	ra,40(sp)
 1007674:	df000915 	stw	fp,36(sp)
 1007678:	dc000815 	stw	r16,32(sp)
 100767c:	df000804 	addi	fp,sp,32
 1007680:	e13ffd0d 	sth	r4,-12(fp)
 1007684:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
 1007688:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 100768c:	e0bffd0f 	ldh	r2,-12(fp)
 1007690:	1004803a 	cmplt	r2,r2,zero
 1007694:	10017b1e 	bne	r2,zero,1007c84 <alt_up_sd_card_write+0x618>
 1007698:	e0bffd0f 	ldh	r2,-12(fp)
 100769c:	10800508 	cmpgei	r2,r2,20
 10076a0:	1001781e 	bne	r2,zero,1007c84 <alt_up_sd_card_write+0x618>
		if (active_files[file_handle].in_use) {
 10076a4:	e0bffd0f 	ldh	r2,-12(fp)
 10076a8:	00c04074 	movhi	r3,257
 10076ac:	18c09a04 	addi	r3,r3,616
 10076b0:	100491ba 	slli	r2,r2,6
 10076b4:	10c5883a 	add	r2,r2,r3
 10076b8:	10800f04 	addi	r2,r2,60
 10076bc:	10800017 	ldw	r2,0(r2)
 10076c0:	1005003a 	cmpeq	r2,r2,zero
 10076c4:	10016f1e 	bne	r2,zero,1007c84 <alt_up_sd_card_write+0x618>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
 10076c8:	00804074 	movhi	r2,257
 10076cc:	10808504 	addi	r2,r2,532
 10076d0:	14001417 	ldw	r16,80(r2)
 10076d4:	e0bffd0f 	ldh	r2,-12(fp)
 10076d8:	00c04074 	movhi	r3,257
 10076dc:	18c09a04 	addi	r3,r3,616
 10076e0:	100491ba 	slli	r2,r2,6
 10076e4:	10c5883a 	add	r2,r2,r3
 10076e8:	10800704 	addi	r2,r2,28
 10076ec:	10800017 	ldw	r2,0(r2)
 10076f0:	113fff84 	addi	r4,r2,-2
 10076f4:	00804074 	movhi	r2,257
 10076f8:	10808504 	addi	r2,r2,532
 10076fc:	10800383 	ldbu	r2,14(r2)
 1007700:	11403fcc 	andi	r5,r2,255
 1007704:	1002dfc0 	call	1002dfc <__mulsi3>
 1007708:	8089883a 	add	r4,r16,r2
 100770c:	e0bffd0f 	ldh	r2,-12(fp)
 1007710:	00c04074 	movhi	r3,257
 1007714:	18c09a04 	addi	r3,r3,616
 1007718:	100491ba 	slli	r2,r2,6
 100771c:	10c5883a 	add	r2,r2,r3
 1007720:	10800804 	addi	r2,r2,32
 1007724:	10800017 	ldw	r2,0(r2)
 1007728:	2085883a 	add	r2,r4,r2
 100772c:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
 1007730:	e0bffd0f 	ldh	r2,-12(fp)
 1007734:	00c04074 	movhi	r3,257
 1007738:	18c09a04 	addi	r3,r3,616
 100773c:	100491ba 	slli	r2,r2,6
 1007740:	10c5883a 	add	r2,r2,r3
 1007744:	10800904 	addi	r2,r2,36
 1007748:	11000017 	ldw	r4,0(r2)
 100774c:	00804074 	movhi	r2,257
 1007750:	10808504 	addi	r2,r2,532
 1007754:	1080030b 	ldhu	r2,12(r2)
 1007758:	117fffcc 	andi	r5,r2,65535
 100775c:	100c61c0 	call	100c61c <__umodsi3>
 1007760:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
 1007764:	e0bffd0f 	ldh	r2,-12(fp)
 1007768:	00c04074 	movhi	r3,257
 100776c:	18c09a04 	addi	r3,r3,616
 1007770:	100491ba 	slli	r2,r2,6
 1007774:	10c5883a 	add	r2,r2,r3
 1007778:	10800904 	addi	r2,r2,36
 100777c:	11000017 	ldw	r4,0(r2)
 1007780:	e0bffd0f 	ldh	r2,-12(fp)
 1007784:	00c04074 	movhi	r3,257
 1007788:	18c09a04 	addi	r3,r3,616
 100778c:	100491ba 	slli	r2,r2,6
 1007790:	10c5883a 	add	r2,r2,r3
 1007794:	10800604 	addi	r2,r2,24
 1007798:	10800017 	ldw	r2,0(r2)
 100779c:	2080682e 	bgeu	r4,r2,1007940 <alt_up_sd_card_write+0x2d4>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
 10077a0:	e0bffd0f 	ldh	r2,-12(fp)
 10077a4:	00c04074 	movhi	r3,257
 10077a8:	18c09a04 	addi	r3,r3,616
 10077ac:	100491ba 	slli	r2,r2,6
 10077b0:	10c5883a 	add	r2,r2,r3
 10077b4:	10800904 	addi	r2,r2,36
 10077b8:	10800017 	ldw	r2,0(r2)
 10077bc:	1005003a 	cmpeq	r2,r2,zero
 10077c0:	1000e41e 	bne	r2,zero,1007b54 <alt_up_sd_card_write+0x4e8>
 10077c4:	e0bff80f 	ldh	r2,-32(fp)
 10077c8:	1004c03a 	cmpne	r2,r2,zero
 10077cc:	1000e11e 	bne	r2,zero,1007b54 <alt_up_sd_card_write+0x4e8>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 10077d0:	e0bffd0f 	ldh	r2,-12(fp)
 10077d4:	00c04074 	movhi	r3,257
 10077d8:	18c09a04 	addi	r3,r3,616
 10077dc:	100491ba 	slli	r2,r2,6
 10077e0:	10c5883a 	add	r2,r2,r3
 10077e4:	10800804 	addi	r2,r2,32
 10077e8:	10c00017 	ldw	r3,0(r2)
 10077ec:	00804074 	movhi	r2,257
 10077f0:	10808504 	addi	r2,r2,532
 10077f4:	10800383 	ldbu	r2,14(r2)
 10077f8:	10803fcc 	andi	r2,r2,255
 10077fc:	10bfffc4 	addi	r2,r2,-1
 1007800:	18803c1e 	bne	r3,r2,10078f4 <alt_up_sd_card_write+0x288>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 1007804:	e0bffd0f 	ldh	r2,-12(fp)
 1007808:	00c04074 	movhi	r3,257
 100780c:	18c09a04 	addi	r3,r3,616
 1007810:	100491ba 	slli	r2,r2,6
 1007814:	10c5883a 	add	r2,r2,r3
 1007818:	10800704 	addi	r2,r2,28
 100781c:	11000017 	ldw	r4,0(r2)
 1007820:	e17ffb04 	addi	r5,fp,-20
 1007824:	1003c2c0 	call	1003c2c <get_cluster_flag>
 1007828:	1005003a 	cmpeq	r2,r2,zero
 100782c:	10002f1e 	bne	r2,zero,10078ec <alt_up_sd_card_write+0x280>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
 1007830:	e0bffb0b 	ldhu	r2,-20(fp)
 1007834:	10ffffcc 	andi	r3,r2,65535
 1007838:	00bffdd4 	movui	r2,65527
 100783c:	10c0c536 	bltu	r2,r3,1007b54 <alt_up_sd_card_write+0x4e8>
								active_files[file_handle].current_cluster_index =
 1007840:	e13ffd0f 	ldh	r4,-12(fp)
 1007844:	e0bffb0b 	ldhu	r2,-20(fp)
 1007848:	117fffcc 	andi	r5,r2,65535
 100784c:	00c04074 	movhi	r3,257
 1007850:	18c09a04 	addi	r3,r3,616
 1007854:	200491ba 	slli	r2,r4,6
 1007858:	10c5883a 	add	r2,r2,r3
 100785c:	10800704 	addi	r2,r2,28
 1007860:	11400015 	stw	r5,0(r2)
										next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 1007864:	e0bffd0f 	ldh	r2,-12(fp)
 1007868:	00c04074 	movhi	r3,257
 100786c:	18c09a04 	addi	r3,r3,616
 1007870:	100491ba 	slli	r2,r2,6
 1007874:	10c5883a 	add	r2,r2,r3
 1007878:	10800804 	addi	r2,r2,32
 100787c:	10000015 	stw	zero,0(r2)
										0;
								data_sector =
 1007880:	00804074 	movhi	r2,257
 1007884:	10808504 	addi	r2,r2,532
 1007888:	14001417 	ldw	r16,80(r2)
 100788c:	e0bffd0f 	ldh	r2,-12(fp)
 1007890:	00c04074 	movhi	r3,257
 1007894:	18c09a04 	addi	r3,r3,616
 1007898:	100491ba 	slli	r2,r2,6
 100789c:	10c5883a 	add	r2,r2,r3
 10078a0:	10800704 	addi	r2,r2,28
 10078a4:	10800017 	ldw	r2,0(r2)
 10078a8:	113fff84 	addi	r4,r2,-2
 10078ac:	00804074 	movhi	r2,257
 10078b0:	10808504 	addi	r2,r2,532
 10078b4:	10800383 	ldbu	r2,14(r2)
 10078b8:	11403fcc 	andi	r5,r2,255
 10078bc:	1002dfc0 	call	1002dfc <__mulsi3>
 10078c0:	8089883a 	add	r4,r16,r2
 10078c4:	e0bffd0f 	ldh	r2,-12(fp)
 10078c8:	00c04074 	movhi	r3,257
 10078cc:	18c09a04 	addi	r3,r3,616
 10078d0:	100491ba 	slli	r2,r2,6
 10078d4:	10c5883a 	add	r2,r2,r3
 10078d8:	10800804 	addi	r2,r2,32
 10078dc:	10800017 	ldw	r2,0(r2)
 10078e0:	2085883a 	add	r2,r4,r2
 10078e4:	e0bff915 	stw	r2,-28(fp)
 10078e8:	00009a06 	br	1007b54 <alt_up_sd_card_write+0x4e8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
 10078ec:	e03fff15 	stw	zero,-4(fp)
 10078f0:	0000e606 	br	1007c8c <alt_up_sd_card_write+0x620>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
 10078f4:	e17ffd0f 	ldh	r5,-12(fp)
 10078f8:	e0bffd0f 	ldh	r2,-12(fp)
 10078fc:	00c04074 	movhi	r3,257
 1007900:	18c09a04 	addi	r3,r3,616
 1007904:	100491ba 	slli	r2,r2,6
 1007908:	10c5883a 	add	r2,r2,r3
 100790c:	10800804 	addi	r2,r2,32
 1007910:	10800017 	ldw	r2,0(r2)
 1007914:	11000044 	addi	r4,r2,1
 1007918:	00c04074 	movhi	r3,257
 100791c:	18c09a04 	addi	r3,r3,616
 1007920:	280491ba 	slli	r2,r5,6
 1007924:	10c5883a 	add	r2,r2,r3
 1007928:	10800804 	addi	r2,r2,32
 100792c:	11000015 	stw	r4,0(r2)
										+ 1;
//						active_files[file_handle].current_sector_in_cluster =
//								(active_files[file_handle].current_byte_position
//										/ boot_sector_data.sector_size_in_bytes)
//										% boot_sector_data.sectors_per_cluster;
						data_sector = data_sector + 1;
 1007930:	e0bff917 	ldw	r2,-28(fp)
 1007934:	10800044 	addi	r2,r2,1
 1007938:	e0bff915 	stw	r2,-28(fp)
 100793c:	00008506 	br	1007b54 <alt_up_sd_card_write+0x4e8>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
 1007940:	e0bffd0f 	ldh	r2,-12(fp)
 1007944:	00c04074 	movhi	r3,257
 1007948:	18c09a04 	addi	r3,r3,616
 100794c:	100491ba 	slli	r2,r2,6
 1007950:	10c5883a 	add	r2,r2,r3
 1007954:	10800904 	addi	r2,r2,36
 1007958:	10800017 	ldw	r2,0(r2)
 100795c:	1005003a 	cmpeq	r2,r2,zero
 1007960:	10007c1e 	bne	r2,zero,1007b54 <alt_up_sd_card_write+0x4e8>
 1007964:	e0bff80f 	ldh	r2,-32(fp)
 1007968:	1004c03a 	cmpne	r2,r2,zero
 100796c:	1000791e 	bne	r2,zero,1007b54 <alt_up_sd_card_write+0x4e8>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
 1007970:	e0bffd0f 	ldh	r2,-12(fp)
 1007974:	00c04074 	movhi	r3,257
 1007978:	18c09a04 	addi	r3,r3,616
 100797c:	100491ba 	slli	r2,r2,6
 1007980:	10c5883a 	add	r2,r2,r3
 1007984:	10800804 	addi	r2,r2,32
 1007988:	10c00017 	ldw	r3,0(r2)
 100798c:	00804074 	movhi	r2,257
 1007990:	10808504 	addi	r2,r2,532
 1007994:	10800383 	ldbu	r2,14(r2)
 1007998:	10803fcc 	andi	r2,r2,255
 100799c:	10bfffc4 	addi	r2,r2,-1
 10079a0:	1880381e 	bne	r3,r2,1007a84 <alt_up_sd_card_write+0x418>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
 10079a4:	e13ffc04 	addi	r4,fp,-16
 10079a8:	1005c840 	call	1005c84 <find_first_empty_cluster>
 10079ac:	1005003a 	cmpeq	r2,r2,zero
 10079b0:	1000321e 	bne	r2,zero,1007a7c <alt_up_sd_card_write+0x410>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
 10079b4:	e0bffd0f 	ldh	r2,-12(fp)
 10079b8:	00c04074 	movhi	r3,257
 10079bc:	18c09a04 	addi	r3,r3,616
 10079c0:	100491ba 	slli	r2,r2,6
 10079c4:	10c5883a 	add	r2,r2,r3
 10079c8:	10800704 	addi	r2,r2,28
 10079cc:	11000017 	ldw	r4,0(r2)
 10079d0:	e0bffc17 	ldw	r2,-16(fp)
 10079d4:	117fffcc 	andi	r5,r2,65535
 10079d8:	2960001c 	xori	r5,r5,32768
 10079dc:	29600004 	addi	r5,r5,-32768
 10079e0:	01800044 	movi	r6,1
 10079e4:	1003ce40 	call	1003ce4 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
 10079e8:	e13ffc17 	ldw	r4,-16(fp)
 10079ec:	017fffc4 	movi	r5,-1
 10079f0:	01800044 	movi	r6,1
 10079f4:	1003ce40 	call	1003ce4 <mark_cluster>
							mark_cluster(
 10079f8:	e0bffd0f 	ldh	r2,-12(fp)
 10079fc:	00c04074 	movhi	r3,257
 1007a00:	18c09a04 	addi	r3,r3,616
 1007a04:	100491ba 	slli	r2,r2,6
 1007a08:	10c5883a 	add	r2,r2,r3
 1007a0c:	10800704 	addi	r2,r2,28
 1007a10:	11000017 	ldw	r4,0(r2)
 1007a14:	e0bffc17 	ldw	r2,-16(fp)
 1007a18:	117fffcc 	andi	r5,r2,65535
 1007a1c:	2960001c 	xori	r5,r5,32768
 1007a20:	29600004 	addi	r5,r5,-32768
 1007a24:	000d883a 	mov	r6,zero
 1007a28:	1003ce40 	call	1003ce4 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
 1007a2c:	e13ffc17 	ldw	r4,-16(fp)
 1007a30:	017fffc4 	movi	r5,-1
 1007a34:	000d883a 	mov	r6,zero
 1007a38:	1003ce40 	call	1003ce4 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index =
 1007a3c:	e0bffd0f 	ldh	r2,-12(fp)
 1007a40:	e13ffc17 	ldw	r4,-16(fp)
 1007a44:	00c04074 	movhi	r3,257
 1007a48:	18c09a04 	addi	r3,r3,616
 1007a4c:	100491ba 	slli	r2,r2,6
 1007a50:	10c5883a 	add	r2,r2,r3
 1007a54:	10800704 	addi	r2,r2,28
 1007a58:	11000015 	stw	r4,0(r2)
									cluster_number;
							active_files[file_handle].current_sector_in_cluster =
 1007a5c:	e0bffd0f 	ldh	r2,-12(fp)
 1007a60:	00c04074 	movhi	r3,257
 1007a64:	18c09a04 	addi	r3,r3,616
 1007a68:	100491ba 	slli	r2,r2,6
 1007a6c:	10c5883a 	add	r2,r2,r3
 1007a70:	10800804 	addi	r2,r2,32
 1007a74:	10000015 	stw	zero,0(r2)
 1007a78:	00001c06 	br	1007aec <alt_up_sd_card_write+0x480>
									0;
						} else {
							return false;
 1007a7c:	e03fff15 	stw	zero,-4(fp)
 1007a80:	00008206 	br	1007c8c <alt_up_sd_card_write+0x620>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster =
 1007a84:	e43ffd0f 	ldh	r16,-12(fp)
 1007a88:	e0bffd0f 	ldh	r2,-12(fp)
 1007a8c:	00c04074 	movhi	r3,257
 1007a90:	18c09a04 	addi	r3,r3,616
 1007a94:	100491ba 	slli	r2,r2,6
 1007a98:	10c5883a 	add	r2,r2,r3
 1007a9c:	10800904 	addi	r2,r2,36
 1007aa0:	11000017 	ldw	r4,0(r2)
 1007aa4:	00804074 	movhi	r2,257
 1007aa8:	10808504 	addi	r2,r2,532
 1007aac:	1080030b 	ldhu	r2,12(r2)
 1007ab0:	117fffcc 	andi	r5,r2,65535
 1007ab4:	100c6140 	call	100c614 <__udivsi3>
 1007ab8:	1009883a 	mov	r4,r2
 1007abc:	00804074 	movhi	r2,257
 1007ac0:	10808504 	addi	r2,r2,532
 1007ac4:	10800383 	ldbu	r2,14(r2)
 1007ac8:	11403fcc 	andi	r5,r2,255
 1007acc:	100c61c0 	call	100c61c <__umodsi3>
 1007ad0:	1009883a 	mov	r4,r2
 1007ad4:	00c04074 	movhi	r3,257
 1007ad8:	18c09a04 	addi	r3,r3,616
 1007adc:	800491ba 	slli	r2,r16,6
 1007ae0:	10c5883a 	add	r2,r2,r3
 1007ae4:	10800804 	addi	r2,r2,32
 1007ae8:	11000015 	stw	r4,0(r2)
								(active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes) % boot_sector_data.sectors_per_cluster;
					}
					data_sector =
 1007aec:	00804074 	movhi	r2,257
 1007af0:	10808504 	addi	r2,r2,532
 1007af4:	14001417 	ldw	r16,80(r2)
 1007af8:	e0bffd0f 	ldh	r2,-12(fp)
 1007afc:	00c04074 	movhi	r3,257
 1007b00:	18c09a04 	addi	r3,r3,616
 1007b04:	100491ba 	slli	r2,r2,6
 1007b08:	10c5883a 	add	r2,r2,r3
 1007b0c:	10800704 	addi	r2,r2,28
 1007b10:	10800017 	ldw	r2,0(r2)
 1007b14:	113fff84 	addi	r4,r2,-2
 1007b18:	00804074 	movhi	r2,257
 1007b1c:	10808504 	addi	r2,r2,532
 1007b20:	10800383 	ldbu	r2,14(r2)
 1007b24:	11403fcc 	andi	r5,r2,255
 1007b28:	1002dfc0 	call	1002dfc <__mulsi3>
 1007b2c:	8089883a 	add	r4,r16,r2
 1007b30:	e0bffd0f 	ldh	r2,-12(fp)
 1007b34:	00c04074 	movhi	r3,257
 1007b38:	18c09a04 	addi	r3,r3,616
 1007b3c:	100491ba 	slli	r2,r2,6
 1007b40:	10c5883a 	add	r2,r2,r3
 1007b44:	10800804 	addi	r2,r2,32
 1007b48:	10800017 	ldw	r2,0(r2)
 1007b4c:	2085883a 	add	r2,r4,r2
 1007b50:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index
 1007b54:	d0e6c517 	ldw	r3,-25836(gp)
 1007b58:	e0bff917 	ldw	r2,-28(fp)
 1007b5c:	1885883a 	add	r2,r3,r2
 1007b60:	1007883a 	mov	r3,r2
 1007b64:	d0a6c917 	ldw	r2,-25820(gp)
 1007b68:	18800726 	beq	r3,r2,1007b88 <alt_up_sd_card_write+0x51c>
					!= data_sector + fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data_Attempt_CRC(data_sector,
 1007b6c:	d166c517 	ldw	r5,-25836(gp)
 1007b70:	e13ff917 	ldw	r4,-28(fp)
 1007b74:	1007fa40 	call	1007fa4 <Read_Sector_Data_Attempt_CRC>
 1007b78:	1004c03a 	cmpne	r2,r2,zero
 1007b7c:	1000021e 	bne	r2,zero,1007b88 <alt_up_sd_card_write+0x51c>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
 1007b80:	e03fff15 	stw	zero,-4(fp)
 1007b84:	00004106 	br	1007c8c <alt_up_sd_card_write+0x620>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 1007b88:	e0bff80f 	ldh	r2,-32(fp)
 1007b8c:	1007883a 	mov	r3,r2
 1007b90:	d0a6c417 	ldw	r2,-25840(gp)
 1007b94:	1885883a 	add	r2,r3,r2
 1007b98:	e0fffe07 	ldb	r3,-8(fp)
 1007b9c:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position =
 1007ba0:	e17ffd0f 	ldh	r5,-12(fp)
 1007ba4:	e0bffd0f 	ldh	r2,-12(fp)
 1007ba8:	00c04074 	movhi	r3,257
 1007bac:	18c09a04 	addi	r3,r3,616
 1007bb0:	100491ba 	slli	r2,r2,6
 1007bb4:	10c5883a 	add	r2,r2,r3
 1007bb8:	10800904 	addi	r2,r2,36
 1007bbc:	10800017 	ldw	r2,0(r2)
 1007bc0:	11000044 	addi	r4,r2,1
 1007bc4:	00c04074 	movhi	r3,257
 1007bc8:	18c09a04 	addi	r3,r3,616
 1007bcc:	280491ba 	slli	r2,r5,6
 1007bd0:	10c5883a 	add	r2,r2,r3
 1007bd4:	10800904 	addi	r2,r2,36
 1007bd8:	11000015 	stw	r4,0(r2)
					active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
 1007bdc:	e0bffd0f 	ldh	r2,-12(fp)
 1007be0:	00c04074 	movhi	r3,257
 1007be4:	18c09a04 	addi	r3,r3,616
 1007be8:	100491ba 	slli	r2,r2,6
 1007bec:	10c5883a 	add	r2,r2,r3
 1007bf0:	10800904 	addi	r2,r2,36
 1007bf4:	11000017 	ldw	r4,0(r2)
 1007bf8:	e0bffd0f 	ldh	r2,-12(fp)
 1007bfc:	00c04074 	movhi	r3,257
 1007c00:	18c09a04 	addi	r3,r3,616
 1007c04:	100491ba 	slli	r2,r2,6
 1007c08:	10c5883a 	add	r2,r2,r3
 1007c0c:	10800604 	addi	r2,r2,24
 1007c10:	10800017 	ldw	r2,0(r2)
 1007c14:	1100172e 	bgeu	r2,r4,1007c74 <alt_up_sd_card_write+0x608>
					> active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes =
 1007c18:	e17ffd0f 	ldh	r5,-12(fp)
 1007c1c:	e0bffd0f 	ldh	r2,-12(fp)
 1007c20:	00c04074 	movhi	r3,257
 1007c24:	18c09a04 	addi	r3,r3,616
 1007c28:	100491ba 	slli	r2,r2,6
 1007c2c:	10c5883a 	add	r2,r2,r3
 1007c30:	10800604 	addi	r2,r2,24
 1007c34:	10800017 	ldw	r2,0(r2)
 1007c38:	11000044 	addi	r4,r2,1
 1007c3c:	00c04074 	movhi	r3,257
 1007c40:	18c09a04 	addi	r3,r3,616
 1007c44:	280491ba 	slli	r2,r5,6
 1007c48:	10c5883a 	add	r2,r2,r3
 1007c4c:	10800604 	addi	r2,r2,24
 1007c50:	11000015 	stw	r4,0(r2)
						active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
 1007c54:	e0bffd0f 	ldh	r2,-12(fp)
 1007c58:	00c04074 	movhi	r3,257
 1007c5c:	18c09a04 	addi	r3,r3,616
 1007c60:	100491ba 	slli	r2,r2,6
 1007c64:	10c5883a 	add	r2,r2,r3
 1007c68:	10c00e04 	addi	r3,r2,56
 1007c6c:	00800044 	movi	r2,1
 1007c70:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
 1007c74:	00800044 	movi	r2,1
 1007c78:	d0a6c815 	stw	r2,-25824(gp)
			result = true;
 1007c7c:	00800044 	movi	r2,1
 1007c80:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
 1007c84:	e0bffa17 	ldw	r2,-24(fp)
 1007c88:	e0bfff15 	stw	r2,-4(fp)
 1007c8c:	e0bfff17 	ldw	r2,-4(fp)
}
 1007c90:	e037883a 	mov	sp,fp
 1007c94:	dfc00217 	ldw	ra,8(sp)
 1007c98:	df000117 	ldw	fp,4(sp)
 1007c9c:	dc000017 	ldw	r16,0(sp)
 1007ca0:	dec00304 	addi	sp,sp,12
 1007ca4:	f800283a 	ret

01007ca8 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 1007ca8:	defffa04 	addi	sp,sp,-24
 1007cac:	dfc00515 	stw	ra,20(sp)
 1007cb0:	df000415 	stw	fp,16(sp)
 1007cb4:	dc000315 	stw	r16,12(sp)
 1007cb8:	df000304 	addi	fp,sp,12
 1007cbc:	e13fff0d 	sth	r4,-4(fp)
	assert(file_handle >= 0);
 1007cc0:	e0bfff0f 	ldh	r2,-4(fp)
 1007cc4:	1004403a 	cmpge	r2,r2,zero
 1007cc8:	1000081e 	bne	r2,zero,1007cec <alt_up_sd_card_fclose+0x44>
 1007ccc:	01004074 	movhi	r4,257
 1007cd0:	21329204 	addi	r4,r4,-13752
 1007cd4:	0141bf04 	movi	r5,1788
 1007cd8:	01804074 	movhi	r6,257
 1007cdc:	31b28c04 	addi	r6,r6,-13776
 1007ce0:	01c04074 	movhi	r7,257
 1007ce4:	39f29f04 	addi	r7,r7,-13700
 1007ce8:	1009ec00 	call	1009ec0 <__assert_func>

	bool result = false;
 1007cec:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1007cf0:	100684c0 	call	100684c <alt_up_sd_card_is_Present>
 1007cf4:	1005003a 	cmpeq	r2,r2,zero
 1007cf8:	1000641e 	bne	r2,zero,1007e8c <alt_up_sd_card_fclose+0x1e4>
 1007cfc:	d0a6be17 	ldw	r2,-25864(gp)
 1007d00:	1005003a 	cmpeq	r2,r2,zero
 1007d04:	1000611e 	bne	r2,zero,1007e8c <alt_up_sd_card_fclose+0x1e4>
		if (active_files[file_handle].in_use) {
 1007d08:	e0bfff0f 	ldh	r2,-4(fp)
 1007d0c:	00c04074 	movhi	r3,257
 1007d10:	18c09a04 	addi	r3,r3,616
 1007d14:	100491ba 	slli	r2,r2,6
 1007d18:	10c5883a 	add	r2,r2,r3
 1007d1c:	10800f04 	addi	r2,r2,60
 1007d20:	10800017 	ldw	r2,0(r2)
 1007d24:	1005003a 	cmpeq	r2,r2,zero
 1007d28:	1000581e 	bne	r2,zero,1007e8c <alt_up_sd_card_fclose+0x1e4>
			if (active_files[file_handle].modified) {
 1007d2c:	e0bfff0f 	ldh	r2,-4(fp)
 1007d30:	00c04074 	movhi	r3,257
 1007d34:	18c09a04 	addi	r3,r3,616
 1007d38:	100491ba 	slli	r2,r2,6
 1007d3c:	10c5883a 	add	r2,r2,r3
 1007d40:	10800e04 	addi	r2,r2,56
 1007d44:	10800017 	ldw	r2,0(r2)
 1007d48:	1005003a 	cmpeq	r2,r2,zero
 1007d4c:	1000461e 	bne	r2,zero,1007e68 <alt_up_sd_card_fclose+0x1c0>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
 1007d50:	e0bfff0f 	ldh	r2,-4(fp)
 1007d54:	00c04074 	movhi	r3,257
 1007d58:	18c09a04 	addi	r3,r3,616
 1007d5c:	100491ba 	slli	r2,r2,6
 1007d60:	10c5883a 	add	r2,r2,r3
 1007d64:	10800b04 	addi	r2,r2,44
 1007d68:	10800017 	ldw	r2,0(r2)
 1007d6c:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
 1007d70:	e0bfff0f 	ldh	r2,-4(fp)
 1007d74:	00c04074 	movhi	r3,257
 1007d78:	18c09a04 	addi	r3,r3,616
 1007d7c:	100491ba 	slli	r2,r2,6
 1007d80:	10c5883a 	add	r2,r2,r3
 1007d84:	10800a04 	addi	r2,r2,40
 1007d88:	10800017 	ldw	r2,0(r2)
 1007d8c:	1004c03a 	cmpne	r2,r2,zero
 1007d90:	1000071e 	bne	r2,zero,1007db0 <alt_up_sd_card_fclose+0x108>
					record_sector = record_sector
 1007d94:	00804074 	movhi	r2,257
 1007d98:	10808504 	addi	r2,r2,532
 1007d9c:	10c01317 	ldw	r3,76(r2)
 1007da0:	e0bffd17 	ldw	r2,-12(fp)
 1007da4:	10c5883a 	add	r2,r2,r3
 1007da8:	e0bffd15 	stw	r2,-12(fp)
 1007dac:	00001406 	br	1007e00 <alt_up_sd_card_fclose+0x158>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector =
 1007db0:	00804074 	movhi	r2,257
 1007db4:	10808504 	addi	r2,r2,532
 1007db8:	10c01417 	ldw	r3,80(r2)
 1007dbc:	e0bffd17 	ldw	r2,-12(fp)
 1007dc0:	18a1883a 	add	r16,r3,r2
 1007dc4:	e0bfff0f 	ldh	r2,-4(fp)
 1007dc8:	00c04074 	movhi	r3,257
 1007dcc:	18c09a04 	addi	r3,r3,616
 1007dd0:	100491ba 	slli	r2,r2,6
 1007dd4:	10c5883a 	add	r2,r2,r3
 1007dd8:	10800a04 	addi	r2,r2,40
 1007ddc:	10800017 	ldw	r2,0(r2)
 1007de0:	113fff84 	addi	r4,r2,-2
 1007de4:	00804074 	movhi	r2,257
 1007de8:	10808504 	addi	r2,r2,532
 1007dec:	10800383 	ldbu	r2,14(r2)
 1007df0:	11403fcc 	andi	r5,r2,255
 1007df4:	1002dfc0 	call	1002dfc <__mulsi3>
 1007df8:	8085883a 	add	r2,r16,r2
 1007dfc:	e0bffd15 	stw	r2,-12(fp)
							record_sector + boot_sector_data.data_sector_offset
									+ (active_files[file_handle].file_record_cluster
											- 2)
											* boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
 1007e00:	e13ffd17 	ldw	r4,-12(fp)
 1007e04:	d166c517 	ldw	r5,-25836(gp)
 1007e08:	1003b300 	call	1003b30 <Read_Sector_Data>
 1007e0c:	1005003a 	cmpeq	r2,r2,zero
 1007e10:	1000151e 	bne	r2,zero,1007e68 <alt_up_sd_card_fclose+0x1c0>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
 1007e14:	e0bfff0f 	ldh	r2,-4(fp)
 1007e18:	00c04074 	movhi	r3,257
 1007e1c:	18c09a04 	addi	r3,r3,616
 1007e20:	100491ba 	slli	r2,r2,6
 1007e24:	10c5883a 	add	r2,r2,r3
 1007e28:	10800c04 	addi	r2,r2,48
 1007e2c:	1080000b 	ldhu	r2,0(r2)
 1007e30:	113fffcc 	andi	r4,r2,65535
 1007e34:	2120001c 	xori	r4,r4,32768
 1007e38:	21200004 	addi	r4,r4,-32768
 1007e3c:	e0bfff0f 	ldh	r2,-4(fp)
 1007e40:	100491ba 	slli	r2,r2,6
 1007e44:	1007883a 	mov	r3,r2
 1007e48:	00804074 	movhi	r2,257
 1007e4c:	10809a04 	addi	r2,r2,616
 1007e50:	188b883a 	add	r5,r3,r2
 1007e54:	10041fc0 	call	10041fc <Write_File_Record_At_Offset>
 1007e58:	1005003a 	cmpeq	r2,r2,zero
 1007e5c:	1000021e 	bne	r2,zero,1007e68 <alt_up_sd_card_fclose+0x1c0>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 1007e60:	1003ae00 	call	1003ae0 <Save_Modified_Sector>
 1007e64:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 1007e68:	e0bfff0f 	ldh	r2,-4(fp)
 1007e6c:	00c04074 	movhi	r3,257
 1007e70:	18c09a04 	addi	r3,r3,616
 1007e74:	100491ba 	slli	r2,r2,6
 1007e78:	10c5883a 	add	r2,r2,r3
 1007e7c:	10800f04 	addi	r2,r2,60
 1007e80:	10000015 	stw	zero,0(r2)
			result = true;
 1007e84:	00800044 	movi	r2,1
 1007e88:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
 1007e8c:	e0bffe17 	ldw	r2,-8(fp)
}
 1007e90:	e037883a 	mov	sp,fp
 1007e94:	dfc00217 	ldw	ra,8(sp)
 1007e98:	df000117 	ldw	fp,4(sp)
 1007e9c:	dc000017 	ldw	r16,0(sp)
 1007ea0:	dec00304 	addi	sp,sp,12
 1007ea4:	f800283a 	ret

01007ea8 <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 1007ea8:	defff904 	addi	sp,sp,-28
 1007eac:	dfc00615 	stw	ra,24(sp)
 1007eb0:	df000515 	stw	fp,20(sp)
 1007eb4:	df000504 	addi	fp,sp,20
 1007eb8:	e13ffd15 	stw	r4,-12(fp)
 1007ebc:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 1007ec0:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 1007ec4:	100684c0 	call	100684c <alt_up_sd_card_is_Present>
 1007ec8:	1005003a 	cmpeq	r2,r2,zero
 1007ecc:	10002d1e 	bne	r2,zero,1007f84 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
 1007ed0:	00803fc4 	movi	r2,255
 1007ed4:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 1007ed8:	d0a6c817 	ldw	r2,-25824(gp)
 1007edc:	1005003a 	cmpeq	r2,r2,zero
 1007ee0:	1000081e 	bne	r2,zero,1007f04 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 1007ee4:	d0a6c917 	ldw	r2,-25820(gp)
 1007ee8:	1009883a 	mov	r4,r2
 1007eec:	000b883a 	mov	r5,zero
 1007ef0:	1003a180 	call	1003a18 <Write_Sector_Data>
 1007ef4:	1004c03a 	cmpne	r2,r2,zero
 1007ef8:	1000021e 	bne	r2,zero,1007f04 <Read_Sector_Data_CRC+0x5c>
				return false;
 1007efc:	e03fff15 	stw	zero,-4(fp)
 1007f00:	00002206 	br	1007f8c <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 1007f04:	d0a6c317 	ldw	r2,-25844(gp)
 1007f08:	1009883a 	mov	r4,r2
 1007f0c:	e0fffd17 	ldw	r3,-12(fp)
 1007f10:	e0bffe17 	ldw	r2,-8(fp)
 1007f14:	1885883a 	add	r2,r3,r2
 1007f18:	1006927a 	slli	r3,r2,9
 1007f1c:	2005883a 	mov	r2,r4
 1007f20:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 1007f24:	d0a6c217 	ldw	r2,-25848(gp)
 1007f28:	1007883a 	mov	r3,r2
 1007f2c:	00800444 	movi	r2,17
 1007f30:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 1007f34:	d0a6bf17 	ldw	r2,-25860(gp)
 1007f38:	1080002b 	ldhuio	r2,0(r2)
 1007f3c:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 1007f40:	e0bffb0b 	ldhu	r2,-20(fp)
 1007f44:	10bfffcc 	andi	r2,r2,65535
 1007f48:	1080010c 	andi	r2,r2,4
 1007f4c:	1004c03a 	cmpne	r2,r2,zero
 1007f50:	103ff81e 	bne	r2,zero,1007f34 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
 1007f54:	e0bffb0b 	ldhu	r2,-20(fp)
 1007f58:	10bfffcc 	andi	r2,r2,65535
 1007f5c:	10800c0c 	andi	r2,r2,48
 1007f60:	1004c03a 	cmpne	r2,r2,zero
 1007f64:	1000071e 	bne	r2,zero,1007f84 <Read_Sector_Data_CRC+0xdc>
			result = true;
 1007f68:	00800044 	movi	r2,1
 1007f6c:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 1007f70:	d026c815 	stw	zero,-25824(gp)
			current_sector_index = sector_index + partition_offset;
 1007f74:	e0fffd17 	ldw	r3,-12(fp)
 1007f78:	e0bffe17 	ldw	r2,-8(fp)
 1007f7c:	1885883a 	add	r2,r3,r2
 1007f80:	d0a6c915 	stw	r2,-25820(gp)
		}
	}
	return result;
 1007f84:	e0bffc17 	ldw	r2,-16(fp)
 1007f88:	e0bfff15 	stw	r2,-4(fp)
 1007f8c:	e0bfff17 	ldw	r2,-4(fp)
}
 1007f90:	e037883a 	mov	sp,fp
 1007f94:	dfc00117 	ldw	ra,4(sp)
 1007f98:	df000017 	ldw	fp,0(sp)
 1007f9c:	dec00204 	addi	sp,sp,8
 1007fa0:	f800283a 	ret

01007fa4 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
 1007fa4:	defff804 	addi	sp,sp,-32
 1007fa8:	dfc00715 	stw	ra,28(sp)
 1007fac:	df000615 	stw	fp,24(sp)
 1007fb0:	df000604 	addi	fp,sp,24
 1007fb4:	e13ffd15 	stw	r4,-12(fp)
 1007fb8:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
 1007fbc:	00801904 	movi	r2,100
 1007fc0:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
 1007fc4:	e03ffc15 	stw	zero,-16(fp)
 1007fc8:	00000d06 	br	1008000 <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
 1007fcc:	e13ffd17 	ldw	r4,-12(fp)
 1007fd0:	e17ffe17 	ldw	r5,-8(fp)
 1007fd4:	1007ea80 	call	1007ea8 <Read_Sector_Data_CRC>
 1007fd8:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
 1007fdc:	e0bffb17 	ldw	r2,-20(fp)
 1007fe0:	1005003a 	cmpeq	r2,r2,zero
 1007fe4:	1000031e 	bne	r2,zero,1007ff4 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
 1007fe8:	00800044 	movi	r2,1
 1007fec:	e0bfff15 	stw	r2,-4(fp)
 1007ff0:	00000a06 	br	100801c <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
 1007ff4:	e0bffc17 	ldw	r2,-16(fp)
 1007ff8:	10800044 	addi	r2,r2,1
 1007ffc:	e0bffc15 	stw	r2,-16(fp)
 1008000:	e0fffc17 	ldw	r3,-16(fp)
 1008004:	e0bffa17 	ldw	r2,-24(fp)
 1008008:	18bff016 	blt	r3,r2,1007fcc <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
 100800c:	e13ffd17 	ldw	r4,-12(fp)
 1008010:	e17ffe17 	ldw	r5,-8(fp)
 1008014:	1003b300 	call	1003b30 <Read_Sector_Data>
 1008018:	e0bfff15 	stw	r2,-4(fp)
 100801c:	e0bfff17 	ldw	r2,-4(fp)
}
 1008020:	e037883a 	mov	sp,fp
 1008024:	dfc00117 	ldw	ra,4(sp)
 1008028:	df000017 	ldw	fp,0(sp)
 100802c:	dec00204 	addi	sp,sp,8
 1008030:	f800283a 	ret

01008034 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1008034:	defffa04 	addi	sp,sp,-24
 1008038:	dfc00515 	stw	ra,20(sp)
 100803c:	df000415 	stw	fp,16(sp)
 1008040:	df000404 	addi	fp,sp,16
 1008044:	e13ffd15 	stw	r4,-12(fp)
 1008048:	e17ffe15 	stw	r5,-8(fp)
 100804c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1008050:	e0bffd17 	ldw	r2,-12(fp)
 1008054:	10800017 	ldw	r2,0(r2)
 1008058:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100805c:	e0bffc17 	ldw	r2,-16(fp)
 1008060:	11000a04 	addi	r4,r2,40
 1008064:	e0bffd17 	ldw	r2,-12(fp)
 1008068:	11c00217 	ldw	r7,8(r2)
 100806c:	e17ffe17 	ldw	r5,-8(fp)
 1008070:	e1bfff17 	ldw	r6,-4(fp)
 1008074:	100867c0 	call	100867c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1008078:	e037883a 	mov	sp,fp
 100807c:	dfc00117 	ldw	ra,4(sp)
 1008080:	df000017 	ldw	fp,0(sp)
 1008084:	dec00204 	addi	sp,sp,8
 1008088:	f800283a 	ret

0100808c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100808c:	defffa04 	addi	sp,sp,-24
 1008090:	dfc00515 	stw	ra,20(sp)
 1008094:	df000415 	stw	fp,16(sp)
 1008098:	df000404 	addi	fp,sp,16
 100809c:	e13ffd15 	stw	r4,-12(fp)
 10080a0:	e17ffe15 	stw	r5,-8(fp)
 10080a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10080a8:	e0bffd17 	ldw	r2,-12(fp)
 10080ac:	10800017 	ldw	r2,0(r2)
 10080b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 10080b4:	e0bffc17 	ldw	r2,-16(fp)
 10080b8:	11000a04 	addi	r4,r2,40
 10080bc:	e0bffd17 	ldw	r2,-12(fp)
 10080c0:	11c00217 	ldw	r7,8(r2)
 10080c4:	e17ffe17 	ldw	r5,-8(fp)
 10080c8:	e1bfff17 	ldw	r6,-4(fp)
 10080cc:	10088a00 	call	10088a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 10080d0:	e037883a 	mov	sp,fp
 10080d4:	dfc00117 	ldw	ra,4(sp)
 10080d8:	df000017 	ldw	fp,0(sp)
 10080dc:	dec00204 	addi	sp,sp,8
 10080e0:	f800283a 	ret

010080e4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 10080e4:	defffc04 	addi	sp,sp,-16
 10080e8:	dfc00315 	stw	ra,12(sp)
 10080ec:	df000215 	stw	fp,8(sp)
 10080f0:	df000204 	addi	fp,sp,8
 10080f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10080f8:	e0bfff17 	ldw	r2,-4(fp)
 10080fc:	10800017 	ldw	r2,0(r2)
 1008100:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1008104:	e0bffe17 	ldw	r2,-8(fp)
 1008108:	11000a04 	addi	r4,r2,40
 100810c:	e0bfff17 	ldw	r2,-4(fp)
 1008110:	11400217 	ldw	r5,8(r2)
 1008114:	10085140 	call	1008514 <altera_avalon_jtag_uart_close>
}
 1008118:	e037883a 	mov	sp,fp
 100811c:	dfc00117 	ldw	ra,4(sp)
 1008120:	df000017 	ldw	fp,0(sp)
 1008124:	dec00204 	addi	sp,sp,8
 1008128:	f800283a 	ret

0100812c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100812c:	defffa04 	addi	sp,sp,-24
 1008130:	dfc00515 	stw	ra,20(sp)
 1008134:	df000415 	stw	fp,16(sp)
 1008138:	df000404 	addi	fp,sp,16
 100813c:	e13ffd15 	stw	r4,-12(fp)
 1008140:	e17ffe15 	stw	r5,-8(fp)
 1008144:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1008148:	e0bffd17 	ldw	r2,-12(fp)
 100814c:	10800017 	ldw	r2,0(r2)
 1008150:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1008154:	e0bffc17 	ldw	r2,-16(fp)
 1008158:	11000a04 	addi	r4,r2,40
 100815c:	e17ffe17 	ldw	r5,-8(fp)
 1008160:	e1bfff17 	ldw	r6,-4(fp)
 1008164:	10085880 	call	1008588 <altera_avalon_jtag_uart_ioctl>
}
 1008168:	e037883a 	mov	sp,fp
 100816c:	dfc00117 	ldw	ra,4(sp)
 1008170:	df000017 	ldw	fp,0(sp)
 1008174:	dec00204 	addi	sp,sp,8
 1008178:	f800283a 	ret

0100817c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100817c:	defffa04 	addi	sp,sp,-24
 1008180:	dfc00515 	stw	ra,20(sp)
 1008184:	df000415 	stw	fp,16(sp)
 1008188:	df000404 	addi	fp,sp,16
 100818c:	e13ffd15 	stw	r4,-12(fp)
 1008190:	e17ffe15 	stw	r5,-8(fp)
 1008194:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1008198:	e0fffd17 	ldw	r3,-12(fp)
 100819c:	00800044 	movi	r2,1
 10081a0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 10081a4:	e0bffd17 	ldw	r2,-12(fp)
 10081a8:	10800017 	ldw	r2,0(r2)
 10081ac:	11000104 	addi	r4,r2,4
 10081b0:	e0bffd17 	ldw	r2,-12(fp)
 10081b4:	10800817 	ldw	r2,32(r2)
 10081b8:	1007883a 	mov	r3,r2
 10081bc:	2005883a 	mov	r2,r4
 10081c0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 10081c4:	e13ffe17 	ldw	r4,-8(fp)
 10081c8:	e17fff17 	ldw	r5,-4(fp)
 10081cc:	d8000015 	stw	zero,0(sp)
 10081d0:	01804074 	movhi	r6,257
 10081d4:	31a08f04 	addi	r6,r6,-32196
 10081d8:	e1fffd17 	ldw	r7,-12(fp)
 10081dc:	100940c0 	call	100940c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 10081e0:	e0bffd17 	ldw	r2,-12(fp)
 10081e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 10081e8:	e0bffd17 	ldw	r2,-12(fp)
 10081ec:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10081f0:	00804074 	movhi	r2,257
 10081f4:	10807404 	addi	r2,r2,464
 10081f8:	10800017 	ldw	r2,0(r2)
 10081fc:	100b883a 	mov	r5,r2
 1008200:	01804074 	movhi	r6,257
 1008204:	31a11904 	addi	r6,r6,-31644
 1008208:	e1fffd17 	ldw	r7,-12(fp)
 100820c:	10090100 	call	1009010 <alt_alarm_start>
 1008210:	1004403a 	cmpge	r2,r2,zero
 1008214:	1000041e 	bne	r2,zero,1008228 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1008218:	e0fffd17 	ldw	r3,-12(fp)
 100821c:	00a00034 	movhi	r2,32768
 1008220:	10bfffc4 	addi	r2,r2,-1
 1008224:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1008228:	e037883a 	mov	sp,fp
 100822c:	dfc00117 	ldw	ra,4(sp)
 1008230:	df000017 	ldw	fp,0(sp)
 1008234:	dec00204 	addi	sp,sp,8
 1008238:	f800283a 	ret

0100823c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100823c:	defff804 	addi	sp,sp,-32
 1008240:	df000715 	stw	fp,28(sp)
 1008244:	df000704 	addi	fp,sp,28
 1008248:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100824c:	e0bfff17 	ldw	r2,-4(fp)
 1008250:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 1008254:	e0bffe17 	ldw	r2,-8(fp)
 1008258:	10800017 	ldw	r2,0(r2)
 100825c:	e0bffd15 	stw	r2,-12(fp)
 1008260:	00000006 	br	1008264 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1008264:	e0bffd17 	ldw	r2,-12(fp)
 1008268:	10800104 	addi	r2,r2,4
 100826c:	10800037 	ldwio	r2,0(r2)
 1008270:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1008274:	e0bffc17 	ldw	r2,-16(fp)
 1008278:	1080c00c 	andi	r2,r2,768
 100827c:	1005003a 	cmpeq	r2,r2,zero
 1008280:	1000741e 	bne	r2,zero,1008454 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1008284:	e0bffc17 	ldw	r2,-16(fp)
 1008288:	1080400c 	andi	r2,r2,256
 100828c:	1005003a 	cmpeq	r2,r2,zero
 1008290:	1000351e 	bne	r2,zero,1008368 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1008294:	00800074 	movhi	r2,1
 1008298:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100829c:	e0bffe17 	ldw	r2,-8(fp)
 10082a0:	10800a17 	ldw	r2,40(r2)
 10082a4:	10800044 	addi	r2,r2,1
 10082a8:	1081ffcc 	andi	r2,r2,2047
 10082ac:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 10082b0:	e0bffe17 	ldw	r2,-8(fp)
 10082b4:	10c00b17 	ldw	r3,44(r2)
 10082b8:	e0bffa17 	ldw	r2,-24(fp)
 10082bc:	18801626 	beq	r3,r2,1008318 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 10082c0:	e0bffd17 	ldw	r2,-12(fp)
 10082c4:	10800037 	ldwio	r2,0(r2)
 10082c8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 10082cc:	e0bffb17 	ldw	r2,-20(fp)
 10082d0:	10a0000c 	andi	r2,r2,32768
 10082d4:	1005003a 	cmpeq	r2,r2,zero
 10082d8:	10000f1e 	bne	r2,zero,1008318 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 10082dc:	e0bffe17 	ldw	r2,-8(fp)
 10082e0:	10c00a17 	ldw	r3,40(r2)
 10082e4:	e0bffb17 	ldw	r2,-20(fp)
 10082e8:	1009883a 	mov	r4,r2
 10082ec:	e0bffe17 	ldw	r2,-8(fp)
 10082f0:	1885883a 	add	r2,r3,r2
 10082f4:	10800e04 	addi	r2,r2,56
 10082f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10082fc:	e0bffe17 	ldw	r2,-8(fp)
 1008300:	10800a17 	ldw	r2,40(r2)
 1008304:	10800044 	addi	r2,r2,1
 1008308:	10c1ffcc 	andi	r3,r2,2047
 100830c:	e0bffe17 	ldw	r2,-8(fp)
 1008310:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1008314:	003fe106 	br	100829c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1008318:	e0bffb17 	ldw	r2,-20(fp)
 100831c:	10bfffec 	andhi	r2,r2,65535
 1008320:	1005003a 	cmpeq	r2,r2,zero
 1008324:	1000101e 	bne	r2,zero,1008368 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1008328:	e0bffe17 	ldw	r2,-8(fp)
 100832c:	10c00817 	ldw	r3,32(r2)
 1008330:	00bfff84 	movi	r2,-2
 1008334:	1886703a 	and	r3,r3,r2
 1008338:	e0bffe17 	ldw	r2,-8(fp)
 100833c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1008340:	e0bffd17 	ldw	r2,-12(fp)
 1008344:	11000104 	addi	r4,r2,4
 1008348:	e0bffe17 	ldw	r2,-8(fp)
 100834c:	10800817 	ldw	r2,32(r2)
 1008350:	1007883a 	mov	r3,r2
 1008354:	2005883a 	mov	r2,r4
 1008358:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100835c:	e0bffd17 	ldw	r2,-12(fp)
 1008360:	10800104 	addi	r2,r2,4
 1008364:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1008368:	e0bffc17 	ldw	r2,-16(fp)
 100836c:	1080800c 	andi	r2,r2,512
 1008370:	1005003a 	cmpeq	r2,r2,zero
 1008374:	103fbb1e 	bne	r2,zero,1008264 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1008378:	e0bffc17 	ldw	r2,-16(fp)
 100837c:	10bfffec 	andhi	r2,r2,65535
 1008380:	1004d43a 	srli	r2,r2,16
 1008384:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1008388:	00001506 	br	10083e0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100838c:	e13ffd17 	ldw	r4,-12(fp)
 1008390:	e0bffe17 	ldw	r2,-8(fp)
 1008394:	10c00d17 	ldw	r3,52(r2)
 1008398:	e0bffe17 	ldw	r2,-8(fp)
 100839c:	1885883a 	add	r2,r3,r2
 10083a0:	10820e04 	addi	r2,r2,2104
 10083a4:	10800003 	ldbu	r2,0(r2)
 10083a8:	10c03fcc 	andi	r3,r2,255
 10083ac:	18c0201c 	xori	r3,r3,128
 10083b0:	18ffe004 	addi	r3,r3,-128
 10083b4:	2005883a 	mov	r2,r4
 10083b8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10083bc:	e0bffe17 	ldw	r2,-8(fp)
 10083c0:	10800d17 	ldw	r2,52(r2)
 10083c4:	10800044 	addi	r2,r2,1
 10083c8:	10c1ffcc 	andi	r3,r2,2047
 10083cc:	e0bffe17 	ldw	r2,-8(fp)
 10083d0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 10083d4:	e0bff917 	ldw	r2,-28(fp)
 10083d8:	10bfffc4 	addi	r2,r2,-1
 10083dc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 10083e0:	e0bff917 	ldw	r2,-28(fp)
 10083e4:	1005003a 	cmpeq	r2,r2,zero
 10083e8:	1000051e 	bne	r2,zero,1008400 <altera_avalon_jtag_uart_irq+0x1c4>
 10083ec:	e0bffe17 	ldw	r2,-8(fp)
 10083f0:	10c00d17 	ldw	r3,52(r2)
 10083f4:	e0bffe17 	ldw	r2,-8(fp)
 10083f8:	10800c17 	ldw	r2,48(r2)
 10083fc:	18bfe31e 	bne	r3,r2,100838c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1008400:	e0bff917 	ldw	r2,-28(fp)
 1008404:	1005003a 	cmpeq	r2,r2,zero
 1008408:	103f961e 	bne	r2,zero,1008264 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100840c:	e0bffe17 	ldw	r2,-8(fp)
 1008410:	10c00817 	ldw	r3,32(r2)
 1008414:	00bfff44 	movi	r2,-3
 1008418:	1886703a 	and	r3,r3,r2
 100841c:	e0bffe17 	ldw	r2,-8(fp)
 1008420:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1008424:	e0bffe17 	ldw	r2,-8(fp)
 1008428:	10800017 	ldw	r2,0(r2)
 100842c:	11000104 	addi	r4,r2,4
 1008430:	e0bffe17 	ldw	r2,-8(fp)
 1008434:	10800817 	ldw	r2,32(r2)
 1008438:	1007883a 	mov	r3,r2
 100843c:	2005883a 	mov	r2,r4
 1008440:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1008444:	e0bffd17 	ldw	r2,-12(fp)
 1008448:	10800104 	addi	r2,r2,4
 100844c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1008450:	003f8406 	br	1008264 <altera_avalon_jtag_uart_irq+0x28>
}
 1008454:	e037883a 	mov	sp,fp
 1008458:	df000017 	ldw	fp,0(sp)
 100845c:	dec00104 	addi	sp,sp,4
 1008460:	f800283a 	ret

01008464 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1008464:	defffc04 	addi	sp,sp,-16
 1008468:	df000315 	stw	fp,12(sp)
 100846c:	df000304 	addi	fp,sp,12
 1008470:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1008474:	e0bfff17 	ldw	r2,-4(fp)
 1008478:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100847c:	e0bffe17 	ldw	r2,-8(fp)
 1008480:	10800017 	ldw	r2,0(r2)
 1008484:	10800104 	addi	r2,r2,4
 1008488:	10800037 	ldwio	r2,0(r2)
 100848c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1008490:	e0bffd17 	ldw	r2,-12(fp)
 1008494:	1081000c 	andi	r2,r2,1024
 1008498:	1005003a 	cmpeq	r2,r2,zero
 100849c:	10000c1e 	bne	r2,zero,10084d0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 10084a0:	e0bffe17 	ldw	r2,-8(fp)
 10084a4:	10800017 	ldw	r2,0(r2)
 10084a8:	11000104 	addi	r4,r2,4
 10084ac:	e0bffe17 	ldw	r2,-8(fp)
 10084b0:	10800817 	ldw	r2,32(r2)
 10084b4:	10810014 	ori	r2,r2,1024
 10084b8:	1007883a 	mov	r3,r2
 10084bc:	2005883a 	mov	r2,r4
 10084c0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 10084c4:	e0bffe17 	ldw	r2,-8(fp)
 10084c8:	10000915 	stw	zero,36(r2)
 10084cc:	00000a06 	br	10084f8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 10084d0:	e0bffe17 	ldw	r2,-8(fp)
 10084d4:	10c00917 	ldw	r3,36(r2)
 10084d8:	00a00034 	movhi	r2,32768
 10084dc:	10bfff04 	addi	r2,r2,-4
 10084e0:	10c00536 	bltu	r2,r3,10084f8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 10084e4:	e0bffe17 	ldw	r2,-8(fp)
 10084e8:	10800917 	ldw	r2,36(r2)
 10084ec:	10c00044 	addi	r3,r2,1
 10084f0:	e0bffe17 	ldw	r2,-8(fp)
 10084f4:	10c00915 	stw	r3,36(r2)
 10084f8:	00804074 	movhi	r2,257
 10084fc:	10807404 	addi	r2,r2,464
 1008500:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1008504:	e037883a 	mov	sp,fp
 1008508:	df000017 	ldw	fp,0(sp)
 100850c:	dec00104 	addi	sp,sp,4
 1008510:	f800283a 	ret

01008514 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1008514:	defffc04 	addi	sp,sp,-16
 1008518:	df000315 	stw	fp,12(sp)
 100851c:	df000304 	addi	fp,sp,12
 1008520:	e13ffd15 	stw	r4,-12(fp)
 1008524:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1008528:	00000706 	br	1008548 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100852c:	e0bffe17 	ldw	r2,-8(fp)
 1008530:	1090000c 	andi	r2,r2,16384
 1008534:	1005003a 	cmpeq	r2,r2,zero
 1008538:	1000031e 	bne	r2,zero,1008548 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100853c:	00bffd44 	movi	r2,-11
 1008540:	e0bfff15 	stw	r2,-4(fp)
 1008544:	00000b06 	br	1008574 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1008548:	e0bffd17 	ldw	r2,-12(fp)
 100854c:	10c00d17 	ldw	r3,52(r2)
 1008550:	e0bffd17 	ldw	r2,-12(fp)
 1008554:	10800c17 	ldw	r2,48(r2)
 1008558:	18800526 	beq	r3,r2,1008570 <altera_avalon_jtag_uart_close+0x5c>
 100855c:	e0bffd17 	ldw	r2,-12(fp)
 1008560:	10c00917 	ldw	r3,36(r2)
 1008564:	e0bffd17 	ldw	r2,-12(fp)
 1008568:	10800117 	ldw	r2,4(r2)
 100856c:	18bfef36 	bltu	r3,r2,100852c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1008570:	e03fff15 	stw	zero,-4(fp)
 1008574:	e0bfff17 	ldw	r2,-4(fp)
}
 1008578:	e037883a 	mov	sp,fp
 100857c:	df000017 	ldw	fp,0(sp)
 1008580:	dec00104 	addi	sp,sp,4
 1008584:	f800283a 	ret

01008588 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1008588:	defff804 	addi	sp,sp,-32
 100858c:	df000715 	stw	fp,28(sp)
 1008590:	df000704 	addi	fp,sp,28
 1008594:	e13ffb15 	stw	r4,-20(fp)
 1008598:	e17ffc15 	stw	r5,-16(fp)
 100859c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 10085a0:	00bff9c4 	movi	r2,-25
 10085a4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 10085a8:	e0bffc17 	ldw	r2,-16(fp)
 10085ac:	e0bfff15 	stw	r2,-4(fp)
 10085b0:	e0ffff17 	ldw	r3,-4(fp)
 10085b4:	189a8060 	cmpeqi	r2,r3,27137
 10085b8:	1000041e 	bne	r2,zero,10085cc <altera_avalon_jtag_uart_ioctl+0x44>
 10085bc:	e0ffff17 	ldw	r3,-4(fp)
 10085c0:	189a80a0 	cmpeqi	r2,r3,27138
 10085c4:	10001b1e 	bne	r2,zero,1008634 <altera_avalon_jtag_uart_ioctl+0xac>
 10085c8:	00002706 	br	1008668 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10085cc:	e0bffb17 	ldw	r2,-20(fp)
 10085d0:	10c00117 	ldw	r3,4(r2)
 10085d4:	00a00034 	movhi	r2,32768
 10085d8:	10bfffc4 	addi	r2,r2,-1
 10085dc:	18802226 	beq	r3,r2,1008668 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 10085e0:	e0bffd17 	ldw	r2,-12(fp)
 10085e4:	10800017 	ldw	r2,0(r2)
 10085e8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10085ec:	e0bff917 	ldw	r2,-28(fp)
 10085f0:	10800090 	cmplti	r2,r2,2
 10085f4:	1000071e 	bne	r2,zero,1008614 <altera_avalon_jtag_uart_ioctl+0x8c>
 10085f8:	e0fff917 	ldw	r3,-28(fp)
 10085fc:	00a00034 	movhi	r2,32768
 1008600:	10bfffc4 	addi	r2,r2,-1
 1008604:	18800326 	beq	r3,r2,1008614 <altera_avalon_jtag_uart_ioctl+0x8c>
 1008608:	e0bff917 	ldw	r2,-28(fp)
 100860c:	e0bffe15 	stw	r2,-8(fp)
 1008610:	00000306 	br	1008620 <altera_avalon_jtag_uart_ioctl+0x98>
 1008614:	00e00034 	movhi	r3,32768
 1008618:	18ffff84 	addi	r3,r3,-2
 100861c:	e0fffe15 	stw	r3,-8(fp)
 1008620:	e0bffb17 	ldw	r2,-20(fp)
 1008624:	e0fffe17 	ldw	r3,-8(fp)
 1008628:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100862c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1008630:	00000d06 	br	1008668 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1008634:	e0bffb17 	ldw	r2,-20(fp)
 1008638:	10c00117 	ldw	r3,4(r2)
 100863c:	00a00034 	movhi	r2,32768
 1008640:	10bfffc4 	addi	r2,r2,-1
 1008644:	18800826 	beq	r3,r2,1008668 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1008648:	e13ffd17 	ldw	r4,-12(fp)
 100864c:	e0bffb17 	ldw	r2,-20(fp)
 1008650:	10c00917 	ldw	r3,36(r2)
 1008654:	e0bffb17 	ldw	r2,-20(fp)
 1008658:	10800117 	ldw	r2,4(r2)
 100865c:	1885803a 	cmpltu	r2,r3,r2
 1008660:	20800015 	stw	r2,0(r4)
      rc = 0;
 1008664:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1008668:	e0bffa17 	ldw	r2,-24(fp)
}
 100866c:	e037883a 	mov	sp,fp
 1008670:	df000017 	ldw	fp,0(sp)
 1008674:	dec00104 	addi	sp,sp,4
 1008678:	f800283a 	ret

0100867c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100867c:	defff204 	addi	sp,sp,-56
 1008680:	dfc00d15 	stw	ra,52(sp)
 1008684:	df000c15 	stw	fp,48(sp)
 1008688:	df000c04 	addi	fp,sp,48
 100868c:	e13ffb15 	stw	r4,-20(fp)
 1008690:	e17ffc15 	stw	r5,-16(fp)
 1008694:	e1bffd15 	stw	r6,-12(fp)
 1008698:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100869c:	e0bffc17 	ldw	r2,-16(fp)
 10086a0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10086a4:	00004806 	br	10087c8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 10086a8:	e0bffb17 	ldw	r2,-20(fp)
 10086ac:	10800a17 	ldw	r2,40(r2)
 10086b0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 10086b4:	e0bffb17 	ldw	r2,-20(fp)
 10086b8:	10800b17 	ldw	r2,44(r2)
 10086bc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 10086c0:	e0fff717 	ldw	r3,-36(fp)
 10086c4:	e0bff617 	ldw	r2,-40(fp)
 10086c8:	18800536 	bltu	r3,r2,10086e0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 10086cc:	e0bff717 	ldw	r2,-36(fp)
 10086d0:	e0fff617 	ldw	r3,-40(fp)
 10086d4:	10c5c83a 	sub	r2,r2,r3
 10086d8:	e0bff815 	stw	r2,-32(fp)
 10086dc:	00000406 	br	10086f0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 10086e0:	00820004 	movi	r2,2048
 10086e4:	e0fff617 	ldw	r3,-40(fp)
 10086e8:	10c5c83a 	sub	r2,r2,r3
 10086ec:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10086f0:	e0bff817 	ldw	r2,-32(fp)
 10086f4:	1005003a 	cmpeq	r2,r2,zero
 10086f8:	10001f1e 	bne	r2,zero,1008778 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 10086fc:	e0fffd17 	ldw	r3,-12(fp)
 1008700:	e0bff817 	ldw	r2,-32(fp)
 1008704:	1880022e 	bgeu	r3,r2,1008710 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 1008708:	e0bffd17 	ldw	r2,-12(fp)
 100870c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1008710:	e0bffb17 	ldw	r2,-20(fp)
 1008714:	10c00e04 	addi	r3,r2,56
 1008718:	e0bff617 	ldw	r2,-40(fp)
 100871c:	1887883a 	add	r3,r3,r2
 1008720:	e0bffa17 	ldw	r2,-24(fp)
 1008724:	1009883a 	mov	r4,r2
 1008728:	180b883a 	mov	r5,r3
 100872c:	e1bff817 	ldw	r6,-32(fp)
 1008730:	10012a00 	call	10012a0 <memcpy>
      ptr   += n;
 1008734:	e0fff817 	ldw	r3,-32(fp)
 1008738:	e0bffa17 	ldw	r2,-24(fp)
 100873c:	10c5883a 	add	r2,r2,r3
 1008740:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 1008744:	e0fffd17 	ldw	r3,-12(fp)
 1008748:	e0bff817 	ldw	r2,-32(fp)
 100874c:	1885c83a 	sub	r2,r3,r2
 1008750:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1008754:	e0fff617 	ldw	r3,-40(fp)
 1008758:	e0bff817 	ldw	r2,-32(fp)
 100875c:	1885883a 	add	r2,r3,r2
 1008760:	10c1ffcc 	andi	r3,r2,2047
 1008764:	e0bffb17 	ldw	r2,-20(fp)
 1008768:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100876c:	e0bffd17 	ldw	r2,-12(fp)
 1008770:	10800048 	cmpgei	r2,r2,1
 1008774:	103fcc1e 	bne	r2,zero,10086a8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1008778:	e0fffa17 	ldw	r3,-24(fp)
 100877c:	e0bffc17 	ldw	r2,-16(fp)
 1008780:	1880141e 	bne	r3,r2,10087d4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1008784:	e0bffe17 	ldw	r2,-8(fp)
 1008788:	1090000c 	andi	r2,r2,16384
 100878c:	1004c03a 	cmpne	r2,r2,zero
 1008790:	1000101e 	bne	r2,zero,10087d4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1008794:	e0bffb17 	ldw	r2,-20(fp)
 1008798:	10c00a17 	ldw	r3,40(r2)
 100879c:	e0bff717 	ldw	r2,-36(fp)
 10087a0:	1880051e 	bne	r3,r2,10087b8 <altera_avalon_jtag_uart_read+0x13c>
 10087a4:	e0bffb17 	ldw	r2,-20(fp)
 10087a8:	10c00917 	ldw	r3,36(r2)
 10087ac:	e0bffb17 	ldw	r2,-20(fp)
 10087b0:	10800117 	ldw	r2,4(r2)
 10087b4:	18bff736 	bltu	r3,r2,1008794 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10087b8:	e0bffb17 	ldw	r2,-20(fp)
 10087bc:	10c00a17 	ldw	r3,40(r2)
 10087c0:	e0bff717 	ldw	r2,-36(fp)
 10087c4:	18800326 	beq	r3,r2,10087d4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10087c8:	e0bffd17 	ldw	r2,-12(fp)
 10087cc:	10800048 	cmpgei	r2,r2,1
 10087d0:	103fb51e 	bne	r2,zero,10086a8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 10087d4:	e0fffa17 	ldw	r3,-24(fp)
 10087d8:	e0bffc17 	ldw	r2,-16(fp)
 10087dc:	18801926 	beq	r3,r2,1008844 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10087e0:	0005303a 	rdctl	r2,status
 10087e4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10087e8:	e0fff517 	ldw	r3,-44(fp)
 10087ec:	00bfff84 	movi	r2,-2
 10087f0:	1884703a 	and	r2,r3,r2
 10087f4:	1001703a 	wrctl	status,r2
  
  return context;
 10087f8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10087fc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1008800:	e0bffb17 	ldw	r2,-20(fp)
 1008804:	10800817 	ldw	r2,32(r2)
 1008808:	10c00054 	ori	r3,r2,1
 100880c:	e0bffb17 	ldw	r2,-20(fp)
 1008810:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1008814:	e0bffb17 	ldw	r2,-20(fp)
 1008818:	10800017 	ldw	r2,0(r2)
 100881c:	11000104 	addi	r4,r2,4
 1008820:	e0bffb17 	ldw	r2,-20(fp)
 1008824:	10800817 	ldw	r2,32(r2)
 1008828:	1007883a 	mov	r3,r2
 100882c:	2005883a 	mov	r2,r4
 1008830:	10c00035 	stwio	r3,0(r2)
 1008834:	e0bff917 	ldw	r2,-28(fp)
 1008838:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100883c:	e0bff417 	ldw	r2,-48(fp)
 1008840:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1008844:	e0fffa17 	ldw	r3,-24(fp)
 1008848:	e0bffc17 	ldw	r2,-16(fp)
 100884c:	18800526 	beq	r3,r2,1008864 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 1008850:	e0fffa17 	ldw	r3,-24(fp)
 1008854:	e0bffc17 	ldw	r2,-16(fp)
 1008858:	1887c83a 	sub	r3,r3,r2
 100885c:	e0ffff15 	stw	r3,-4(fp)
 1008860:	00000906 	br	1008888 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 1008864:	e0bffe17 	ldw	r2,-8(fp)
 1008868:	1090000c 	andi	r2,r2,16384
 100886c:	1005003a 	cmpeq	r2,r2,zero
 1008870:	1000031e 	bne	r2,zero,1008880 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1008874:	00bffd44 	movi	r2,-11
 1008878:	e0bfff15 	stw	r2,-4(fp)
 100887c:	00000206 	br	1008888 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1008880:	00bffec4 	movi	r2,-5
 1008884:	e0bfff15 	stw	r2,-4(fp)
 1008888:	e0bfff17 	ldw	r2,-4(fp)
}
 100888c:	e037883a 	mov	sp,fp
 1008890:	dfc00117 	ldw	ra,4(sp)
 1008894:	df000017 	ldw	fp,0(sp)
 1008898:	dec00204 	addi	sp,sp,8
 100889c:	f800283a 	ret

010088a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 10088a0:	defff204 	addi	sp,sp,-56
 10088a4:	dfc00d15 	stw	ra,52(sp)
 10088a8:	df000c15 	stw	fp,48(sp)
 10088ac:	df000c04 	addi	fp,sp,48
 10088b0:	e13ffb15 	stw	r4,-20(fp)
 10088b4:	e17ffc15 	stw	r5,-16(fp)
 10088b8:	e1bffd15 	stw	r6,-12(fp)
 10088bc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 10088c0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 10088c4:	e0bffc17 	ldw	r2,-16(fp)
 10088c8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10088cc:	00003a06 	br	10089b8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10088d0:	e0bffb17 	ldw	r2,-20(fp)
 10088d4:	10800c17 	ldw	r2,48(r2)
 10088d8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 10088dc:	e0bffb17 	ldw	r2,-20(fp)
 10088e0:	10800d17 	ldw	r2,52(r2)
 10088e4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 10088e8:	e0fffa17 	ldw	r3,-24(fp)
 10088ec:	e0bff917 	ldw	r2,-28(fp)
 10088f0:	1880062e 	bgeu	r3,r2,100890c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 10088f4:	e0fff917 	ldw	r3,-28(fp)
 10088f8:	e0bffa17 	ldw	r2,-24(fp)
 10088fc:	1885c83a 	sub	r2,r3,r2
 1008900:	10bfffc4 	addi	r2,r2,-1
 1008904:	e0bff815 	stw	r2,-32(fp)
 1008908:	00000c06 	br	100893c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100890c:	e0bff917 	ldw	r2,-28(fp)
 1008910:	1005003a 	cmpeq	r2,r2,zero
 1008914:	1000051e 	bne	r2,zero,100892c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1008918:	00820004 	movi	r2,2048
 100891c:	e0fffa17 	ldw	r3,-24(fp)
 1008920:	10c5c83a 	sub	r2,r2,r3
 1008924:	e0bff815 	stw	r2,-32(fp)
 1008928:	00000406 	br	100893c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100892c:	0081ffc4 	movi	r2,2047
 1008930:	e0fffa17 	ldw	r3,-24(fp)
 1008934:	10c5c83a 	sub	r2,r2,r3
 1008938:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100893c:	e0bff817 	ldw	r2,-32(fp)
 1008940:	1005003a 	cmpeq	r2,r2,zero
 1008944:	10001f1e 	bne	r2,zero,10089c4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 1008948:	e0fffd17 	ldw	r3,-12(fp)
 100894c:	e0bff817 	ldw	r2,-32(fp)
 1008950:	1880022e 	bgeu	r3,r2,100895c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 1008954:	e0bffd17 	ldw	r2,-12(fp)
 1008958:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100895c:	e0bffb17 	ldw	r2,-20(fp)
 1008960:	10c20e04 	addi	r3,r2,2104
 1008964:	e0bffa17 	ldw	r2,-24(fp)
 1008968:	1885883a 	add	r2,r3,r2
 100896c:	e0fffc17 	ldw	r3,-16(fp)
 1008970:	1009883a 	mov	r4,r2
 1008974:	180b883a 	mov	r5,r3
 1008978:	e1bff817 	ldw	r6,-32(fp)
 100897c:	10012a00 	call	10012a0 <memcpy>
      ptr   += n;
 1008980:	e0fff817 	ldw	r3,-32(fp)
 1008984:	e0bffc17 	ldw	r2,-16(fp)
 1008988:	10c5883a 	add	r2,r2,r3
 100898c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1008990:	e0fffd17 	ldw	r3,-12(fp)
 1008994:	e0bff817 	ldw	r2,-32(fp)
 1008998:	1885c83a 	sub	r2,r3,r2
 100899c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10089a0:	e0fffa17 	ldw	r3,-24(fp)
 10089a4:	e0bff817 	ldw	r2,-32(fp)
 10089a8:	1885883a 	add	r2,r3,r2
 10089ac:	10c1ffcc 	andi	r3,r2,2047
 10089b0:	e0bffb17 	ldw	r2,-20(fp)
 10089b4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10089b8:	e0bffd17 	ldw	r2,-12(fp)
 10089bc:	10800048 	cmpgei	r2,r2,1
 10089c0:	103fc31e 	bne	r2,zero,10088d0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10089c4:	0005303a 	rdctl	r2,status
 10089c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10089cc:	e0fff517 	ldw	r3,-44(fp)
 10089d0:	00bfff84 	movi	r2,-2
 10089d4:	1884703a 	and	r2,r3,r2
 10089d8:	1001703a 	wrctl	status,r2
  
  return context;
 10089dc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10089e0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10089e4:	e0bffb17 	ldw	r2,-20(fp)
 10089e8:	10800817 	ldw	r2,32(r2)
 10089ec:	10c00094 	ori	r3,r2,2
 10089f0:	e0bffb17 	ldw	r2,-20(fp)
 10089f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10089f8:	e0bffb17 	ldw	r2,-20(fp)
 10089fc:	10800017 	ldw	r2,0(r2)
 1008a00:	11000104 	addi	r4,r2,4
 1008a04:	e0bffb17 	ldw	r2,-20(fp)
 1008a08:	10800817 	ldw	r2,32(r2)
 1008a0c:	1007883a 	mov	r3,r2
 1008a10:	2005883a 	mov	r2,r4
 1008a14:	10c00035 	stwio	r3,0(r2)
 1008a18:	e0bff717 	ldw	r2,-36(fp)
 1008a1c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008a20:	e0bff417 	ldw	r2,-48(fp)
 1008a24:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1008a28:	e0bffd17 	ldw	r2,-12(fp)
 1008a2c:	10800050 	cmplti	r2,r2,1
 1008a30:	1000111e 	bne	r2,zero,1008a78 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 1008a34:	e0bffe17 	ldw	r2,-8(fp)
 1008a38:	1090000c 	andi	r2,r2,16384
 1008a3c:	1004c03a 	cmpne	r2,r2,zero
 1008a40:	1000101e 	bne	r2,zero,1008a84 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1008a44:	e0bffb17 	ldw	r2,-20(fp)
 1008a48:	10c00d17 	ldw	r3,52(r2)
 1008a4c:	e0bff917 	ldw	r2,-28(fp)
 1008a50:	1880051e 	bne	r3,r2,1008a68 <altera_avalon_jtag_uart_write+0x1c8>
 1008a54:	e0bffb17 	ldw	r2,-20(fp)
 1008a58:	10c00917 	ldw	r3,36(r2)
 1008a5c:	e0bffb17 	ldw	r2,-20(fp)
 1008a60:	10800117 	ldw	r2,4(r2)
 1008a64:	18bff736 	bltu	r3,r2,1008a44 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1008a68:	e0bffb17 	ldw	r2,-20(fp)
 1008a6c:	10c00d17 	ldw	r3,52(r2)
 1008a70:	e0bff917 	ldw	r2,-28(fp)
 1008a74:	18800326 	beq	r3,r2,1008a84 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 1008a78:	e0bffd17 	ldw	r2,-12(fp)
 1008a7c:	10800048 	cmpgei	r2,r2,1
 1008a80:	103fcd1e 	bne	r2,zero,10089b8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1008a84:	e0fffc17 	ldw	r3,-16(fp)
 1008a88:	e0bff617 	ldw	r2,-40(fp)
 1008a8c:	18800526 	beq	r3,r2,1008aa4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1008a90:	e0fffc17 	ldw	r3,-16(fp)
 1008a94:	e0bff617 	ldw	r2,-40(fp)
 1008a98:	1887c83a 	sub	r3,r3,r2
 1008a9c:	e0ffff15 	stw	r3,-4(fp)
 1008aa0:	00000906 	br	1008ac8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 1008aa4:	e0bffe17 	ldw	r2,-8(fp)
 1008aa8:	1090000c 	andi	r2,r2,16384
 1008aac:	1005003a 	cmpeq	r2,r2,zero
 1008ab0:	1000031e 	bne	r2,zero,1008ac0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 1008ab4:	00bffd44 	movi	r2,-11
 1008ab8:	e0bfff15 	stw	r2,-4(fp)
 1008abc:	00000206 	br	1008ac8 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1008ac0:	00bffec4 	movi	r2,-5
 1008ac4:	e0bfff15 	stw	r2,-4(fp)
 1008ac8:	e0bfff17 	ldw	r2,-4(fp)
}
 1008acc:	e037883a 	mov	sp,fp
 1008ad0:	dfc00117 	ldw	ra,4(sp)
 1008ad4:	df000017 	ldw	fp,0(sp)
 1008ad8:	dec00204 	addi	sp,sp,8
 1008adc:	f800283a 	ret

01008ae0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 1008ae0:	defffc04 	addi	sp,sp,-16
 1008ae4:	df000315 	stw	fp,12(sp)
 1008ae8:	df000304 	addi	fp,sp,12
 1008aec:	e13ffe15 	stw	r4,-8(fp)
 1008af0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 1008af4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 1008af8:	e0bfff17 	ldw	r2,-4(fp)
 1008afc:	1004c03a 	cmpne	r2,r2,zero
 1008b00:	1000061e 	bne	r2,zero,1008b1c <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 1008b04:	e0bffe17 	ldw	r2,-8(fp)
 1008b08:	1007883a 	mov	r3,r2
 1008b0c:	e0bffd03 	ldbu	r2,-12(fp)
 1008b10:	10c4b03a 	or	r2,r2,r3
 1008b14:	e0bffd05 	stb	r2,-12(fp)
 1008b18:	00000806 	br	1008b3c <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 1008b1c:	e0bffe17 	ldw	r2,-8(fp)
 1008b20:	1007883a 	mov	r3,r2
 1008b24:	e0bffd03 	ldbu	r2,-12(fp)
 1008b28:	10c4b03a 	or	r2,r2,r3
 1008b2c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 1008b30:	e0bffd03 	ldbu	r2,-12(fp)
 1008b34:	10801014 	ori	r2,r2,64
 1008b38:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 1008b3c:	e0fffd03 	ldbu	r3,-12(fp)
 1008b40:	00bfe004 	movi	r2,-128
 1008b44:	1884b03a 	or	r2,r3,r2
 1008b48:	10803fcc 	andi	r2,r2,255
}
 1008b4c:	e037883a 	mov	sp,fp
 1008b50:	df000017 	ldw	fp,0(sp)
 1008b54:	dec00104 	addi	sp,sp,4
 1008b58:	f800283a 	ret

01008b5c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 1008b5c:	defffd04 	addi	sp,sp,-12
 1008b60:	df000215 	stw	fp,8(sp)
 1008b64:	df000204 	addi	fp,sp,8
 1008b68:	e13ffe15 	stw	r4,-8(fp)
 1008b6c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1008b70:	e0bffe17 	ldw	r2,-8(fp)
 1008b74:	10800a17 	ldw	r2,40(r2)
 1008b78:	e0ffff03 	ldbu	r3,-4(fp)
 1008b7c:	10c00025 	stbio	r3,0(r2)
}
 1008b80:	e037883a 	mov	sp,fp
 1008b84:	df000017 	ldw	fp,0(sp)
 1008b88:	dec00104 	addi	sp,sp,4
 1008b8c:	f800283a 	ret

01008b90 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1008b90:	defffe04 	addi	sp,sp,-8
 1008b94:	df000115 	stw	fp,4(sp)
 1008b98:	df000104 	addi	fp,sp,4
 1008b9c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1008ba0:	e0bfff17 	ldw	r2,-4(fp)
 1008ba4:	10800a17 	ldw	r2,40(r2)
 1008ba8:	1007883a 	mov	r3,r2
 1008bac:	00800044 	movi	r2,1
 1008bb0:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1008bb4:	e037883a 	mov	sp,fp
 1008bb8:	df000017 	ldw	fp,0(sp)
 1008bbc:	dec00104 	addi	sp,sp,4
 1008bc0:	f800283a 	ret

01008bc4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1008bc4:	defffc04 	addi	sp,sp,-16
 1008bc8:	dfc00315 	stw	ra,12(sp)
 1008bcc:	df000215 	stw	fp,8(sp)
 1008bd0:	df000204 	addi	fp,sp,8
 1008bd4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 1008bd8:	e13fff17 	ldw	r4,-4(fp)
 1008bdc:	01404074 	movhi	r5,257
 1008be0:	2979af04 	addi	r5,r5,-6468
 1008be4:	100935c0 	call	100935c <alt_find_dev>
 1008be8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1008bec:	e0bffe17 	ldw	r2,-8(fp)
}
 1008bf0:	e037883a 	mov	sp,fp
 1008bf4:	dfc00117 	ldw	ra,4(sp)
 1008bf8:	df000017 	ldw	fp,0(sp)
 1008bfc:	dec00204 	addi	sp,sp,8
 1008c00:	f800283a 	ret

01008c04 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 1008c04:	defffb04 	addi	sp,sp,-20
 1008c08:	df000415 	stw	fp,16(sp)
 1008c0c:	df000404 	addi	fp,sp,16
 1008c10:	e13ffd15 	stw	r4,-12(fp)
 1008c14:	e17ffe15 	stw	r5,-8(fp)
 1008c18:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 1008c1c:	e03ffc15 	stw	zero,-16(fp)
 1008c20:	00000f06 	br	1008c60 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 1008c24:	e0bffd17 	ldw	r2,-12(fp)
 1008c28:	10800a17 	ldw	r2,40(r2)
 1008c2c:	11000044 	addi	r4,r2,1
 1008c30:	e0fffc17 	ldw	r3,-16(fp)
 1008c34:	e0bffe17 	ldw	r2,-8(fp)
 1008c38:	1885883a 	add	r2,r3,r2
 1008c3c:	10800003 	ldbu	r2,0(r2)
 1008c40:	10c03fcc 	andi	r3,r2,255
 1008c44:	18c0201c 	xori	r3,r3,128
 1008c48:	18ffe004 	addi	r3,r3,-128
 1008c4c:	2005883a 	mov	r2,r4
 1008c50:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 1008c54:	e0bffc17 	ldw	r2,-16(fp)
 1008c58:	10800044 	addi	r2,r2,1
 1008c5c:	e0bffc15 	stw	r2,-16(fp)
 1008c60:	e0fffc17 	ldw	r3,-16(fp)
 1008c64:	e0bfff17 	ldw	r2,-4(fp)
 1008c68:	18bfee36 	bltu	r3,r2,1008c24 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 1008c6c:	e037883a 	mov	sp,fp
 1008c70:	df000017 	ldw	fp,0(sp)
 1008c74:	dec00104 	addi	sp,sp,4
 1008c78:	f800283a 	ret

01008c7c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 1008c7c:	defffd04 	addi	sp,sp,-12
 1008c80:	df000215 	stw	fp,8(sp)
 1008c84:	df000204 	addi	fp,sp,8
 1008c88:	e13ffe15 	stw	r4,-8(fp)
 1008c8c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1008c90:	00000d06 	br	1008cc8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1008c94:	e0bffe17 	ldw	r2,-8(fp)
 1008c98:	10800a17 	ldw	r2,40(r2)
 1008c9c:	11000044 	addi	r4,r2,1
 1008ca0:	e0bfff17 	ldw	r2,-4(fp)
 1008ca4:	10800003 	ldbu	r2,0(r2)
 1008ca8:	10c03fcc 	andi	r3,r2,255
 1008cac:	18c0201c 	xori	r3,r3,128
 1008cb0:	18ffe004 	addi	r3,r3,-128
 1008cb4:	2005883a 	mov	r2,r4
 1008cb8:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1008cbc:	e0bfff17 	ldw	r2,-4(fp)
 1008cc0:	10800044 	addi	r2,r2,1
 1008cc4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 1008cc8:	e0bfff17 	ldw	r2,-4(fp)
 1008ccc:	10800003 	ldbu	r2,0(r2)
 1008cd0:	10803fcc 	andi	r2,r2,255
 1008cd4:	1080201c 	xori	r2,r2,128
 1008cd8:	10bfe004 	addi	r2,r2,-128
 1008cdc:	1004c03a 	cmpne	r2,r2,zero
 1008ce0:	103fec1e 	bne	r2,zero,1008c94 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 1008ce4:	e037883a 	mov	sp,fp
 1008ce8:	df000017 	ldw	fp,0(sp)
 1008cec:	dec00104 	addi	sp,sp,4
 1008cf0:	f800283a 	ret

01008cf4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 1008cf4:	defffb04 	addi	sp,sp,-20
 1008cf8:	dfc00415 	stw	ra,16(sp)
 1008cfc:	df000315 	stw	fp,12(sp)
 1008d00:	df000304 	addi	fp,sp,12
 1008d04:	e13ffd15 	stw	r4,-12(fp)
 1008d08:	e17ffe15 	stw	r5,-8(fp)
 1008d0c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 1008d10:	e0bffd17 	ldw	r2,-12(fp)
 1008d14:	10800017 	ldw	r2,0(r2)
 1008d18:	1009883a 	mov	r4,r2
 1008d1c:	e1bfff17 	ldw	r6,-4(fp)
 1008d20:	e17ffe17 	ldw	r5,-8(fp)
 1008d24:	1008c040 	call	1008c04 <alt_up_character_lcd_write>
	return 0;
 1008d28:	0005883a 	mov	r2,zero
}
 1008d2c:	e037883a 	mov	sp,fp
 1008d30:	dfc00117 	ldw	ra,4(sp)
 1008d34:	df000017 	ldw	fp,0(sp)
 1008d38:	dec00204 	addi	sp,sp,8
 1008d3c:	f800283a 	ret

01008d40 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 1008d40:	defff904 	addi	sp,sp,-28
 1008d44:	dfc00615 	stw	ra,24(sp)
 1008d48:	df000515 	stw	fp,20(sp)
 1008d4c:	df000504 	addi	fp,sp,20
 1008d50:	e13ffc15 	stw	r4,-16(fp)
 1008d54:	e17ffd15 	stw	r5,-12(fp)
 1008d58:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 1008d5c:	e0bffd17 	ldw	r2,-12(fp)
 1008d60:	10800a28 	cmpgeui	r2,r2,40
 1008d64:	1000031e 	bne	r2,zero,1008d74 <alt_up_character_lcd_set_cursor_pos+0x34>
 1008d68:	e0bffe17 	ldw	r2,-8(fp)
 1008d6c:	108000b0 	cmpltui	r2,r2,2
 1008d70:	1000031e 	bne	r2,zero,1008d80 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1008d74:	00bfffc4 	movi	r2,-1
 1008d78:	e0bfff15 	stw	r2,-4(fp)
 1008d7c:	00000806 	br	1008da0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1008d80:	e13ffd17 	ldw	r4,-12(fp)
 1008d84:	e17ffe17 	ldw	r5,-8(fp)
 1008d88:	1008ae00 	call	1008ae0 <get_DDRAM_addr>
 1008d8c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1008d90:	e17ffb03 	ldbu	r5,-20(fp)
 1008d94:	e13ffc17 	ldw	r4,-16(fp)
 1008d98:	1008b5c0 	call	1008b5c <alt_up_character_lcd_send_cmd>
	return 0;
 1008d9c:	e03fff15 	stw	zero,-4(fp)
 1008da0:	e0bfff17 	ldw	r2,-4(fp)
}
 1008da4:	e037883a 	mov	sp,fp
 1008da8:	dfc00117 	ldw	ra,4(sp)
 1008dac:	df000017 	ldw	fp,0(sp)
 1008db0:	dec00204 	addi	sp,sp,8
 1008db4:	f800283a 	ret

01008db8 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1008db8:	defff904 	addi	sp,sp,-28
 1008dbc:	dfc00615 	stw	ra,24(sp)
 1008dc0:	df000515 	stw	fp,20(sp)
 1008dc4:	df000504 	addi	fp,sp,20
 1008dc8:	e13ffc15 	stw	r4,-16(fp)
 1008dcc:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1008dd0:	e0bffd17 	ldw	r2,-12(fp)
 1008dd4:	1005003a 	cmpeq	r2,r2,zero
 1008dd8:	10001e1e 	bne	r2,zero,1008e54 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 1008ddc:	e0bffd17 	ldw	r2,-12(fp)
 1008de0:	10800050 	cmplti	r2,r2,1
 1008de4:	1000031e 	bne	r2,zero,1008df4 <alt_up_character_lcd_shift_cursor+0x3c>
 1008de8:	00800504 	movi	r2,20
 1008dec:	e0bfff05 	stb	r2,-4(fp)
 1008df0:	00000206 	br	1008dfc <alt_up_character_lcd_shift_cursor+0x44>
 1008df4:	00c00404 	movi	r3,16
 1008df8:	e0ffff05 	stb	r3,-4(fp)
 1008dfc:	e0bfff03 	ldbu	r2,-4(fp)
 1008e00:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1008e04:	e0fffd17 	ldw	r3,-12(fp)
 1008e08:	e0fffe15 	stw	r3,-8(fp)
 1008e0c:	e0fffe17 	ldw	r3,-8(fp)
 1008e10:	1804403a 	cmpge	r2,r3,zero
 1008e14:	1000031e 	bne	r2,zero,1008e24 <alt_up_character_lcd_shift_cursor+0x6c>
 1008e18:	e0bffe17 	ldw	r2,-8(fp)
 1008e1c:	0085c83a 	sub	r2,zero,r2
 1008e20:	e0bffe15 	stw	r2,-8(fp)
 1008e24:	e0fffe17 	ldw	r3,-8(fp)
 1008e28:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1008e2c:	00000306 	br	1008e3c <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1008e30:	e17ffb43 	ldbu	r5,-19(fp)
 1008e34:	e13ffc17 	ldw	r4,-16(fp)
 1008e38:	1008b5c0 	call	1008b5c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1008e3c:	e0bffb03 	ldbu	r2,-20(fp)
 1008e40:	10bfffc4 	addi	r2,r2,-1
 1008e44:	e0bffb05 	stb	r2,-20(fp)
 1008e48:	e0bffb03 	ldbu	r2,-20(fp)
 1008e4c:	10803fd8 	cmpnei	r2,r2,255
 1008e50:	103ff71e 	bne	r2,zero,1008e30 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1008e54:	e037883a 	mov	sp,fp
 1008e58:	dfc00117 	ldw	ra,4(sp)
 1008e5c:	df000017 	ldw	fp,0(sp)
 1008e60:	dec00204 	addi	sp,sp,8
 1008e64:	f800283a 	ret

01008e68 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1008e68:	defff904 	addi	sp,sp,-28
 1008e6c:	dfc00615 	stw	ra,24(sp)
 1008e70:	df000515 	stw	fp,20(sp)
 1008e74:	df000504 	addi	fp,sp,20
 1008e78:	e13ffc15 	stw	r4,-16(fp)
 1008e7c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1008e80:	e0bffd17 	ldw	r2,-12(fp)
 1008e84:	1005003a 	cmpeq	r2,r2,zero
 1008e88:	10001e1e 	bne	r2,zero,1008f04 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1008e8c:	e0bffd17 	ldw	r2,-12(fp)
 1008e90:	10800050 	cmplti	r2,r2,1
 1008e94:	1000031e 	bne	r2,zero,1008ea4 <alt_up_character_lcd_shift_display+0x3c>
 1008e98:	00800704 	movi	r2,28
 1008e9c:	e0bfff05 	stb	r2,-4(fp)
 1008ea0:	00000206 	br	1008eac <alt_up_character_lcd_shift_display+0x44>
 1008ea4:	00c00604 	movi	r3,24
 1008ea8:	e0ffff05 	stb	r3,-4(fp)
 1008eac:	e0bfff03 	ldbu	r2,-4(fp)
 1008eb0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1008eb4:	e0fffd17 	ldw	r3,-12(fp)
 1008eb8:	e0fffe15 	stw	r3,-8(fp)
 1008ebc:	e0fffe17 	ldw	r3,-8(fp)
 1008ec0:	1804403a 	cmpge	r2,r3,zero
 1008ec4:	1000031e 	bne	r2,zero,1008ed4 <alt_up_character_lcd_shift_display+0x6c>
 1008ec8:	e0bffe17 	ldw	r2,-8(fp)
 1008ecc:	0085c83a 	sub	r2,zero,r2
 1008ed0:	e0bffe15 	stw	r2,-8(fp)
 1008ed4:	e0fffe17 	ldw	r3,-8(fp)
 1008ed8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1008edc:	00000306 	br	1008eec <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1008ee0:	e17ffb43 	ldbu	r5,-19(fp)
 1008ee4:	e13ffc17 	ldw	r4,-16(fp)
 1008ee8:	1008b5c0 	call	1008b5c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1008eec:	e0bffb03 	ldbu	r2,-20(fp)
 1008ef0:	10bfffc4 	addi	r2,r2,-1
 1008ef4:	e0bffb05 	stb	r2,-20(fp)
 1008ef8:	e0bffb03 	ldbu	r2,-20(fp)
 1008efc:	10803fd8 	cmpnei	r2,r2,255
 1008f00:	103ff71e 	bne	r2,zero,1008ee0 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1008f04:	e037883a 	mov	sp,fp
 1008f08:	dfc00117 	ldw	ra,4(sp)
 1008f0c:	df000017 	ldw	fp,0(sp)
 1008f10:	dec00204 	addi	sp,sp,8
 1008f14:	f800283a 	ret

01008f18 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1008f18:	defff904 	addi	sp,sp,-28
 1008f1c:	dfc00615 	stw	ra,24(sp)
 1008f20:	df000515 	stw	fp,20(sp)
 1008f24:	df000504 	addi	fp,sp,20
 1008f28:	e13ffc15 	stw	r4,-16(fp)
 1008f2c:	e17ffd15 	stw	r5,-12(fp)
 1008f30:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 1008f34:	e0bffd17 	ldw	r2,-12(fp)
 1008f38:	10800a28 	cmpgeui	r2,r2,40
 1008f3c:	1000031e 	bne	r2,zero,1008f4c <alt_up_character_lcd_erase_pos+0x34>
 1008f40:	e0bffe17 	ldw	r2,-8(fp)
 1008f44:	108000b0 	cmpltui	r2,r2,2
 1008f48:	1000031e 	bne	r2,zero,1008f58 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1008f4c:	00bfffc4 	movi	r2,-1
 1008f50:	e0bfff15 	stw	r2,-4(fp)
 1008f54:	00000e06 	br	1008f90 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1008f58:	e13ffd17 	ldw	r4,-12(fp)
 1008f5c:	e17ffe17 	ldw	r5,-8(fp)
 1008f60:	1008ae00 	call	1008ae0 <get_DDRAM_addr>
 1008f64:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1008f68:	e17ffb03 	ldbu	r5,-20(fp)
 1008f6c:	e13ffc17 	ldw	r4,-16(fp)
 1008f70:	1008b5c0 	call	1008b5c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1008f74:	e0bffc17 	ldw	r2,-16(fp)
 1008f78:	10800a17 	ldw	r2,40(r2)
 1008f7c:	10800044 	addi	r2,r2,1
 1008f80:	1007883a 	mov	r3,r2
 1008f84:	00800084 	movi	r2,2
 1008f88:	18800025 	stbio	r2,0(r3)
	return 0;
 1008f8c:	e03fff15 	stw	zero,-4(fp)
 1008f90:	e0bfff17 	ldw	r2,-4(fp)
}
 1008f94:	e037883a 	mov	sp,fp
 1008f98:	dfc00117 	ldw	ra,4(sp)
 1008f9c:	df000017 	ldw	fp,0(sp)
 1008fa0:	dec00204 	addi	sp,sp,8
 1008fa4:	f800283a 	ret

01008fa8 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1008fa8:	defffd04 	addi	sp,sp,-12
 1008fac:	dfc00215 	stw	ra,8(sp)
 1008fb0:	df000115 	stw	fp,4(sp)
 1008fb4:	df000104 	addi	fp,sp,4
 1008fb8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1008fbc:	e13fff17 	ldw	r4,-4(fp)
 1008fc0:	01400304 	movi	r5,12
 1008fc4:	1008b5c0 	call	1008b5c <alt_up_character_lcd_send_cmd>
}
 1008fc8:	e037883a 	mov	sp,fp
 1008fcc:	dfc00117 	ldw	ra,4(sp)
 1008fd0:	df000017 	ldw	fp,0(sp)
 1008fd4:	dec00204 	addi	sp,sp,8
 1008fd8:	f800283a 	ret

01008fdc <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1008fdc:	defffd04 	addi	sp,sp,-12
 1008fe0:	dfc00215 	stw	ra,8(sp)
 1008fe4:	df000115 	stw	fp,4(sp)
 1008fe8:	df000104 	addi	fp,sp,4
 1008fec:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1008ff0:	e13fff17 	ldw	r4,-4(fp)
 1008ff4:	014003c4 	movi	r5,15
 1008ff8:	1008b5c0 	call	1008b5c <alt_up_character_lcd_send_cmd>
}
 1008ffc:	e037883a 	mov	sp,fp
 1009000:	dfc00117 	ldw	ra,4(sp)
 1009004:	df000017 	ldw	fp,0(sp)
 1009008:	dec00204 	addi	sp,sp,8
 100900c:	f800283a 	ret

01009010 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1009010:	defff404 	addi	sp,sp,-48
 1009014:	df000b15 	stw	fp,44(sp)
 1009018:	df000b04 	addi	fp,sp,44
 100901c:	e13ffb15 	stw	r4,-20(fp)
 1009020:	e17ffc15 	stw	r5,-16(fp)
 1009024:	e1bffd15 	stw	r6,-12(fp)
 1009028:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100902c:	e03ff915 	stw	zero,-28(fp)
 1009030:	00804074 	movhi	r2,257
 1009034:	10807404 	addi	r2,r2,464
 1009038:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100903c:	1005003a 	cmpeq	r2,r2,zero
 1009040:	1000411e 	bne	r2,zero,1009148 <alt_alarm_start+0x138>
  {
    if (alarm)
 1009044:	e0bffb17 	ldw	r2,-20(fp)
 1009048:	1005003a 	cmpeq	r2,r2,zero
 100904c:	10003b1e 	bne	r2,zero,100913c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1009050:	e0fffb17 	ldw	r3,-20(fp)
 1009054:	e0bffd17 	ldw	r2,-12(fp)
 1009058:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 100905c:	e0fffb17 	ldw	r3,-20(fp)
 1009060:	e0bffe17 	ldw	r2,-8(fp)
 1009064:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009068:	0005303a 	rdctl	r2,status
 100906c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009070:	e0fff817 	ldw	r3,-32(fp)
 1009074:	00bfff84 	movi	r2,-2
 1009078:	1884703a 	and	r2,r3,r2
 100907c:	1001703a 	wrctl	status,r2
  
  return context;
 1009080:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1009084:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1009088:	00804074 	movhi	r2,257
 100908c:	10807504 	addi	r2,r2,468
 1009090:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1009094:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1009098:	e0fffc17 	ldw	r3,-16(fp)
 100909c:	e0bff917 	ldw	r2,-28(fp)
 10090a0:	1885883a 	add	r2,r3,r2
 10090a4:	10c00044 	addi	r3,r2,1
 10090a8:	e0bffb17 	ldw	r2,-20(fp)
 10090ac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 10090b0:	e0bffb17 	ldw	r2,-20(fp)
 10090b4:	10c00217 	ldw	r3,8(r2)
 10090b8:	e0bff917 	ldw	r2,-28(fp)
 10090bc:	1880042e 	bgeu	r3,r2,10090d0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 10090c0:	e0fffb17 	ldw	r3,-20(fp)
 10090c4:	00800044 	movi	r2,1
 10090c8:	18800405 	stb	r2,16(r3)
 10090cc:	00000206 	br	10090d8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 10090d0:	e0bffb17 	ldw	r2,-20(fp)
 10090d4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 10090d8:	e0fffb17 	ldw	r3,-20(fp)
 10090dc:	00804074 	movhi	r2,257
 10090e0:	10b9b504 	addi	r2,r2,-6444
 10090e4:	e0bff615 	stw	r2,-40(fp)
 10090e8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10090ec:	e0fff717 	ldw	r3,-36(fp)
 10090f0:	e0bff617 	ldw	r2,-40(fp)
 10090f4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10090f8:	e0bff617 	ldw	r2,-40(fp)
 10090fc:	10c00017 	ldw	r3,0(r2)
 1009100:	e0bff717 	ldw	r2,-36(fp)
 1009104:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1009108:	e0bff617 	ldw	r2,-40(fp)
 100910c:	10c00017 	ldw	r3,0(r2)
 1009110:	e0bff717 	ldw	r2,-36(fp)
 1009114:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1009118:	e0fff617 	ldw	r3,-40(fp)
 100911c:	e0bff717 	ldw	r2,-36(fp)
 1009120:	18800015 	stw	r2,0(r3)
 1009124:	e0bffa17 	ldw	r2,-24(fp)
 1009128:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100912c:	e0bff517 	ldw	r2,-44(fp)
 1009130:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1009134:	e03fff15 	stw	zero,-4(fp)
 1009138:	00000506 	br	1009150 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 100913c:	00bffa84 	movi	r2,-22
 1009140:	e0bfff15 	stw	r2,-4(fp)
 1009144:	00000206 	br	1009150 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1009148:	00bfde84 	movi	r2,-134
 100914c:	e0bfff15 	stw	r2,-4(fp)
 1009150:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1009154:	e037883a 	mov	sp,fp
 1009158:	df000017 	ldw	fp,0(sp)
 100915c:	dec00104 	addi	sp,sp,4
 1009160:	f800283a 	ret

01009164 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1009164:	deffff04 	addi	sp,sp,-4
 1009168:	df000015 	stw	fp,0(sp)
 100916c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1009170:	e037883a 	mov	sp,fp
 1009174:	df000017 	ldw	fp,0(sp)
 1009178:	dec00104 	addi	sp,sp,4
 100917c:	f800283a 	ret

01009180 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1009180:	defff904 	addi	sp,sp,-28
 1009184:	dfc00615 	stw	ra,24(sp)
 1009188:	df000515 	stw	fp,20(sp)
 100918c:	df000504 	addi	fp,sp,20
 1009190:	e13ffd15 	stw	r4,-12(fp)
 1009194:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1009198:	e0bffd17 	ldw	r2,-12(fp)
 100919c:	1005003a 	cmpeq	r2,r2,zero
 10091a0:	1000041e 	bne	r2,zero,10091b4 <alt_dev_llist_insert+0x34>
 10091a4:	e0bffd17 	ldw	r2,-12(fp)
 10091a8:	10800217 	ldw	r2,8(r2)
 10091ac:	1004c03a 	cmpne	r2,r2,zero
 10091b0:	1000071e 	bne	r2,zero,10091d0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 10091b4:	10092340 	call	1009234 <alt_get_errno>
 10091b8:	1007883a 	mov	r3,r2
 10091bc:	00800584 	movi	r2,22
 10091c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10091c4:	00bffa84 	movi	r2,-22
 10091c8:	e0bfff15 	stw	r2,-4(fp)
 10091cc:	00001306 	br	100921c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10091d0:	e0fffd17 	ldw	r3,-12(fp)
 10091d4:	e0bffe17 	ldw	r2,-8(fp)
 10091d8:	e0bffb15 	stw	r2,-20(fp)
 10091dc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10091e0:	e0fffc17 	ldw	r3,-16(fp)
 10091e4:	e0bffb17 	ldw	r2,-20(fp)
 10091e8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10091ec:	e0bffb17 	ldw	r2,-20(fp)
 10091f0:	10c00017 	ldw	r3,0(r2)
 10091f4:	e0bffc17 	ldw	r2,-16(fp)
 10091f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10091fc:	e0bffb17 	ldw	r2,-20(fp)
 1009200:	10c00017 	ldw	r3,0(r2)
 1009204:	e0bffc17 	ldw	r2,-16(fp)
 1009208:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100920c:	e0fffb17 	ldw	r3,-20(fp)
 1009210:	e0bffc17 	ldw	r2,-16(fp)
 1009214:	18800015 	stw	r2,0(r3)

  return 0;  
 1009218:	e03fff15 	stw	zero,-4(fp)
 100921c:	e0bfff17 	ldw	r2,-4(fp)
}
 1009220:	e037883a 	mov	sp,fp
 1009224:	dfc00117 	ldw	ra,4(sp)
 1009228:	df000017 	ldw	fp,0(sp)
 100922c:	dec00204 	addi	sp,sp,8
 1009230:	f800283a 	ret

01009234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1009234:	defffd04 	addi	sp,sp,-12
 1009238:	dfc00215 	stw	ra,8(sp)
 100923c:	df000115 	stw	fp,4(sp)
 1009240:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1009244:	00804074 	movhi	r2,257
 1009248:	10b9b204 	addi	r2,r2,-6456
 100924c:	10800017 	ldw	r2,0(r2)
 1009250:	1005003a 	cmpeq	r2,r2,zero
 1009254:	1000061e 	bne	r2,zero,1009270 <alt_get_errno+0x3c>
 1009258:	00804074 	movhi	r2,257
 100925c:	10b9b204 	addi	r2,r2,-6456
 1009260:	10800017 	ldw	r2,0(r2)
 1009264:	103ee83a 	callr	r2
 1009268:	e0bfff15 	stw	r2,-4(fp)
 100926c:	00000306 	br	100927c <alt_get_errno+0x48>
 1009270:	00804074 	movhi	r2,257
 1009274:	10806204 	addi	r2,r2,392
 1009278:	e0bfff15 	stw	r2,-4(fp)
 100927c:	e0bfff17 	ldw	r2,-4(fp)
}
 1009280:	e037883a 	mov	sp,fp
 1009284:	dfc00117 	ldw	ra,4(sp)
 1009288:	df000017 	ldw	fp,0(sp)
 100928c:	dec00204 	addi	sp,sp,8
 1009290:	f800283a 	ret

01009294 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1009294:	defffd04 	addi	sp,sp,-12
 1009298:	dfc00215 	stw	ra,8(sp)
 100929c:	df000115 	stw	fp,4(sp)
 10092a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10092a4:	00bfff04 	movi	r2,-4
 10092a8:	00c04074 	movhi	r3,257
 10092ac:	18f21204 	addi	r3,r3,-14264
 10092b0:	1885883a 	add	r2,r3,r2
 10092b4:	e0bfff15 	stw	r2,-4(fp)
 10092b8:	00000606 	br	10092d4 <_do_ctors+0x40>
        (*ctor) (); 
 10092bc:	e0bfff17 	ldw	r2,-4(fp)
 10092c0:	10800017 	ldw	r2,0(r2)
 10092c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10092c8:	e0bfff17 	ldw	r2,-4(fp)
 10092cc:	10bfff04 	addi	r2,r2,-4
 10092d0:	e0bfff15 	stw	r2,-4(fp)
 10092d4:	e0ffff17 	ldw	r3,-4(fp)
 10092d8:	00804074 	movhi	r2,257
 10092dc:	10b21104 	addi	r2,r2,-14268
 10092e0:	18bff62e 	bgeu	r3,r2,10092bc <_do_ctors+0x28>
        (*ctor) (); 
}
 10092e4:	e037883a 	mov	sp,fp
 10092e8:	dfc00117 	ldw	ra,4(sp)
 10092ec:	df000017 	ldw	fp,0(sp)
 10092f0:	dec00204 	addi	sp,sp,8
 10092f4:	f800283a 	ret

010092f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 10092f8:	defffd04 	addi	sp,sp,-12
 10092fc:	dfc00215 	stw	ra,8(sp)
 1009300:	df000115 	stw	fp,4(sp)
 1009304:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1009308:	00bfff04 	movi	r2,-4
 100930c:	00c04074 	movhi	r3,257
 1009310:	18f21204 	addi	r3,r3,-14264
 1009314:	1885883a 	add	r2,r3,r2
 1009318:	e0bfff15 	stw	r2,-4(fp)
 100931c:	00000606 	br	1009338 <_do_dtors+0x40>
        (*dtor) (); 
 1009320:	e0bfff17 	ldw	r2,-4(fp)
 1009324:	10800017 	ldw	r2,0(r2)
 1009328:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100932c:	e0bfff17 	ldw	r2,-4(fp)
 1009330:	10bfff04 	addi	r2,r2,-4
 1009334:	e0bfff15 	stw	r2,-4(fp)
 1009338:	e0ffff17 	ldw	r3,-4(fp)
 100933c:	00804074 	movhi	r2,257
 1009340:	10b21204 	addi	r2,r2,-14264
 1009344:	18bff62e 	bgeu	r3,r2,1009320 <_do_dtors+0x28>
        (*dtor) (); 
}
 1009348:	e037883a 	mov	sp,fp
 100934c:	dfc00117 	ldw	ra,4(sp)
 1009350:	df000017 	ldw	fp,0(sp)
 1009354:	dec00204 	addi	sp,sp,8
 1009358:	f800283a 	ret

0100935c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100935c:	defff904 	addi	sp,sp,-28
 1009360:	dfc00615 	stw	ra,24(sp)
 1009364:	df000515 	stw	fp,20(sp)
 1009368:	df000504 	addi	fp,sp,20
 100936c:	e13ffd15 	stw	r4,-12(fp)
 1009370:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1009374:	e0bffe17 	ldw	r2,-8(fp)
 1009378:	10800017 	ldw	r2,0(r2)
 100937c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1009380:	e13ffd17 	ldw	r4,-12(fp)
 1009384:	100056c0 	call	100056c <strlen>
 1009388:	10800044 	addi	r2,r2,1
 100938c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1009390:	00000d06 	br	10093c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1009394:	e0bffc17 	ldw	r2,-16(fp)
 1009398:	11000217 	ldw	r4,8(r2)
 100939c:	e1bffb17 	ldw	r6,-20(fp)
 10093a0:	e17ffd17 	ldw	r5,-12(fp)
 10093a4:	1009ff00 	call	1009ff0 <memcmp>
 10093a8:	1004c03a 	cmpne	r2,r2,zero
 10093ac:	1000031e 	bne	r2,zero,10093bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10093b0:	e0bffc17 	ldw	r2,-16(fp)
 10093b4:	e0bfff15 	stw	r2,-4(fp)
 10093b8:	00000706 	br	10093d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 10093bc:	e0bffc17 	ldw	r2,-16(fp)
 10093c0:	10800017 	ldw	r2,0(r2)
 10093c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10093c8:	e0fffe17 	ldw	r3,-8(fp)
 10093cc:	e0bffc17 	ldw	r2,-16(fp)
 10093d0:	10fff01e 	bne	r2,r3,1009394 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 10093d4:	e03fff15 	stw	zero,-4(fp)
 10093d8:	e0bfff17 	ldw	r2,-4(fp)
}
 10093dc:	e037883a 	mov	sp,fp
 10093e0:	dfc00117 	ldw	ra,4(sp)
 10093e4:	df000017 	ldw	fp,0(sp)
 10093e8:	dec00204 	addi	sp,sp,8
 10093ec:	f800283a 	ret

010093f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 10093f0:	deffff04 	addi	sp,sp,-4
 10093f4:	df000015 	stw	fp,0(sp)
 10093f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 10093fc:	e037883a 	mov	sp,fp
 1009400:	df000017 	ldw	fp,0(sp)
 1009404:	dec00104 	addi	sp,sp,4
 1009408:	f800283a 	ret

0100940c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100940c:	defff904 	addi	sp,sp,-28
 1009410:	dfc00615 	stw	ra,24(sp)
 1009414:	df000515 	stw	fp,20(sp)
 1009418:	df000504 	addi	fp,sp,20
 100941c:	e13ffc15 	stw	r4,-16(fp)
 1009420:	e17ffd15 	stw	r5,-12(fp)
 1009424:	e1bffe15 	stw	r6,-8(fp)
 1009428:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 100942c:	e0800217 	ldw	r2,8(fp)
 1009430:	d8800015 	stw	r2,0(sp)
 1009434:	e13ffc17 	ldw	r4,-16(fp)
 1009438:	e17ffd17 	ldw	r5,-12(fp)
 100943c:	e1bffe17 	ldw	r6,-8(fp)
 1009440:	e1ffff17 	ldw	r7,-4(fp)
 1009444:	10095e00 	call	10095e0 <alt_iic_isr_register>
}  
 1009448:	e037883a 	mov	sp,fp
 100944c:	dfc00117 	ldw	ra,4(sp)
 1009450:	df000017 	ldw	fp,0(sp)
 1009454:	dec00204 	addi	sp,sp,8
 1009458:	f800283a 	ret

0100945c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 100945c:	defff904 	addi	sp,sp,-28
 1009460:	df000615 	stw	fp,24(sp)
 1009464:	df000604 	addi	fp,sp,24
 1009468:	e13ffe15 	stw	r4,-8(fp)
 100946c:	e17fff15 	stw	r5,-4(fp)
 1009470:	e0bfff17 	ldw	r2,-4(fp)
 1009474:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009478:	0005303a 	rdctl	r2,status
 100947c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009480:	e0fffb17 	ldw	r3,-20(fp)
 1009484:	00bfff84 	movi	r2,-2
 1009488:	1884703a 	and	r2,r3,r2
 100948c:	1001703a 	wrctl	status,r2
  
  return context;
 1009490:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1009494:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 1009498:	e0fffc17 	ldw	r3,-16(fp)
 100949c:	00800044 	movi	r2,1
 10094a0:	10c4983a 	sll	r2,r2,r3
 10094a4:	1007883a 	mov	r3,r2
 10094a8:	00804074 	movhi	r2,257
 10094ac:	10807304 	addi	r2,r2,460
 10094b0:	10800017 	ldw	r2,0(r2)
 10094b4:	1886b03a 	or	r3,r3,r2
 10094b8:	00804074 	movhi	r2,257
 10094bc:	10807304 	addi	r2,r2,460
 10094c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10094c4:	00804074 	movhi	r2,257
 10094c8:	10807304 	addi	r2,r2,460
 10094cc:	10800017 	ldw	r2,0(r2)
 10094d0:	100170fa 	wrctl	ienable,r2
 10094d4:	e0bffd17 	ldw	r2,-12(fp)
 10094d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10094dc:	e0bffa17 	ldw	r2,-24(fp)
 10094e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10094e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 10094e8:	e037883a 	mov	sp,fp
 10094ec:	df000017 	ldw	fp,0(sp)
 10094f0:	dec00104 	addi	sp,sp,4
 10094f4:	f800283a 	ret

010094f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 10094f8:	defff904 	addi	sp,sp,-28
 10094fc:	df000615 	stw	fp,24(sp)
 1009500:	df000604 	addi	fp,sp,24
 1009504:	e13ffe15 	stw	r4,-8(fp)
 1009508:	e17fff15 	stw	r5,-4(fp)
 100950c:	e0bfff17 	ldw	r2,-4(fp)
 1009510:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009514:	0005303a 	rdctl	r2,status
 1009518:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100951c:	e0fffb17 	ldw	r3,-20(fp)
 1009520:	00bfff84 	movi	r2,-2
 1009524:	1884703a 	and	r2,r3,r2
 1009528:	1001703a 	wrctl	status,r2
  
  return context;
 100952c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1009530:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1009534:	e0fffc17 	ldw	r3,-16(fp)
 1009538:	00800044 	movi	r2,1
 100953c:	10c4983a 	sll	r2,r2,r3
 1009540:	0084303a 	nor	r2,zero,r2
 1009544:	1007883a 	mov	r3,r2
 1009548:	00804074 	movhi	r2,257
 100954c:	10807304 	addi	r2,r2,460
 1009550:	10800017 	ldw	r2,0(r2)
 1009554:	1886703a 	and	r3,r3,r2
 1009558:	00804074 	movhi	r2,257
 100955c:	10807304 	addi	r2,r2,460
 1009560:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1009564:	00804074 	movhi	r2,257
 1009568:	10807304 	addi	r2,r2,460
 100956c:	10800017 	ldw	r2,0(r2)
 1009570:	100170fa 	wrctl	ienable,r2
 1009574:	e0bffd17 	ldw	r2,-12(fp)
 1009578:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100957c:	e0bffa17 	ldw	r2,-24(fp)
 1009580:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1009584:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 1009588:	e037883a 	mov	sp,fp
 100958c:	df000017 	ldw	fp,0(sp)
 1009590:	dec00104 	addi	sp,sp,4
 1009594:	f800283a 	ret

01009598 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1009598:	defffc04 	addi	sp,sp,-16
 100959c:	df000315 	stw	fp,12(sp)
 10095a0:	df000304 	addi	fp,sp,12
 10095a4:	e13ffe15 	stw	r4,-8(fp)
 10095a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 10095ac:	000530fa 	rdctl	r2,ienable
 10095b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 10095b4:	e0ffff17 	ldw	r3,-4(fp)
 10095b8:	00800044 	movi	r2,1
 10095bc:	10c4983a 	sll	r2,r2,r3
 10095c0:	1007883a 	mov	r3,r2
 10095c4:	e0bffd17 	ldw	r2,-12(fp)
 10095c8:	1884703a 	and	r2,r3,r2
 10095cc:	1004c03a 	cmpne	r2,r2,zero
}
 10095d0:	e037883a 	mov	sp,fp
 10095d4:	df000017 	ldw	fp,0(sp)
 10095d8:	dec00104 	addi	sp,sp,4
 10095dc:	f800283a 	ret

010095e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 10095e0:	defff404 	addi	sp,sp,-48
 10095e4:	dfc00b15 	stw	ra,44(sp)
 10095e8:	df000a15 	stw	fp,40(sp)
 10095ec:	df000a04 	addi	fp,sp,40
 10095f0:	e13ffb15 	stw	r4,-20(fp)
 10095f4:	e17ffc15 	stw	r5,-16(fp)
 10095f8:	e1bffd15 	stw	r6,-12(fp)
 10095fc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 1009600:	00bffa84 	movi	r2,-22
 1009604:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1009608:	e0bffc17 	ldw	r2,-16(fp)
 100960c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1009610:	e0bff917 	ldw	r2,-28(fp)
 1009614:	10800808 	cmpgei	r2,r2,32
 1009618:	1000291e 	bne	r2,zero,10096c0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100961c:	0005303a 	rdctl	r2,status
 1009620:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009624:	e0fff717 	ldw	r3,-36(fp)
 1009628:	00bfff84 	movi	r2,-2
 100962c:	1884703a 	and	r2,r3,r2
 1009630:	1001703a 	wrctl	status,r2
  
  return context;
 1009634:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1009638:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 100963c:	e0bff917 	ldw	r2,-28(fp)
 1009640:	00c04074 	movhi	r3,257
 1009644:	18c1da04 	addi	r3,r3,1896
 1009648:	100490fa 	slli	r2,r2,3
 100964c:	10c7883a 	add	r3,r2,r3
 1009650:	e0bffd17 	ldw	r2,-12(fp)
 1009654:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 1009658:	e0bff917 	ldw	r2,-28(fp)
 100965c:	00c04074 	movhi	r3,257
 1009660:	18c1da04 	addi	r3,r3,1896
 1009664:	100490fa 	slli	r2,r2,3
 1009668:	10c5883a 	add	r2,r2,r3
 100966c:	10c00104 	addi	r3,r2,4
 1009670:	e0bffe17 	ldw	r2,-8(fp)
 1009674:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1009678:	e0bffd17 	ldw	r2,-12(fp)
 100967c:	1005003a 	cmpeq	r2,r2,zero
 1009680:	1000051e 	bne	r2,zero,1009698 <alt_iic_isr_register+0xb8>
 1009684:	e17ff917 	ldw	r5,-28(fp)
 1009688:	e13ffb17 	ldw	r4,-20(fp)
 100968c:	100945c0 	call	100945c <alt_ic_irq_enable>
 1009690:	e0bfff15 	stw	r2,-4(fp)
 1009694:	00000406 	br	10096a8 <alt_iic_isr_register+0xc8>
 1009698:	e17ff917 	ldw	r5,-28(fp)
 100969c:	e13ffb17 	ldw	r4,-20(fp)
 10096a0:	10094f80 	call	10094f8 <alt_ic_irq_disable>
 10096a4:	e0bfff15 	stw	r2,-4(fp)
 10096a8:	e0bfff17 	ldw	r2,-4(fp)
 10096ac:	e0bffa15 	stw	r2,-24(fp)
 10096b0:	e0bff817 	ldw	r2,-32(fp)
 10096b4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10096b8:	e0bff617 	ldw	r2,-40(fp)
 10096bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 10096c0:	e0bffa17 	ldw	r2,-24(fp)
}
 10096c4:	e037883a 	mov	sp,fp
 10096c8:	dfc00117 	ldw	ra,4(sp)
 10096cc:	df000017 	ldw	fp,0(sp)
 10096d0:	dec00204 	addi	sp,sp,8
 10096d4:	f800283a 	ret

010096d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 10096d8:	defff804 	addi	sp,sp,-32
 10096dc:	dfc00715 	stw	ra,28(sp)
 10096e0:	df000615 	stw	fp,24(sp)
 10096e4:	dc000515 	stw	r16,20(sp)
 10096e8:	df000504 	addi	fp,sp,20
 10096ec:	e13ffc15 	stw	r4,-16(fp)
 10096f0:	e17ffd15 	stw	r5,-12(fp)
 10096f4:	e1bffe15 	stw	r6,-8(fp)
 10096f8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 10096fc:	e13ffd17 	ldw	r4,-12(fp)
 1009700:	e17ffe17 	ldw	r5,-8(fp)
 1009704:	e1bfff17 	ldw	r6,-4(fp)
 1009708:	10099200 	call	1009920 <open>
 100970c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1009710:	e0bffb17 	ldw	r2,-20(fp)
 1009714:	1004803a 	cmplt	r2,r2,zero
 1009718:	10001f1e 	bne	r2,zero,1009798 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 100971c:	e13ffb17 	ldw	r4,-20(fp)
 1009720:	04004074 	movhi	r16,257
 1009724:	84351b04 	addi	r16,r16,-11156
 1009728:	01400304 	movi	r5,12
 100972c:	1002dfc0 	call	1002dfc <__mulsi3>
 1009730:	1405883a 	add	r2,r2,r16
 1009734:	10c00017 	ldw	r3,0(r2)
 1009738:	e0bffc17 	ldw	r2,-16(fp)
 100973c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1009740:	e13ffb17 	ldw	r4,-20(fp)
 1009744:	04004074 	movhi	r16,257
 1009748:	84351b04 	addi	r16,r16,-11156
 100974c:	01400304 	movi	r5,12
 1009750:	1002dfc0 	call	1002dfc <__mulsi3>
 1009754:	1405883a 	add	r2,r2,r16
 1009758:	10800104 	addi	r2,r2,4
 100975c:	10c00017 	ldw	r3,0(r2)
 1009760:	e0bffc17 	ldw	r2,-16(fp)
 1009764:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1009768:	e13ffb17 	ldw	r4,-20(fp)
 100976c:	04004074 	movhi	r16,257
 1009770:	84351b04 	addi	r16,r16,-11156
 1009774:	01400304 	movi	r5,12
 1009778:	1002dfc0 	call	1002dfc <__mulsi3>
 100977c:	1405883a 	add	r2,r2,r16
 1009780:	10800204 	addi	r2,r2,8
 1009784:	10c00017 	ldw	r3,0(r2)
 1009788:	e0bffc17 	ldw	r2,-16(fp)
 100978c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1009790:	e13ffb17 	ldw	r4,-20(fp)
 1009794:	100368c0 	call	100368c <alt_release_fd>
  }
} 
 1009798:	e037883a 	mov	sp,fp
 100979c:	dfc00217 	ldw	ra,8(sp)
 10097a0:	df000117 	ldw	fp,4(sp)
 10097a4:	dc000017 	ldw	r16,0(sp)
 10097a8:	dec00304 	addi	sp,sp,12
 10097ac:	f800283a 	ret

010097b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 10097b0:	defffb04 	addi	sp,sp,-20
 10097b4:	dfc00415 	stw	ra,16(sp)
 10097b8:	df000315 	stw	fp,12(sp)
 10097bc:	df000304 	addi	fp,sp,12
 10097c0:	e13ffd15 	stw	r4,-12(fp)
 10097c4:	e17ffe15 	stw	r5,-8(fp)
 10097c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 10097cc:	01004074 	movhi	r4,257
 10097d0:	21351e04 	addi	r4,r4,-11144
 10097d4:	e17ffd17 	ldw	r5,-12(fp)
 10097d8:	01800044 	movi	r6,1
 10097dc:	01c07fc4 	movi	r7,511
 10097e0:	10096d80 	call	10096d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 10097e4:	01004074 	movhi	r4,257
 10097e8:	21351b04 	addi	r4,r4,-11156
 10097ec:	e17ffe17 	ldw	r5,-8(fp)
 10097f0:	000d883a 	mov	r6,zero
 10097f4:	01c07fc4 	movi	r7,511
 10097f8:	10096d80 	call	10096d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 10097fc:	01004074 	movhi	r4,257
 1009800:	21352104 	addi	r4,r4,-11132
 1009804:	e17fff17 	ldw	r5,-4(fp)
 1009808:	01800044 	movi	r6,1
 100980c:	01c07fc4 	movi	r7,511
 1009810:	10096d80 	call	10096d8 <alt_open_fd>
}  
 1009814:	e037883a 	mov	sp,fp
 1009818:	dfc00117 	ldw	ra,4(sp)
 100981c:	df000017 	ldw	fp,0(sp)
 1009820:	dec00204 	addi	sp,sp,8
 1009824:	f800283a 	ret

01009828 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1009828:	defffa04 	addi	sp,sp,-24
 100982c:	dfc00515 	stw	ra,20(sp)
 1009830:	df000415 	stw	fp,16(sp)
 1009834:	dc000315 	stw	r16,12(sp)
 1009838:	df000304 	addi	fp,sp,12
 100983c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1009840:	e0bffe17 	ldw	r2,-8(fp)
 1009844:	10800217 	ldw	r2,8(r2)
 1009848:	10d00034 	orhi	r3,r2,16384
 100984c:	e0bffe17 	ldw	r2,-8(fp)
 1009850:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1009854:	e03ffd15 	stw	zero,-12(fp)
 1009858:	00002306 	br	10098e8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100985c:	e13ffd17 	ldw	r4,-12(fp)
 1009860:	04004074 	movhi	r16,257
 1009864:	84351b04 	addi	r16,r16,-11156
 1009868:	01400304 	movi	r5,12
 100986c:	1002dfc0 	call	1002dfc <__mulsi3>
 1009870:	1405883a 	add	r2,r2,r16
 1009874:	10c00017 	ldw	r3,0(r2)
 1009878:	e0bffe17 	ldw	r2,-8(fp)
 100987c:	10800017 	ldw	r2,0(r2)
 1009880:	1880161e 	bne	r3,r2,10098dc <alt_file_locked+0xb4>
 1009884:	e13ffd17 	ldw	r4,-12(fp)
 1009888:	04004074 	movhi	r16,257
 100988c:	84351b04 	addi	r16,r16,-11156
 1009890:	01400304 	movi	r5,12
 1009894:	1002dfc0 	call	1002dfc <__mulsi3>
 1009898:	1405883a 	add	r2,r2,r16
 100989c:	10800204 	addi	r2,r2,8
 10098a0:	10800017 	ldw	r2,0(r2)
 10098a4:	1004403a 	cmpge	r2,r2,zero
 10098a8:	10000c1e 	bne	r2,zero,10098dc <alt_file_locked+0xb4>
 10098ac:	e13ffd17 	ldw	r4,-12(fp)
 10098b0:	01400304 	movi	r5,12
 10098b4:	1002dfc0 	call	1002dfc <__mulsi3>
 10098b8:	1007883a 	mov	r3,r2
 10098bc:	00804074 	movhi	r2,257
 10098c0:	10b51b04 	addi	r2,r2,-11156
 10098c4:	1887883a 	add	r3,r3,r2
 10098c8:	e0bffe17 	ldw	r2,-8(fp)
 10098cc:	18800326 	beq	r3,r2,10098dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 10098d0:	00bffcc4 	movi	r2,-13
 10098d4:	e0bfff15 	stw	r2,-4(fp)
 10098d8:	00000a06 	br	1009904 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10098dc:	e0bffd17 	ldw	r2,-12(fp)
 10098e0:	10800044 	addi	r2,r2,1
 10098e4:	e0bffd15 	stw	r2,-12(fp)
 10098e8:	00804074 	movhi	r2,257
 10098ec:	10b9b104 	addi	r2,r2,-6460
 10098f0:	10800017 	ldw	r2,0(r2)
 10098f4:	1007883a 	mov	r3,r2
 10098f8:	e0bffd17 	ldw	r2,-12(fp)
 10098fc:	18bfd72e 	bgeu	r3,r2,100985c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1009900:	e03fff15 	stw	zero,-4(fp)
 1009904:	e0bfff17 	ldw	r2,-4(fp)
}
 1009908:	e037883a 	mov	sp,fp
 100990c:	dfc00217 	ldw	ra,8(sp)
 1009910:	df000117 	ldw	fp,4(sp)
 1009914:	dc000017 	ldw	r16,0(sp)
 1009918:	dec00304 	addi	sp,sp,12
 100991c:	f800283a 	ret

01009920 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1009920:	defff404 	addi	sp,sp,-48
 1009924:	dfc00b15 	stw	ra,44(sp)
 1009928:	df000a15 	stw	fp,40(sp)
 100992c:	df000a04 	addi	fp,sp,40
 1009930:	e13ffb15 	stw	r4,-20(fp)
 1009934:	e17ffc15 	stw	r5,-16(fp)
 1009938:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100993c:	00bfffc4 	movi	r2,-1
 1009940:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1009944:	00bffb44 	movi	r2,-19
 1009948:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 100994c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1009950:	e13ffb17 	ldw	r4,-20(fp)
 1009954:	01404074 	movhi	r5,257
 1009958:	2979af04 	addi	r5,r5,-6468
 100995c:	100935c0 	call	100935c <alt_find_dev>
 1009960:	e0bffa15 	stw	r2,-24(fp)
 1009964:	e0bffa17 	ldw	r2,-24(fp)
 1009968:	1004c03a 	cmpne	r2,r2,zero
 100996c:	1000051e 	bne	r2,zero,1009984 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1009970:	e13ffb17 	ldw	r4,-20(fp)
 1009974:	1009cd00 	call	1009cd0 <alt_find_file>
 1009978:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 100997c:	00800044 	movi	r2,1
 1009980:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1009984:	e0bffa17 	ldw	r2,-24(fp)
 1009988:	1005003a 	cmpeq	r2,r2,zero
 100998c:	1000311e 	bne	r2,zero,1009a54 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1009990:	e13ffa17 	ldw	r4,-24(fp)
 1009994:	1009df00 	call	1009df0 <alt_get_fd>
 1009998:	e0bff815 	stw	r2,-32(fp)
 100999c:	e0bff817 	ldw	r2,-32(fp)
 10099a0:	1004403a 	cmpge	r2,r2,zero
 10099a4:	1000031e 	bne	r2,zero,10099b4 <open+0x94>
    {
      status = index;
 10099a8:	e0bff817 	ldw	r2,-32(fp)
 10099ac:	e0bff715 	stw	r2,-36(fp)
 10099b0:	00002a06 	br	1009a5c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 10099b4:	e13ff817 	ldw	r4,-32(fp)
 10099b8:	01400304 	movi	r5,12
 10099bc:	1002dfc0 	call	1002dfc <__mulsi3>
 10099c0:	1007883a 	mov	r3,r2
 10099c4:	00804074 	movhi	r2,257
 10099c8:	10b51b04 	addi	r2,r2,-11156
 10099cc:	1885883a 	add	r2,r3,r2
 10099d0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10099d4:	e0fffc17 	ldw	r3,-16(fp)
 10099d8:	00900034 	movhi	r2,16384
 10099dc:	10bfffc4 	addi	r2,r2,-1
 10099e0:	1886703a 	and	r3,r3,r2
 10099e4:	e0bff917 	ldw	r2,-28(fp)
 10099e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 10099ec:	e0bff617 	ldw	r2,-40(fp)
 10099f0:	1004c03a 	cmpne	r2,r2,zero
 10099f4:	1000061e 	bne	r2,zero,1009a10 <open+0xf0>
 10099f8:	e13ff917 	ldw	r4,-28(fp)
 10099fc:	10098280 	call	1009828 <alt_file_locked>
 1009a00:	e0bff715 	stw	r2,-36(fp)
 1009a04:	e0bff717 	ldw	r2,-36(fp)
 1009a08:	1004803a 	cmplt	r2,r2,zero
 1009a0c:	1000131e 	bne	r2,zero,1009a5c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1009a10:	e0bffa17 	ldw	r2,-24(fp)
 1009a14:	10800317 	ldw	r2,12(r2)
 1009a18:	1005003a 	cmpeq	r2,r2,zero
 1009a1c:	1000091e 	bne	r2,zero,1009a44 <open+0x124>
 1009a20:	e0bffa17 	ldw	r2,-24(fp)
 1009a24:	10800317 	ldw	r2,12(r2)
 1009a28:	e13ff917 	ldw	r4,-28(fp)
 1009a2c:	e17ffb17 	ldw	r5,-20(fp)
 1009a30:	e1bffc17 	ldw	r6,-16(fp)
 1009a34:	e1fffd17 	ldw	r7,-12(fp)
 1009a38:	103ee83a 	callr	r2
 1009a3c:	e0bfff15 	stw	r2,-4(fp)
 1009a40:	00000106 	br	1009a48 <open+0x128>
 1009a44:	e03fff15 	stw	zero,-4(fp)
 1009a48:	e0bfff17 	ldw	r2,-4(fp)
 1009a4c:	e0bff715 	stw	r2,-36(fp)
 1009a50:	00000206 	br	1009a5c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1009a54:	00bffb44 	movi	r2,-19
 1009a58:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1009a5c:	e0bff717 	ldw	r2,-36(fp)
 1009a60:	1004403a 	cmpge	r2,r2,zero
 1009a64:	1000091e 	bne	r2,zero,1009a8c <open+0x16c>
  {
    alt_release_fd (index);  
 1009a68:	e13ff817 	ldw	r4,-32(fp)
 1009a6c:	100368c0 	call	100368c <alt_release_fd>
    ALT_ERRNO = -status;
 1009a70:	1009aac0 	call	1009aac <alt_get_errno>
 1009a74:	e0fff717 	ldw	r3,-36(fp)
 1009a78:	00c7c83a 	sub	r3,zero,r3
 1009a7c:	10c00015 	stw	r3,0(r2)
    return -1;
 1009a80:	00bfffc4 	movi	r2,-1
 1009a84:	e0bffe15 	stw	r2,-8(fp)
 1009a88:	00000206 	br	1009a94 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 1009a8c:	e0bff817 	ldw	r2,-32(fp)
 1009a90:	e0bffe15 	stw	r2,-8(fp)
 1009a94:	e0bffe17 	ldw	r2,-8(fp)
}
 1009a98:	e037883a 	mov	sp,fp
 1009a9c:	dfc00117 	ldw	ra,4(sp)
 1009aa0:	df000017 	ldw	fp,0(sp)
 1009aa4:	dec00204 	addi	sp,sp,8
 1009aa8:	f800283a 	ret

01009aac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1009aac:	defffd04 	addi	sp,sp,-12
 1009ab0:	dfc00215 	stw	ra,8(sp)
 1009ab4:	df000115 	stw	fp,4(sp)
 1009ab8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1009abc:	00804074 	movhi	r2,257
 1009ac0:	10b9b204 	addi	r2,r2,-6456
 1009ac4:	10800017 	ldw	r2,0(r2)
 1009ac8:	1005003a 	cmpeq	r2,r2,zero
 1009acc:	1000061e 	bne	r2,zero,1009ae8 <alt_get_errno+0x3c>
 1009ad0:	00804074 	movhi	r2,257
 1009ad4:	10b9b204 	addi	r2,r2,-6456
 1009ad8:	10800017 	ldw	r2,0(r2)
 1009adc:	103ee83a 	callr	r2
 1009ae0:	e0bfff15 	stw	r2,-4(fp)
 1009ae4:	00000306 	br	1009af4 <alt_get_errno+0x48>
 1009ae8:	00804074 	movhi	r2,257
 1009aec:	10806204 	addi	r2,r2,392
 1009af0:	e0bfff15 	stw	r2,-4(fp)
 1009af4:	e0bfff17 	ldw	r2,-4(fp)
}
 1009af8:	e037883a 	mov	sp,fp
 1009afc:	dfc00117 	ldw	ra,4(sp)
 1009b00:	df000017 	ldw	fp,0(sp)
 1009b04:	dec00204 	addi	sp,sp,8
 1009b08:	f800283a 	ret

01009b0c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1009b0c:	defffa04 	addi	sp,sp,-24
 1009b10:	df000515 	stw	fp,20(sp)
 1009b14:	df000504 	addi	fp,sp,20
 1009b18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009b1c:	0005303a 	rdctl	r2,status
 1009b20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009b24:	e0fffd17 	ldw	r3,-12(fp)
 1009b28:	00bfff84 	movi	r2,-2
 1009b2c:	1884703a 	and	r2,r3,r2
 1009b30:	1001703a 	wrctl	status,r2
  
  return context;
 1009b34:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1009b38:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1009b3c:	e0bfff17 	ldw	r2,-4(fp)
 1009b40:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1009b44:	e0bffc17 	ldw	r2,-16(fp)
 1009b48:	10c00017 	ldw	r3,0(r2)
 1009b4c:	e0bffc17 	ldw	r2,-16(fp)
 1009b50:	10800117 	ldw	r2,4(r2)
 1009b54:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1009b58:	e0bffc17 	ldw	r2,-16(fp)
 1009b5c:	10c00117 	ldw	r3,4(r2)
 1009b60:	e0bffc17 	ldw	r2,-16(fp)
 1009b64:	10800017 	ldw	r2,0(r2)
 1009b68:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1009b6c:	e0fffc17 	ldw	r3,-16(fp)
 1009b70:	e0bffc17 	ldw	r2,-16(fp)
 1009b74:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1009b78:	e0fffc17 	ldw	r3,-16(fp)
 1009b7c:	e0bffc17 	ldw	r2,-16(fp)
 1009b80:	18800015 	stw	r2,0(r3)
 1009b84:	e0bffe17 	ldw	r2,-8(fp)
 1009b88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009b8c:	e0bffb17 	ldw	r2,-20(fp)
 1009b90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1009b94:	e037883a 	mov	sp,fp
 1009b98:	df000017 	ldw	fp,0(sp)
 1009b9c:	dec00104 	addi	sp,sp,4
 1009ba0:	f800283a 	ret

01009ba4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1009ba4:	defffb04 	addi	sp,sp,-20
 1009ba8:	dfc00415 	stw	ra,16(sp)
 1009bac:	df000315 	stw	fp,12(sp)
 1009bb0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1009bb4:	d0a00c17 	ldw	r2,-32720(gp)
 1009bb8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1009bbc:	d0a6cc17 	ldw	r2,-25808(gp)
 1009bc0:	10800044 	addi	r2,r2,1
 1009bc4:	d0a6cc15 	stw	r2,-25808(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1009bc8:	00003106 	br	1009c90 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1009bcc:	e0bffe17 	ldw	r2,-8(fp)
 1009bd0:	10800017 	ldw	r2,0(r2)
 1009bd4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1009bd8:	e0bffe17 	ldw	r2,-8(fp)
 1009bdc:	10800403 	ldbu	r2,16(r2)
 1009be0:	10803fcc 	andi	r2,r2,255
 1009be4:	1005003a 	cmpeq	r2,r2,zero
 1009be8:	1000051e 	bne	r2,zero,1009c00 <alt_tick+0x5c>
 1009bec:	d0a6cc17 	ldw	r2,-25808(gp)
 1009bf0:	1004c03a 	cmpne	r2,r2,zero
 1009bf4:	1000021e 	bne	r2,zero,1009c00 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1009bf8:	e0bffe17 	ldw	r2,-8(fp)
 1009bfc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1009c00:	e0bffe17 	ldw	r2,-8(fp)
 1009c04:	10c00217 	ldw	r3,8(r2)
 1009c08:	d0a6cc17 	ldw	r2,-25808(gp)
 1009c0c:	10c01e36 	bltu	r2,r3,1009c88 <alt_tick+0xe4>
 1009c10:	e0bffe17 	ldw	r2,-8(fp)
 1009c14:	10800403 	ldbu	r2,16(r2)
 1009c18:	10803fcc 	andi	r2,r2,255
 1009c1c:	1004c03a 	cmpne	r2,r2,zero
 1009c20:	1000191e 	bne	r2,zero,1009c88 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1009c24:	e0bffe17 	ldw	r2,-8(fp)
 1009c28:	10c00317 	ldw	r3,12(r2)
 1009c2c:	e0bffe17 	ldw	r2,-8(fp)
 1009c30:	11000517 	ldw	r4,20(r2)
 1009c34:	183ee83a 	callr	r3
 1009c38:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1009c3c:	e0bffd17 	ldw	r2,-12(fp)
 1009c40:	1004c03a 	cmpne	r2,r2,zero
 1009c44:	1000031e 	bne	r2,zero,1009c54 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1009c48:	e13ffe17 	ldw	r4,-8(fp)
 1009c4c:	1009b0c0 	call	1009b0c <alt_alarm_stop>
 1009c50:	00000d06 	br	1009c88 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1009c54:	e0bffe17 	ldw	r2,-8(fp)
 1009c58:	10c00217 	ldw	r3,8(r2)
 1009c5c:	e0bffd17 	ldw	r2,-12(fp)
 1009c60:	1887883a 	add	r3,r3,r2
 1009c64:	e0bffe17 	ldw	r2,-8(fp)
 1009c68:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1009c6c:	e0bffe17 	ldw	r2,-8(fp)
 1009c70:	10c00217 	ldw	r3,8(r2)
 1009c74:	d0a6cc17 	ldw	r2,-25808(gp)
 1009c78:	1880032e 	bgeu	r3,r2,1009c88 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1009c7c:	e0fffe17 	ldw	r3,-8(fp)
 1009c80:	00800044 	movi	r2,1
 1009c84:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1009c88:	e0bfff17 	ldw	r2,-4(fp)
 1009c8c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1009c90:	d0e00c04 	addi	r3,gp,-32720
 1009c94:	e0bffe17 	ldw	r2,-8(fp)
 1009c98:	10ffcc1e 	bne	r2,r3,1009bcc <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1009c9c:	e037883a 	mov	sp,fp
 1009ca0:	dfc00117 	ldw	ra,4(sp)
 1009ca4:	df000017 	ldw	fp,0(sp)
 1009ca8:	dec00204 	addi	sp,sp,8
 1009cac:	f800283a 	ret

01009cb0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1009cb0:	deffff04 	addi	sp,sp,-4
 1009cb4:	df000015 	stw	fp,0(sp)
 1009cb8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1009cbc:	000170fa 	wrctl	ienable,zero
}
 1009cc0:	e037883a 	mov	sp,fp
 1009cc4:	df000017 	ldw	fp,0(sp)
 1009cc8:	dec00104 	addi	sp,sp,4
 1009ccc:	f800283a 	ret

01009cd0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1009cd0:	defffa04 	addi	sp,sp,-24
 1009cd4:	dfc00515 	stw	ra,20(sp)
 1009cd8:	df000415 	stw	fp,16(sp)
 1009cdc:	df000404 	addi	fp,sp,16
 1009ce0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1009ce4:	00804074 	movhi	r2,257
 1009ce8:	10b9ad04 	addi	r2,r2,-6476
 1009cec:	10800017 	ldw	r2,0(r2)
 1009cf0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1009cf4:	00003306 	br	1009dc4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1009cf8:	e0bffd17 	ldw	r2,-12(fp)
 1009cfc:	11000217 	ldw	r4,8(r2)
 1009d00:	100056c0 	call	100056c <strlen>
 1009d04:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1009d08:	e0bffd17 	ldw	r2,-12(fp)
 1009d0c:	10c00217 	ldw	r3,8(r2)
 1009d10:	e0bffc17 	ldw	r2,-16(fp)
 1009d14:	1885883a 	add	r2,r3,r2
 1009d18:	10bfffc4 	addi	r2,r2,-1
 1009d1c:	10800003 	ldbu	r2,0(r2)
 1009d20:	10803fcc 	andi	r2,r2,255
 1009d24:	1080201c 	xori	r2,r2,128
 1009d28:	10bfe004 	addi	r2,r2,-128
 1009d2c:	10800bd8 	cmpnei	r2,r2,47
 1009d30:	1000031e 	bne	r2,zero,1009d40 <alt_find_file+0x70>
    {
      len -= 1;
 1009d34:	e0bffc17 	ldw	r2,-16(fp)
 1009d38:	10bfffc4 	addi	r2,r2,-1
 1009d3c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1009d40:	e0bffc17 	ldw	r2,-16(fp)
 1009d44:	1007883a 	mov	r3,r2
 1009d48:	e0bffe17 	ldw	r2,-8(fp)
 1009d4c:	1885883a 	add	r2,r3,r2
 1009d50:	10800003 	ldbu	r2,0(r2)
 1009d54:	10803fcc 	andi	r2,r2,255
 1009d58:	1080201c 	xori	r2,r2,128
 1009d5c:	10bfe004 	addi	r2,r2,-128
 1009d60:	10800be0 	cmpeqi	r2,r2,47
 1009d64:	10000a1e 	bne	r2,zero,1009d90 <alt_find_file+0xc0>
 1009d68:	e0bffc17 	ldw	r2,-16(fp)
 1009d6c:	1007883a 	mov	r3,r2
 1009d70:	e0bffe17 	ldw	r2,-8(fp)
 1009d74:	1885883a 	add	r2,r3,r2
 1009d78:	10800003 	ldbu	r2,0(r2)
 1009d7c:	10803fcc 	andi	r2,r2,255
 1009d80:	1080201c 	xori	r2,r2,128
 1009d84:	10bfe004 	addi	r2,r2,-128
 1009d88:	1004c03a 	cmpne	r2,r2,zero
 1009d8c:	10000a1e 	bne	r2,zero,1009db8 <alt_find_file+0xe8>
 1009d90:	e0bffd17 	ldw	r2,-12(fp)
 1009d94:	11000217 	ldw	r4,8(r2)
 1009d98:	e1bffc17 	ldw	r6,-16(fp)
 1009d9c:	e17ffe17 	ldw	r5,-8(fp)
 1009da0:	1009ff00 	call	1009ff0 <memcmp>
 1009da4:	1004c03a 	cmpne	r2,r2,zero
 1009da8:	1000031e 	bne	r2,zero,1009db8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1009dac:	e0bffd17 	ldw	r2,-12(fp)
 1009db0:	e0bfff15 	stw	r2,-4(fp)
 1009db4:	00000806 	br	1009dd8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1009db8:	e0bffd17 	ldw	r2,-12(fp)
 1009dbc:	10800017 	ldw	r2,0(r2)
 1009dc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1009dc4:	00c04074 	movhi	r3,257
 1009dc8:	18f9ad04 	addi	r3,r3,-6476
 1009dcc:	e0bffd17 	ldw	r2,-12(fp)
 1009dd0:	10ffc91e 	bne	r2,r3,1009cf8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1009dd4:	e03fff15 	stw	zero,-4(fp)
 1009dd8:	e0bfff17 	ldw	r2,-4(fp)
}
 1009ddc:	e037883a 	mov	sp,fp
 1009de0:	dfc00117 	ldw	ra,4(sp)
 1009de4:	df000017 	ldw	fp,0(sp)
 1009de8:	dec00204 	addi	sp,sp,8
 1009dec:	f800283a 	ret

01009df0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1009df0:	defffa04 	addi	sp,sp,-24
 1009df4:	dfc00515 	stw	ra,20(sp)
 1009df8:	df000415 	stw	fp,16(sp)
 1009dfc:	dc000315 	stw	r16,12(sp)
 1009e00:	df000304 	addi	fp,sp,12
 1009e04:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1009e08:	00bffa04 	movi	r2,-24
 1009e0c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1009e10:	e03ffe15 	stw	zero,-8(fp)
 1009e14:	00002006 	br	1009e98 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 1009e18:	e13ffe17 	ldw	r4,-8(fp)
 1009e1c:	04004074 	movhi	r16,257
 1009e20:	84351b04 	addi	r16,r16,-11156
 1009e24:	01400304 	movi	r5,12
 1009e28:	1002dfc0 	call	1002dfc <__mulsi3>
 1009e2c:	1405883a 	add	r2,r2,r16
 1009e30:	10800017 	ldw	r2,0(r2)
 1009e34:	1004c03a 	cmpne	r2,r2,zero
 1009e38:	1000141e 	bne	r2,zero,1009e8c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 1009e3c:	e13ffe17 	ldw	r4,-8(fp)
 1009e40:	04004074 	movhi	r16,257
 1009e44:	84351b04 	addi	r16,r16,-11156
 1009e48:	01400304 	movi	r5,12
 1009e4c:	1002dfc0 	call	1002dfc <__mulsi3>
 1009e50:	1407883a 	add	r3,r2,r16
 1009e54:	e0bfff17 	ldw	r2,-4(fp)
 1009e58:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1009e5c:	00804074 	movhi	r2,257
 1009e60:	10b9b104 	addi	r2,r2,-6460
 1009e64:	10c00017 	ldw	r3,0(r2)
 1009e68:	e0bffe17 	ldw	r2,-8(fp)
 1009e6c:	1880040e 	bge	r3,r2,1009e80 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 1009e70:	00c04074 	movhi	r3,257
 1009e74:	18f9b104 	addi	r3,r3,-6460
 1009e78:	e0bffe17 	ldw	r2,-8(fp)
 1009e7c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1009e80:	e0bffe17 	ldw	r2,-8(fp)
 1009e84:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1009e88:	00000606 	br	1009ea4 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1009e8c:	e0bffe17 	ldw	r2,-8(fp)
 1009e90:	10800044 	addi	r2,r2,1
 1009e94:	e0bffe15 	stw	r2,-8(fp)
 1009e98:	e0bffe17 	ldw	r2,-8(fp)
 1009e9c:	10800810 	cmplti	r2,r2,32
 1009ea0:	103fdd1e 	bne	r2,zero,1009e18 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1009ea4:	e0bffd17 	ldw	r2,-12(fp)
}
 1009ea8:	e037883a 	mov	sp,fp
 1009eac:	dfc00217 	ldw	ra,8(sp)
 1009eb0:	df000117 	ldw	fp,4(sp)
 1009eb4:	dc000017 	ldw	r16,0(sp)
 1009eb8:	dec00304 	addi	sp,sp,12
 1009ebc:	f800283a 	ret

01009ec0 <__assert_func>:
 1009ec0:	00804074 	movhi	r2,257
 1009ec4:	10b9a904 	addi	r2,r2,-6492
 1009ec8:	10c00017 	ldw	r3,0(r2)
 1009ecc:	defffc04 	addi	sp,sp,-16
 1009ed0:	2011883a 	mov	r8,r4
 1009ed4:	dfc00315 	stw	ra,12(sp)
 1009ed8:	3005883a 	mov	r2,r6
 1009edc:	2813883a 	mov	r9,r5
 1009ee0:	19000317 	ldw	r4,12(r3)
 1009ee4:	30000b26 	beq	r6,zero,1009f14 <__assert_func+0x54>
 1009ee8:	00c04074 	movhi	r3,257
 1009eec:	18f2b004 	addi	r3,r3,-13632
 1009ef0:	380d883a 	mov	r6,r7
 1009ef4:	01404074 	movhi	r5,257
 1009ef8:	2972a404 	addi	r5,r5,-13680
 1009efc:	400f883a 	mov	r7,r8
 1009f00:	da400015 	stw	r9,0(sp)
 1009f04:	d8c00115 	stw	r3,4(sp)
 1009f08:	d8800215 	stw	r2,8(sp)
 1009f0c:	1009f840 	call	1009f84 <fiprintf>
 1009f10:	100a3680 	call	100a368 <abort>
 1009f14:	00804074 	movhi	r2,257
 1009f18:	10b2b304 	addi	r2,r2,-13620
 1009f1c:	1007883a 	mov	r3,r2
 1009f20:	003ff306 	br	1009ef0 <__assert_func+0x30>

01009f24 <__assert>:
 1009f24:	deffff04 	addi	sp,sp,-4
 1009f28:	300f883a 	mov	r7,r6
 1009f2c:	000d883a 	mov	r6,zero
 1009f30:	dfc00015 	stw	ra,0(sp)
 1009f34:	1009ec00 	call	1009ec0 <__assert_func>

01009f38 <atexit>:
 1009f38:	200b883a 	mov	r5,r4
 1009f3c:	000d883a 	mov	r6,zero
 1009f40:	0009883a 	mov	r4,zero
 1009f44:	000f883a 	mov	r7,zero
 1009f48:	100a0801 	jmpi	100a080 <__register_exitproc>

01009f4c <exit>:
 1009f4c:	defffe04 	addi	sp,sp,-8
 1009f50:	000b883a 	mov	r5,zero
 1009f54:	dc000015 	stw	r16,0(sp)
 1009f58:	dfc00115 	stw	ra,4(sp)
 1009f5c:	2021883a 	mov	r16,r4
 1009f60:	100a1b80 	call	100a1b8 <__call_exitprocs>
 1009f64:	00804074 	movhi	r2,257
 1009f68:	10b9aa04 	addi	r2,r2,-6488
 1009f6c:	11000017 	ldw	r4,0(r2)
 1009f70:	20800f17 	ldw	r2,60(r4)
 1009f74:	10000126 	beq	r2,zero,1009f7c <exit+0x30>
 1009f78:	103ee83a 	callr	r2
 1009f7c:	8009883a 	mov	r4,r16
 1009f80:	100c6640 	call	100c664 <_exit>

01009f84 <fiprintf>:
 1009f84:	defffc04 	addi	sp,sp,-16
 1009f88:	2007883a 	mov	r3,r4
 1009f8c:	dfc00115 	stw	ra,4(sp)
 1009f90:	d9800215 	stw	r6,8(sp)
 1009f94:	d9c00315 	stw	r7,12(sp)
 1009f98:	01804074 	movhi	r6,257
 1009f9c:	31b9a904 	addi	r6,r6,-6492
 1009fa0:	31000017 	ldw	r4,0(r6)
 1009fa4:	d8800204 	addi	r2,sp,8
 1009fa8:	280d883a 	mov	r6,r5
 1009fac:	100f883a 	mov	r7,r2
 1009fb0:	180b883a 	mov	r5,r3
 1009fb4:	d8800015 	stw	r2,0(sp)
 1009fb8:	100a0640 	call	100a064 <_vfiprintf_r>
 1009fbc:	dfc00117 	ldw	ra,4(sp)
 1009fc0:	dec00404 	addi	sp,sp,16
 1009fc4:	f800283a 	ret

01009fc8 <_fiprintf_r>:
 1009fc8:	defffd04 	addi	sp,sp,-12
 1009fcc:	dfc00115 	stw	ra,4(sp)
 1009fd0:	d9c00215 	stw	r7,8(sp)
 1009fd4:	d8800204 	addi	r2,sp,8
 1009fd8:	100f883a 	mov	r7,r2
 1009fdc:	d8800015 	stw	r2,0(sp)
 1009fe0:	100a0640 	call	100a064 <_vfiprintf_r>
 1009fe4:	dfc00117 	ldw	ra,4(sp)
 1009fe8:	dec00304 	addi	sp,sp,12
 1009fec:	f800283a 	ret

01009ff0 <memcmp>:
 1009ff0:	00c000c4 	movi	r3,3
 1009ff4:	1980032e 	bgeu	r3,r6,100a004 <memcmp+0x14>
 1009ff8:	2144b03a 	or	r2,r4,r5
 1009ffc:	10c4703a 	and	r2,r2,r3
 100a000:	10000f26 	beq	r2,zero,100a040 <memcmp+0x50>
 100a004:	31ffffc4 	addi	r7,r6,-1
 100a008:	3000061e 	bne	r6,zero,100a024 <memcmp+0x34>
 100a00c:	00000a06 	br	100a038 <memcmp+0x48>
 100a010:	39ffffc4 	addi	r7,r7,-1
 100a014:	00bfffc4 	movi	r2,-1
 100a018:	21000044 	addi	r4,r4,1
 100a01c:	29400044 	addi	r5,r5,1
 100a020:	38800526 	beq	r7,r2,100a038 <memcmp+0x48>
 100a024:	20c00003 	ldbu	r3,0(r4)
 100a028:	28800003 	ldbu	r2,0(r5)
 100a02c:	18bff826 	beq	r3,r2,100a010 <memcmp+0x20>
 100a030:	1885c83a 	sub	r2,r3,r2
 100a034:	f800283a 	ret
 100a038:	0005883a 	mov	r2,zero
 100a03c:	f800283a 	ret
 100a040:	180f883a 	mov	r7,r3
 100a044:	20c00017 	ldw	r3,0(r4)
 100a048:	28800017 	ldw	r2,0(r5)
 100a04c:	18bfed1e 	bne	r3,r2,100a004 <memcmp+0x14>
 100a050:	31bfff04 	addi	r6,r6,-4
 100a054:	21000104 	addi	r4,r4,4
 100a058:	29400104 	addi	r5,r5,4
 100a05c:	39bff936 	bltu	r7,r6,100a044 <memcmp+0x54>
 100a060:	003fe806 	br	100a004 <memcmp+0x14>

0100a064 <_vfiprintf_r>:
 100a064:	defffe04 	addi	sp,sp,-8
 100a068:	dfc00115 	stw	ra,4(sp)
 100a06c:	d9c00015 	stw	r7,0(sp)
 100a070:	100a7280 	call	100a728 <___vfiprintf_internal_r>
 100a074:	dfc00117 	ldw	ra,4(sp)
 100a078:	dec00204 	addi	sp,sp,8
 100a07c:	f800283a 	ret

0100a080 <__register_exitproc>:
 100a080:	defffa04 	addi	sp,sp,-24
 100a084:	00804074 	movhi	r2,257
 100a088:	10b9aa04 	addi	r2,r2,-6488
 100a08c:	dc000015 	stw	r16,0(sp)
 100a090:	14000017 	ldw	r16,0(r2)
 100a094:	dd000415 	stw	r20,16(sp)
 100a098:	2829883a 	mov	r20,r5
 100a09c:	81405217 	ldw	r5,328(r16)
 100a0a0:	dcc00315 	stw	r19,12(sp)
 100a0a4:	dc800215 	stw	r18,8(sp)
 100a0a8:	dc400115 	stw	r17,4(sp)
 100a0ac:	dfc00515 	stw	ra,20(sp)
 100a0b0:	2023883a 	mov	r17,r4
 100a0b4:	3027883a 	mov	r19,r6
 100a0b8:	3825883a 	mov	r18,r7
 100a0bc:	28002526 	beq	r5,zero,100a154 <__register_exitproc+0xd4>
 100a0c0:	29000117 	ldw	r4,4(r5)
 100a0c4:	008007c4 	movi	r2,31
 100a0c8:	11002716 	blt	r2,r4,100a168 <__register_exitproc+0xe8>
 100a0cc:	8800101e 	bne	r17,zero,100a110 <__register_exitproc+0x90>
 100a0d0:	2105883a 	add	r2,r4,r4
 100a0d4:	1085883a 	add	r2,r2,r2
 100a0d8:	20c00044 	addi	r3,r4,1
 100a0dc:	1145883a 	add	r2,r2,r5
 100a0e0:	0009883a 	mov	r4,zero
 100a0e4:	15000215 	stw	r20,8(r2)
 100a0e8:	28c00115 	stw	r3,4(r5)
 100a0ec:	2005883a 	mov	r2,r4
 100a0f0:	dfc00517 	ldw	ra,20(sp)
 100a0f4:	dd000417 	ldw	r20,16(sp)
 100a0f8:	dcc00317 	ldw	r19,12(sp)
 100a0fc:	dc800217 	ldw	r18,8(sp)
 100a100:	dc400117 	ldw	r17,4(sp)
 100a104:	dc000017 	ldw	r16,0(sp)
 100a108:	dec00604 	addi	sp,sp,24
 100a10c:	f800283a 	ret
 100a110:	29802204 	addi	r6,r5,136
 100a114:	00800044 	movi	r2,1
 100a118:	110e983a 	sll	r7,r2,r4
 100a11c:	30c04017 	ldw	r3,256(r6)
 100a120:	2105883a 	add	r2,r4,r4
 100a124:	1085883a 	add	r2,r2,r2
 100a128:	1185883a 	add	r2,r2,r6
 100a12c:	19c6b03a 	or	r3,r3,r7
 100a130:	14802015 	stw	r18,128(r2)
 100a134:	14c00015 	stw	r19,0(r2)
 100a138:	00800084 	movi	r2,2
 100a13c:	30c04015 	stw	r3,256(r6)
 100a140:	88bfe31e 	bne	r17,r2,100a0d0 <__register_exitproc+0x50>
 100a144:	30804117 	ldw	r2,260(r6)
 100a148:	11c4b03a 	or	r2,r2,r7
 100a14c:	30804115 	stw	r2,260(r6)
 100a150:	003fdf06 	br	100a0d0 <__register_exitproc+0x50>
 100a154:	00804074 	movhi	r2,257
 100a158:	10821a04 	addi	r2,r2,2152
 100a15c:	100b883a 	mov	r5,r2
 100a160:	80805215 	stw	r2,328(r16)
 100a164:	003fd606 	br	100a0c0 <__register_exitproc+0x40>
 100a168:	00800034 	movhi	r2,0
 100a16c:	10800004 	addi	r2,r2,0
 100a170:	1000021e 	bne	r2,zero,100a17c <__register_exitproc+0xfc>
 100a174:	013fffc4 	movi	r4,-1
 100a178:	003fdc06 	br	100a0ec <__register_exitproc+0x6c>
 100a17c:	01006404 	movi	r4,400
 100a180:	103ee83a 	callr	r2
 100a184:	1007883a 	mov	r3,r2
 100a188:	103ffa26 	beq	r2,zero,100a174 <__register_exitproc+0xf4>
 100a18c:	80805217 	ldw	r2,328(r16)
 100a190:	180b883a 	mov	r5,r3
 100a194:	18000115 	stw	zero,4(r3)
 100a198:	18800015 	stw	r2,0(r3)
 100a19c:	80c05215 	stw	r3,328(r16)
 100a1a0:	18006215 	stw	zero,392(r3)
 100a1a4:	18006315 	stw	zero,396(r3)
 100a1a8:	0009883a 	mov	r4,zero
 100a1ac:	883fc826 	beq	r17,zero,100a0d0 <__register_exitproc+0x50>
 100a1b0:	003fd706 	br	100a110 <__register_exitproc+0x90>

0100a1b4 <register_fini>:
 100a1b4:	f800283a 	ret

0100a1b8 <__call_exitprocs>:
 100a1b8:	00804074 	movhi	r2,257
 100a1bc:	10b9aa04 	addi	r2,r2,-6488
 100a1c0:	10800017 	ldw	r2,0(r2)
 100a1c4:	defff304 	addi	sp,sp,-52
 100a1c8:	df000b15 	stw	fp,44(sp)
 100a1cc:	d8800115 	stw	r2,4(sp)
 100a1d0:	00800034 	movhi	r2,0
 100a1d4:	10800004 	addi	r2,r2,0
 100a1d8:	1005003a 	cmpeq	r2,r2,zero
 100a1dc:	d8800215 	stw	r2,8(sp)
 100a1e0:	d8800117 	ldw	r2,4(sp)
 100a1e4:	dd400815 	stw	r21,32(sp)
 100a1e8:	dd000715 	stw	r20,28(sp)
 100a1ec:	10805204 	addi	r2,r2,328
 100a1f0:	dfc00c15 	stw	ra,48(sp)
 100a1f4:	ddc00a15 	stw	r23,40(sp)
 100a1f8:	dd800915 	stw	r22,36(sp)
 100a1fc:	dcc00615 	stw	r19,24(sp)
 100a200:	dc800515 	stw	r18,20(sp)
 100a204:	dc400415 	stw	r17,16(sp)
 100a208:	dc000315 	stw	r16,12(sp)
 100a20c:	282b883a 	mov	r21,r5
 100a210:	2039883a 	mov	fp,r4
 100a214:	d8800015 	stw	r2,0(sp)
 100a218:	2829003a 	cmpeq	r20,r5,zero
 100a21c:	d8800117 	ldw	r2,4(sp)
 100a220:	14405217 	ldw	r17,328(r2)
 100a224:	88001026 	beq	r17,zero,100a268 <__call_exitprocs+0xb0>
 100a228:	ddc00017 	ldw	r23,0(sp)
 100a22c:	88800117 	ldw	r2,4(r17)
 100a230:	8c802204 	addi	r18,r17,136
 100a234:	143fffc4 	addi	r16,r2,-1
 100a238:	80000916 	blt	r16,zero,100a260 <__call_exitprocs+0xa8>
 100a23c:	05bfffc4 	movi	r22,-1
 100a240:	a000151e 	bne	r20,zero,100a298 <__call_exitprocs+0xe0>
 100a244:	8409883a 	add	r4,r16,r16
 100a248:	2105883a 	add	r2,r4,r4
 100a24c:	1485883a 	add	r2,r2,r18
 100a250:	10c02017 	ldw	r3,128(r2)
 100a254:	a8c01126 	beq	r21,r3,100a29c <__call_exitprocs+0xe4>
 100a258:	843fffc4 	addi	r16,r16,-1
 100a25c:	85bff81e 	bne	r16,r22,100a240 <__call_exitprocs+0x88>
 100a260:	d8800217 	ldw	r2,8(sp)
 100a264:	10003126 	beq	r2,zero,100a32c <__call_exitprocs+0x174>
 100a268:	dfc00c17 	ldw	ra,48(sp)
 100a26c:	df000b17 	ldw	fp,44(sp)
 100a270:	ddc00a17 	ldw	r23,40(sp)
 100a274:	dd800917 	ldw	r22,36(sp)
 100a278:	dd400817 	ldw	r21,32(sp)
 100a27c:	dd000717 	ldw	r20,28(sp)
 100a280:	dcc00617 	ldw	r19,24(sp)
 100a284:	dc800517 	ldw	r18,20(sp)
 100a288:	dc400417 	ldw	r17,16(sp)
 100a28c:	dc000317 	ldw	r16,12(sp)
 100a290:	dec00d04 	addi	sp,sp,52
 100a294:	f800283a 	ret
 100a298:	8409883a 	add	r4,r16,r16
 100a29c:	88c00117 	ldw	r3,4(r17)
 100a2a0:	2105883a 	add	r2,r4,r4
 100a2a4:	1445883a 	add	r2,r2,r17
 100a2a8:	18ffffc4 	addi	r3,r3,-1
 100a2ac:	11800217 	ldw	r6,8(r2)
 100a2b0:	1c001526 	beq	r3,r16,100a308 <__call_exitprocs+0x150>
 100a2b4:	10000215 	stw	zero,8(r2)
 100a2b8:	303fe726 	beq	r6,zero,100a258 <__call_exitprocs+0xa0>
 100a2bc:	00c00044 	movi	r3,1
 100a2c0:	1c06983a 	sll	r3,r3,r16
 100a2c4:	90804017 	ldw	r2,256(r18)
 100a2c8:	8cc00117 	ldw	r19,4(r17)
 100a2cc:	1884703a 	and	r2,r3,r2
 100a2d0:	10001426 	beq	r2,zero,100a324 <__call_exitprocs+0x16c>
 100a2d4:	90804117 	ldw	r2,260(r18)
 100a2d8:	1884703a 	and	r2,r3,r2
 100a2dc:	10000c1e 	bne	r2,zero,100a310 <__call_exitprocs+0x158>
 100a2e0:	2105883a 	add	r2,r4,r4
 100a2e4:	1485883a 	add	r2,r2,r18
 100a2e8:	11400017 	ldw	r5,0(r2)
 100a2ec:	e009883a 	mov	r4,fp
 100a2f0:	303ee83a 	callr	r6
 100a2f4:	88800117 	ldw	r2,4(r17)
 100a2f8:	98bfc81e 	bne	r19,r2,100a21c <__call_exitprocs+0x64>
 100a2fc:	b8800017 	ldw	r2,0(r23)
 100a300:	147fd526 	beq	r2,r17,100a258 <__call_exitprocs+0xa0>
 100a304:	003fc506 	br	100a21c <__call_exitprocs+0x64>
 100a308:	8c000115 	stw	r16,4(r17)
 100a30c:	003fea06 	br	100a2b8 <__call_exitprocs+0x100>
 100a310:	2105883a 	add	r2,r4,r4
 100a314:	1485883a 	add	r2,r2,r18
 100a318:	11000017 	ldw	r4,0(r2)
 100a31c:	303ee83a 	callr	r6
 100a320:	003ff406 	br	100a2f4 <__call_exitprocs+0x13c>
 100a324:	303ee83a 	callr	r6
 100a328:	003ff206 	br	100a2f4 <__call_exitprocs+0x13c>
 100a32c:	88800117 	ldw	r2,4(r17)
 100a330:	1000081e 	bne	r2,zero,100a354 <__call_exitprocs+0x19c>
 100a334:	89000017 	ldw	r4,0(r17)
 100a338:	20000726 	beq	r4,zero,100a358 <__call_exitprocs+0x1a0>
 100a33c:	b9000015 	stw	r4,0(r23)
 100a340:	8809883a 	mov	r4,r17
 100a344:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 100a348:	bc400017 	ldw	r17,0(r23)
 100a34c:	883fb71e 	bne	r17,zero,100a22c <__call_exitprocs+0x74>
 100a350:	003fc506 	br	100a268 <__call_exitprocs+0xb0>
 100a354:	89000017 	ldw	r4,0(r17)
 100a358:	882f883a 	mov	r23,r17
 100a35c:	2023883a 	mov	r17,r4
 100a360:	883fb21e 	bne	r17,zero,100a22c <__call_exitprocs+0x74>
 100a364:	003fc006 	br	100a268 <__call_exitprocs+0xb0>

0100a368 <abort>:
 100a368:	deffff04 	addi	sp,sp,-4
 100a36c:	01000184 	movi	r4,6
 100a370:	dfc00015 	stw	ra,0(sp)
 100a374:	100a44c0 	call	100a44c <raise>
 100a378:	01000044 	movi	r4,1
 100a37c:	100c6640 	call	100c664 <_exit>

0100a380 <_raise_r>:
 100a380:	defffd04 	addi	sp,sp,-12
 100a384:	008007c4 	movi	r2,31
 100a388:	dc400115 	stw	r17,4(sp)
 100a38c:	dc000015 	stw	r16,0(sp)
 100a390:	dfc00215 	stw	ra,8(sp)
 100a394:	2821883a 	mov	r16,r5
 100a398:	2023883a 	mov	r17,r4
 100a39c:	11402736 	bltu	r2,r5,100a43c <_raise_r+0xbc>
 100a3a0:	20c0b717 	ldw	r3,732(r4)
 100a3a4:	18001326 	beq	r3,zero,100a3f4 <_raise_r+0x74>
 100a3a8:	2945883a 	add	r2,r5,r5
 100a3ac:	1085883a 	add	r2,r2,r2
 100a3b0:	188b883a 	add	r5,r3,r2
 100a3b4:	28c00017 	ldw	r3,0(r5)
 100a3b8:	18000e26 	beq	r3,zero,100a3f4 <_raise_r+0x74>
 100a3bc:	01000044 	movi	r4,1
 100a3c0:	19000526 	beq	r3,r4,100a3d8 <_raise_r+0x58>
 100a3c4:	00bfffc4 	movi	r2,-1
 100a3c8:	18801326 	beq	r3,r2,100a418 <_raise_r+0x98>
 100a3cc:	28000015 	stw	zero,0(r5)
 100a3d0:	8009883a 	mov	r4,r16
 100a3d4:	183ee83a 	callr	r3
 100a3d8:	0007883a 	mov	r3,zero
 100a3dc:	1805883a 	mov	r2,r3
 100a3e0:	dfc00217 	ldw	ra,8(sp)
 100a3e4:	dc400117 	ldw	r17,4(sp)
 100a3e8:	dc000017 	ldw	r16,0(sp)
 100a3ec:	dec00304 	addi	sp,sp,12
 100a3f0:	f800283a 	ret
 100a3f4:	100a6580 	call	100a658 <_getpid_r>
 100a3f8:	100b883a 	mov	r5,r2
 100a3fc:	8809883a 	mov	r4,r17
 100a400:	800d883a 	mov	r6,r16
 100a404:	dfc00217 	ldw	ra,8(sp)
 100a408:	dc400117 	ldw	r17,4(sp)
 100a40c:	dc000017 	ldw	r16,0(sp)
 100a410:	dec00304 	addi	sp,sp,12
 100a414:	100a65c1 	jmpi	100a65c <_kill_r>
 100a418:	2007883a 	mov	r3,r4
 100a41c:	00800584 	movi	r2,22
 100a420:	88800015 	stw	r2,0(r17)
 100a424:	1805883a 	mov	r2,r3
 100a428:	dfc00217 	ldw	ra,8(sp)
 100a42c:	dc400117 	ldw	r17,4(sp)
 100a430:	dc000017 	ldw	r16,0(sp)
 100a434:	dec00304 	addi	sp,sp,12
 100a438:	f800283a 	ret
 100a43c:	00800584 	movi	r2,22
 100a440:	00ffffc4 	movi	r3,-1
 100a444:	20800015 	stw	r2,0(r4)
 100a448:	003fe406 	br	100a3dc <_raise_r+0x5c>

0100a44c <raise>:
 100a44c:	00804074 	movhi	r2,257
 100a450:	10b9a904 	addi	r2,r2,-6492
 100a454:	200b883a 	mov	r5,r4
 100a458:	11000017 	ldw	r4,0(r2)
 100a45c:	100a3801 	jmpi	100a380 <_raise_r>

0100a460 <_init_signal_r>:
 100a460:	2080b717 	ldw	r2,732(r4)
 100a464:	defffe04 	addi	sp,sp,-8
 100a468:	dc000015 	stw	r16,0(sp)
 100a46c:	dfc00115 	stw	ra,4(sp)
 100a470:	2021883a 	mov	r16,r4
 100a474:	10000526 	beq	r2,zero,100a48c <_init_signal_r+0x2c>
 100a478:	0005883a 	mov	r2,zero
 100a47c:	dfc00117 	ldw	ra,4(sp)
 100a480:	dc000017 	ldw	r16,0(sp)
 100a484:	dec00204 	addi	sp,sp,8
 100a488:	f800283a 	ret
 100a48c:	01402004 	movi	r5,128
 100a490:	1000a7c0 	call	1000a7c <_malloc_r>
 100a494:	1009883a 	mov	r4,r2
 100a498:	8080b715 	stw	r2,732(r16)
 100a49c:	10000726 	beq	r2,zero,100a4bc <_init_signal_r+0x5c>
 100a4a0:	0007883a 	mov	r3,zero
 100a4a4:	01402004 	movi	r5,128
 100a4a8:	20c5883a 	add	r2,r4,r3
 100a4ac:	18c00104 	addi	r3,r3,4
 100a4b0:	10000015 	stw	zero,0(r2)
 100a4b4:	197ffc1e 	bne	r3,r5,100a4a8 <_init_signal_r+0x48>
 100a4b8:	003fef06 	br	100a478 <_init_signal_r+0x18>
 100a4bc:	00bfffc4 	movi	r2,-1
 100a4c0:	003fee06 	br	100a47c <_init_signal_r+0x1c>

0100a4c4 <_init_signal>:
 100a4c4:	00804074 	movhi	r2,257
 100a4c8:	10b9a904 	addi	r2,r2,-6492
 100a4cc:	11000017 	ldw	r4,0(r2)
 100a4d0:	100a4601 	jmpi	100a460 <_init_signal_r>

0100a4d4 <__sigtramp_r>:
 100a4d4:	defffd04 	addi	sp,sp,-12
 100a4d8:	008007c4 	movi	r2,31
 100a4dc:	dc000115 	stw	r16,4(sp)
 100a4e0:	dfc00215 	stw	ra,8(sp)
 100a4e4:	2021883a 	mov	r16,r4
 100a4e8:	11401336 	bltu	r2,r5,100a538 <__sigtramp_r+0x64>
 100a4ec:	20c0b717 	ldw	r3,732(r4)
 100a4f0:	18001f26 	beq	r3,zero,100a570 <__sigtramp_r+0x9c>
 100a4f4:	2945883a 	add	r2,r5,r5
 100a4f8:	1085883a 	add	r2,r2,r2
 100a4fc:	10c9883a 	add	r4,r2,r3
 100a500:	20c00017 	ldw	r3,0(r4)
 100a504:	18001626 	beq	r3,zero,100a560 <__sigtramp_r+0x8c>
 100a508:	00bfffc4 	movi	r2,-1
 100a50c:	18801626 	beq	r3,r2,100a568 <__sigtramp_r+0x94>
 100a510:	00800044 	movi	r2,1
 100a514:	18800d26 	beq	r3,r2,100a54c <__sigtramp_r+0x78>
 100a518:	20000015 	stw	zero,0(r4)
 100a51c:	2809883a 	mov	r4,r5
 100a520:	183ee83a 	callr	r3
 100a524:	0005883a 	mov	r2,zero
 100a528:	dfc00217 	ldw	ra,8(sp)
 100a52c:	dc000117 	ldw	r16,4(sp)
 100a530:	dec00304 	addi	sp,sp,12
 100a534:	f800283a 	ret
 100a538:	00bfffc4 	movi	r2,-1
 100a53c:	dfc00217 	ldw	ra,8(sp)
 100a540:	dc000117 	ldw	r16,4(sp)
 100a544:	dec00304 	addi	sp,sp,12
 100a548:	f800283a 	ret
 100a54c:	008000c4 	movi	r2,3
 100a550:	dfc00217 	ldw	ra,8(sp)
 100a554:	dc000117 	ldw	r16,4(sp)
 100a558:	dec00304 	addi	sp,sp,12
 100a55c:	f800283a 	ret
 100a560:	00800044 	movi	r2,1
 100a564:	003ff006 	br	100a528 <__sigtramp_r+0x54>
 100a568:	00800084 	movi	r2,2
 100a56c:	003fee06 	br	100a528 <__sigtramp_r+0x54>
 100a570:	d9400015 	stw	r5,0(sp)
 100a574:	100a4600 	call	100a460 <_init_signal_r>
 100a578:	d9400017 	ldw	r5,0(sp)
 100a57c:	103fee1e 	bne	r2,zero,100a538 <__sigtramp_r+0x64>
 100a580:	80c0b717 	ldw	r3,732(r16)
 100a584:	003fdb06 	br	100a4f4 <__sigtramp_r+0x20>

0100a588 <__sigtramp>:
 100a588:	00804074 	movhi	r2,257
 100a58c:	10b9a904 	addi	r2,r2,-6492
 100a590:	200b883a 	mov	r5,r4
 100a594:	11000017 	ldw	r4,0(r2)
 100a598:	100a4d41 	jmpi	100a4d4 <__sigtramp_r>

0100a59c <_signal_r>:
 100a59c:	defffc04 	addi	sp,sp,-16
 100a5a0:	008007c4 	movi	r2,31
 100a5a4:	dc800215 	stw	r18,8(sp)
 100a5a8:	dc400115 	stw	r17,4(sp)
 100a5ac:	dc000015 	stw	r16,0(sp)
 100a5b0:	dfc00315 	stw	ra,12(sp)
 100a5b4:	2823883a 	mov	r17,r5
 100a5b8:	00ffffc4 	movi	r3,-1
 100a5bc:	3025883a 	mov	r18,r6
 100a5c0:	2021883a 	mov	r16,r4
 100a5c4:	1140092e 	bgeu	r2,r5,100a5ec <_signal_r+0x50>
 100a5c8:	00800584 	movi	r2,22
 100a5cc:	20800015 	stw	r2,0(r4)
 100a5d0:	1805883a 	mov	r2,r3
 100a5d4:	dfc00317 	ldw	ra,12(sp)
 100a5d8:	dc800217 	ldw	r18,8(sp)
 100a5dc:	dc400117 	ldw	r17,4(sp)
 100a5e0:	dc000017 	ldw	r16,0(sp)
 100a5e4:	dec00404 	addi	sp,sp,16
 100a5e8:	f800283a 	ret
 100a5ec:	2140b717 	ldw	r5,732(r4)
 100a5f0:	28000c26 	beq	r5,zero,100a624 <_signal_r+0x88>
 100a5f4:	8c45883a 	add	r2,r17,r17
 100a5f8:	1085883a 	add	r2,r2,r2
 100a5fc:	1145883a 	add	r2,r2,r5
 100a600:	10c00017 	ldw	r3,0(r2)
 100a604:	14800015 	stw	r18,0(r2)
 100a608:	1805883a 	mov	r2,r3
 100a60c:	dfc00317 	ldw	ra,12(sp)
 100a610:	dc800217 	ldw	r18,8(sp)
 100a614:	dc400117 	ldw	r17,4(sp)
 100a618:	dc000017 	ldw	r16,0(sp)
 100a61c:	dec00404 	addi	sp,sp,16
 100a620:	f800283a 	ret
 100a624:	100a4600 	call	100a460 <_init_signal_r>
 100a628:	1000021e 	bne	r2,zero,100a634 <_signal_r+0x98>
 100a62c:	8140b717 	ldw	r5,732(r16)
 100a630:	003ff006 	br	100a5f4 <_signal_r+0x58>
 100a634:	00ffffc4 	movi	r3,-1
 100a638:	003fe506 	br	100a5d0 <_signal_r+0x34>

0100a63c <signal>:
 100a63c:	01804074 	movhi	r6,257
 100a640:	31b9a904 	addi	r6,r6,-6492
 100a644:	2007883a 	mov	r3,r4
 100a648:	31000017 	ldw	r4,0(r6)
 100a64c:	280d883a 	mov	r6,r5
 100a650:	180b883a 	mov	r5,r3
 100a654:	100a59c1 	jmpi	100a59c <_signal_r>

0100a658 <_getpid_r>:
 100a658:	100c6841 	jmpi	100c684 <getpid>

0100a65c <_kill_r>:
 100a65c:	defffd04 	addi	sp,sp,-12
 100a660:	dc000015 	stw	r16,0(sp)
 100a664:	04004074 	movhi	r16,257
 100a668:	84006204 	addi	r16,r16,392
 100a66c:	dc400115 	stw	r17,4(sp)
 100a670:	80000015 	stw	zero,0(r16)
 100a674:	2023883a 	mov	r17,r4
 100a678:	2809883a 	mov	r4,r5
 100a67c:	300b883a 	mov	r5,r6
 100a680:	dfc00215 	stw	ra,8(sp)
 100a684:	100c6a40 	call	100c6a4 <kill>
 100a688:	1007883a 	mov	r3,r2
 100a68c:	00bfffc4 	movi	r2,-1
 100a690:	18800626 	beq	r3,r2,100a6ac <_kill_r+0x50>
 100a694:	1805883a 	mov	r2,r3
 100a698:	dfc00217 	ldw	ra,8(sp)
 100a69c:	dc400117 	ldw	r17,4(sp)
 100a6a0:	dc000017 	ldw	r16,0(sp)
 100a6a4:	dec00304 	addi	sp,sp,12
 100a6a8:	f800283a 	ret
 100a6ac:	80800017 	ldw	r2,0(r16)
 100a6b0:	103ff826 	beq	r2,zero,100a694 <_kill_r+0x38>
 100a6b4:	88800015 	stw	r2,0(r17)
 100a6b8:	1805883a 	mov	r2,r3
 100a6bc:	dfc00217 	ldw	ra,8(sp)
 100a6c0:	dc400117 	ldw	r17,4(sp)
 100a6c4:	dc000017 	ldw	r16,0(sp)
 100a6c8:	dec00304 	addi	sp,sp,12
 100a6cc:	f800283a 	ret

0100a6d0 <__sprint_r>:
 100a6d0:	30800217 	ldw	r2,8(r6)
 100a6d4:	defffe04 	addi	sp,sp,-8
 100a6d8:	dc000015 	stw	r16,0(sp)
 100a6dc:	dfc00115 	stw	ra,4(sp)
 100a6e0:	3021883a 	mov	r16,r6
 100a6e4:	0007883a 	mov	r3,zero
 100a6e8:	1000061e 	bne	r2,zero,100a704 <__sprint_r+0x34>
 100a6ec:	1805883a 	mov	r2,r3
 100a6f0:	30000115 	stw	zero,4(r6)
 100a6f4:	dfc00117 	ldw	ra,4(sp)
 100a6f8:	dc000017 	ldw	r16,0(sp)
 100a6fc:	dec00204 	addi	sp,sp,8
 100a700:	f800283a 	ret
 100a704:	10005e00 	call	10005e0 <__sfvwrite_r>
 100a708:	1007883a 	mov	r3,r2
 100a70c:	1805883a 	mov	r2,r3
 100a710:	80000115 	stw	zero,4(r16)
 100a714:	80000215 	stw	zero,8(r16)
 100a718:	dfc00117 	ldw	ra,4(sp)
 100a71c:	dc000017 	ldw	r16,0(sp)
 100a720:	dec00204 	addi	sp,sp,8
 100a724:	f800283a 	ret

0100a728 <___vfiprintf_internal_r>:
 100a728:	defeb604 	addi	sp,sp,-1320
 100a72c:	dd814615 	stw	r22,1304(sp)
 100a730:	dd414515 	stw	r21,1300(sp)
 100a734:	dc014015 	stw	r16,1280(sp)
 100a738:	dfc14915 	stw	ra,1316(sp)
 100a73c:	df014815 	stw	fp,1312(sp)
 100a740:	ddc14715 	stw	r23,1308(sp)
 100a744:	dd014415 	stw	r20,1296(sp)
 100a748:	dcc14315 	stw	r19,1292(sp)
 100a74c:	dc814215 	stw	r18,1288(sp)
 100a750:	dc414115 	stw	r17,1284(sp)
 100a754:	202d883a 	mov	r22,r4
 100a758:	282b883a 	mov	r21,r5
 100a75c:	3021883a 	mov	r16,r6
 100a760:	20000226 	beq	r4,zero,100a76c <___vfiprintf_internal_r+0x44>
 100a764:	20800e17 	ldw	r2,56(r4)
 100a768:	1001bc26 	beq	r2,zero,100ae5c <___vfiprintf_internal_r+0x734>
 100a76c:	a880030b 	ldhu	r2,12(r21)
 100a770:	1080020c 	andi	r2,r2,8
 100a774:	1001cb26 	beq	r2,zero,100aea4 <___vfiprintf_internal_r+0x77c>
 100a778:	a8800417 	ldw	r2,16(r21)
 100a77c:	1001c926 	beq	r2,zero,100aea4 <___vfiprintf_internal_r+0x77c>
 100a780:	aa00030b 	ldhu	r8,12(r21)
 100a784:	00800284 	movi	r2,10
 100a788:	40c0068c 	andi	r3,r8,26
 100a78c:	18802f1e 	bne	r3,r2,100a84c <___vfiprintf_internal_r+0x124>
 100a790:	a880038f 	ldh	r2,14(r21)
 100a794:	10002d16 	blt	r2,zero,100a84c <___vfiprintf_internal_r+0x124>
 100a798:	aa40038b 	ldhu	r9,14(r21)
 100a79c:	aa800717 	ldw	r10,28(r21)
 100a7a0:	aac00917 	ldw	r11,36(r21)
 100a7a4:	dc401e04 	addi	r17,sp,120
 100a7a8:	d8803504 	addi	r2,sp,212
 100a7ac:	00c10004 	movi	r3,1024
 100a7b0:	423fff4c 	andi	r8,r8,65533
 100a7b4:	800d883a 	mov	r6,r16
 100a7b8:	b009883a 	mov	r4,r22
 100a7bc:	880b883a 	mov	r5,r17
 100a7c0:	da00210d 	sth	r8,132(sp)
 100a7c4:	da40218d 	sth	r9,134(sp)
 100a7c8:	da802515 	stw	r10,148(sp)
 100a7cc:	dac02715 	stw	r11,156(sp)
 100a7d0:	d8802215 	stw	r2,136(sp)
 100a7d4:	d8c02315 	stw	r3,140(sp)
 100a7d8:	d8801e15 	stw	r2,120(sp)
 100a7dc:	d8c02015 	stw	r3,128(sp)
 100a7e0:	d8002415 	stw	zero,144(sp)
 100a7e4:	100a7280 	call	100a728 <___vfiprintf_internal_r>
 100a7e8:	d8813a15 	stw	r2,1256(sp)
 100a7ec:	10000416 	blt	r2,zero,100a800 <___vfiprintf_internal_r+0xd8>
 100a7f0:	b009883a 	mov	r4,r22
 100a7f4:	880b883a 	mov	r5,r17
 100a7f8:	1001bc00 	call	1001bc0 <_fflush_r>
 100a7fc:	1001b01e 	bne	r2,zero,100aec0 <___vfiprintf_internal_r+0x798>
 100a800:	d880210b 	ldhu	r2,132(sp)
 100a804:	1080100c 	andi	r2,r2,64
 100a808:	10000326 	beq	r2,zero,100a818 <___vfiprintf_internal_r+0xf0>
 100a80c:	a880030b 	ldhu	r2,12(r21)
 100a810:	10801014 	ori	r2,r2,64
 100a814:	a880030d 	sth	r2,12(r21)
 100a818:	d8813a17 	ldw	r2,1256(sp)
 100a81c:	dfc14917 	ldw	ra,1316(sp)
 100a820:	df014817 	ldw	fp,1312(sp)
 100a824:	ddc14717 	ldw	r23,1308(sp)
 100a828:	dd814617 	ldw	r22,1304(sp)
 100a82c:	dd414517 	ldw	r21,1300(sp)
 100a830:	dd014417 	ldw	r20,1296(sp)
 100a834:	dcc14317 	ldw	r19,1292(sp)
 100a838:	dc814217 	ldw	r18,1288(sp)
 100a83c:	dc414117 	ldw	r17,1284(sp)
 100a840:	dc014017 	ldw	r16,1280(sp)
 100a844:	dec14a04 	addi	sp,sp,1320
 100a848:	f800283a 	ret
 100a84c:	d8c00e04 	addi	r3,sp,56
 100a850:	8029883a 	mov	r20,r16
 100a854:	d8c00115 	stw	r3,4(sp)
 100a858:	d8000315 	stw	zero,12(sp)
 100a85c:	d8000215 	stw	zero,8(sp)
 100a860:	1825883a 	mov	r18,r3
 100a864:	d8013a15 	stw	zero,1256(sp)
 100a868:	d8013615 	stw	zero,1240(sp)
 100a86c:	a0800007 	ldb	r2,0(r20)
 100a870:	10001926 	beq	r2,zero,100a8d8 <___vfiprintf_internal_r+0x1b0>
 100a874:	00c00944 	movi	r3,37
 100a878:	10c01726 	beq	r2,r3,100a8d8 <___vfiprintf_internal_r+0x1b0>
 100a87c:	a021883a 	mov	r16,r20
 100a880:	00000106 	br	100a888 <___vfiprintf_internal_r+0x160>
 100a884:	10c00326 	beq	r2,r3,100a894 <___vfiprintf_internal_r+0x16c>
 100a888:	84000044 	addi	r16,r16,1
 100a88c:	80800007 	ldb	r2,0(r16)
 100a890:	103ffc1e 	bne	r2,zero,100a884 <___vfiprintf_internal_r+0x15c>
 100a894:	8523c83a 	sub	r17,r16,r20
 100a898:	88000e26 	beq	r17,zero,100a8d4 <___vfiprintf_internal_r+0x1ac>
 100a89c:	d9400317 	ldw	r5,12(sp)
 100a8a0:	d9000217 	ldw	r4,8(sp)
 100a8a4:	008001c4 	movi	r2,7
 100a8a8:	2c4b883a 	add	r5,r5,r17
 100a8ac:	21000044 	addi	r4,r4,1
 100a8b0:	95000015 	stw	r20,0(r18)
 100a8b4:	d9400315 	stw	r5,12(sp)
 100a8b8:	94400115 	stw	r17,4(r18)
 100a8bc:	d9000215 	stw	r4,8(sp)
 100a8c0:	1101e816 	blt	r2,r4,100b064 <___vfiprintf_internal_r+0x93c>
 100a8c4:	94800204 	addi	r18,r18,8
 100a8c8:	d9013a17 	ldw	r4,1256(sp)
 100a8cc:	2449883a 	add	r4,r4,r17
 100a8d0:	d9013a15 	stw	r4,1256(sp)
 100a8d4:	8029883a 	mov	r20,r16
 100a8d8:	a0800007 	ldb	r2,0(r20)
 100a8dc:	10012e26 	beq	r2,zero,100ad98 <___vfiprintf_internal_r+0x670>
 100a8e0:	a5000044 	addi	r20,r20,1
 100a8e4:	d8000005 	stb	zero,0(sp)
 100a8e8:	a0c00007 	ldb	r3,0(r20)
 100a8ec:	05ffffc4 	movi	r23,-1
 100a8f0:	d8013915 	stw	zero,1252(sp)
 100a8f4:	d8013b15 	stw	zero,1260(sp)
 100a8f8:	1827883a 	mov	r19,r3
 100a8fc:	a5000044 	addi	r20,r20,1
 100a900:	98fff804 	addi	r3,r19,-32
 100a904:	00801604 	movi	r2,88
 100a908:	10c06036 	bltu	r2,r3,100aa8c <___vfiprintf_internal_r+0x364>
 100a90c:	18c5883a 	add	r2,r3,r3
 100a910:	1085883a 	add	r2,r2,r2
 100a914:	00c04074 	movhi	r3,257
 100a918:	18ea4a04 	addi	r3,r3,-22232
 100a91c:	10c5883a 	add	r2,r2,r3
 100a920:	11000017 	ldw	r4,0(r2)
 100a924:	2000683a 	jmp	r4
 100a928:	0100b190 	cmplti	r4,zero,710
 100a92c:	0100aa8c 	andi	r4,zero,682
 100a930:	0100aa8c 	andi	r4,zero,682
 100a934:	0100b254 	movui	r4,713
 100a938:	0100aa8c 	andi	r4,zero,682
 100a93c:	0100aa8c 	andi	r4,zero,682
 100a940:	0100aa8c 	andi	r4,zero,682
 100a944:	0100aa8c 	andi	r4,zero,682
 100a948:	0100aa8c 	andi	r4,zero,682
 100a94c:	0100aa8c 	andi	r4,zero,682
 100a950:	0100b118 	cmpnei	r4,zero,708
 100a954:	0100b268 	cmpgeui	r4,zero,713
 100a958:	0100aa8c 	andi	r4,zero,682
 100a95c:	0100b130 	cmpltui	r4,zero,708
 100a960:	0100b1f4 	movhi	r4,711
 100a964:	0100aa8c 	andi	r4,zero,682
 100a968:	0100b1e0 	cmpeqi	r4,zero,711
 100a96c:	0100b1a8 	cmpgeui	r4,zero,710
 100a970:	0100b1a8 	cmpgeui	r4,zero,710
 100a974:	0100b1a8 	cmpgeui	r4,zero,710
 100a978:	0100b1a8 	cmpgeui	r4,zero,710
 100a97c:	0100b1a8 	cmpgeui	r4,zero,710
 100a980:	0100b1a8 	cmpgeui	r4,zero,710
 100a984:	0100b1a8 	cmpgeui	r4,zero,710
 100a988:	0100b1a8 	cmpgeui	r4,zero,710
 100a98c:	0100b1a8 	cmpgeui	r4,zero,710
 100a990:	0100aa8c 	andi	r4,zero,682
 100a994:	0100aa8c 	andi	r4,zero,682
 100a998:	0100aa8c 	andi	r4,zero,682
 100a99c:	0100aa8c 	andi	r4,zero,682
 100a9a0:	0100aa8c 	andi	r4,zero,682
 100a9a4:	0100aa8c 	andi	r4,zero,682
 100a9a8:	0100aa8c 	andi	r4,zero,682
 100a9ac:	0100aa8c 	andi	r4,zero,682
 100a9b0:	0100aa8c 	andi	r4,zero,682
 100a9b4:	0100aa8c 	andi	r4,zero,682
 100a9b8:	0100aef4 	movhi	r4,699
 100a9bc:	0100aa8c 	andi	r4,zero,682
 100a9c0:	0100aa8c 	andi	r4,zero,682
 100a9c4:	0100aa8c 	andi	r4,zero,682
 100a9c8:	0100aa8c 	andi	r4,zero,682
 100a9cc:	0100aa8c 	andi	r4,zero,682
 100a9d0:	0100aa8c 	andi	r4,zero,682
 100a9d4:	0100aa8c 	andi	r4,zero,682
 100a9d8:	0100aa8c 	andi	r4,zero,682
 100a9dc:	0100aa8c 	andi	r4,zero,682
 100a9e0:	0100aa8c 	andi	r4,zero,682
 100a9e4:	0100afa8 	cmpgeui	r4,zero,702
 100a9e8:	0100aa8c 	andi	r4,zero,682
 100a9ec:	0100aa8c 	andi	r4,zero,682
 100a9f0:	0100aa8c 	andi	r4,zero,682
 100a9f4:	0100aa8c 	andi	r4,zero,682
 100a9f8:	0100aa8c 	andi	r4,zero,682
 100a9fc:	0100aff4 	movhi	r4,703
 100aa00:	0100aa8c 	andi	r4,zero,682
 100aa04:	0100aa8c 	andi	r4,zero,682
 100aa08:	0100b300 	call	100b30 <__alt_mem_onchip_memory2_0+0x100b30>
 100aa0c:	0100aa8c 	andi	r4,zero,682
 100aa10:	0100aa8c 	andi	r4,zero,682
 100aa14:	0100aa8c 	andi	r4,zero,682
 100aa18:	0100aa8c 	andi	r4,zero,682
 100aa1c:	0100aa8c 	andi	r4,zero,682
 100aa20:	0100aa8c 	andi	r4,zero,682
 100aa24:	0100aa8c 	andi	r4,zero,682
 100aa28:	0100aa8c 	andi	r4,zero,682
 100aa2c:	0100aa8c 	andi	r4,zero,682
 100aa30:	0100aa8c 	andi	r4,zero,682
 100aa34:	0100b2d8 	cmpnei	r4,zero,715
 100aa38:	0100af00 	call	100af0 <__alt_mem_onchip_memory2_0+0x100af0>
 100aa3c:	0100aa8c 	andi	r4,zero,682
 100aa40:	0100aa8c 	andi	r4,zero,682
 100aa44:	0100aa8c 	andi	r4,zero,682
 100aa48:	0100b3e4 	muli	r4,zero,719
 100aa4c:	0100af00 	call	100af0 <__alt_mem_onchip_memory2_0+0x100af0>
 100aa50:	0100aa8c 	andi	r4,zero,682
 100aa54:	0100aa8c 	andi	r4,zero,682
 100aa58:	0100b338 	rdprs	r4,zero,716
 100aa5c:	0100aa8c 	andi	r4,zero,682
 100aa60:	0100b310 	cmplti	r4,zero,716
 100aa64:	0100afb4 	movhi	r4,702
 100aa68:	0100b3a0 	cmpeqi	r4,zero,718
 100aa6c:	0100b3f8 	rdprs	r4,zero,719
 100aa70:	0100aa8c 	andi	r4,zero,682
 100aa74:	0100b354 	movui	r4,717
 100aa78:	0100aa8c 	andi	r4,zero,682
 100aa7c:	0100b000 	call	100b00 <__alt_mem_onchip_memory2_0+0x100b00>
 100aa80:	0100aa8c 	andi	r4,zero,682
 100aa84:	0100aa8c 	andi	r4,zero,682
 100aa88:	0100b278 	rdprs	r4,zero,713
 100aa8c:	9800c226 	beq	r19,zero,100ad98 <___vfiprintf_internal_r+0x670>
 100aa90:	07000044 	movi	fp,1
 100aa94:	d9000404 	addi	r4,sp,16
 100aa98:	d9c13515 	stw	r7,1236(sp)
 100aa9c:	d9013c15 	stw	r4,1264(sp)
 100aaa0:	df013715 	stw	fp,1244(sp)
 100aaa4:	dcc00405 	stb	r19,16(sp)
 100aaa8:	d8000005 	stb	zero,0(sp)
 100aaac:	d8013815 	stw	zero,1248(sp)
 100aab0:	d9813b17 	ldw	r6,1260(sp)
 100aab4:	3080008c 	andi	r2,r6,2
 100aab8:	1005003a 	cmpeq	r2,r2,zero
 100aabc:	d8813e15 	stw	r2,1272(sp)
 100aac0:	1000011e 	bne	r2,zero,100aac8 <___vfiprintf_internal_r+0x3a0>
 100aac4:	e7000084 	addi	fp,fp,2
 100aac8:	d8813b17 	ldw	r2,1260(sp)
 100aacc:	1080210c 	andi	r2,r2,132
 100aad0:	d8813d15 	stw	r2,1268(sp)
 100aad4:	10002a1e 	bne	r2,zero,100ab80 <___vfiprintf_internal_r+0x458>
 100aad8:	d8c13917 	ldw	r3,1252(sp)
 100aadc:	1f21c83a 	sub	r16,r3,fp
 100aae0:	0400270e 	bge	zero,r16,100ab80 <___vfiprintf_internal_r+0x458>
 100aae4:	00800404 	movi	r2,16
 100aae8:	1402cf0e 	bge	r2,r16,100b628 <___vfiprintf_internal_r+0xf00>
 100aaec:	d9400317 	ldw	r5,12(sp)
 100aaf0:	d9000217 	ldw	r4,8(sp)
 100aaf4:	1023883a 	mov	r17,r2
 100aaf8:	05c04074 	movhi	r23,257
 100aafc:	bdf2cb04 	addi	r23,r23,-13524
 100ab00:	04c001c4 	movi	r19,7
 100ab04:	00000306 	br	100ab14 <___vfiprintf_internal_r+0x3ec>
 100ab08:	843ffc04 	addi	r16,r16,-16
 100ab0c:	94800204 	addi	r18,r18,8
 100ab10:	8c00110e 	bge	r17,r16,100ab58 <___vfiprintf_internal_r+0x430>
 100ab14:	29400404 	addi	r5,r5,16
 100ab18:	21000044 	addi	r4,r4,1
 100ab1c:	95c00015 	stw	r23,0(r18)
 100ab20:	94400115 	stw	r17,4(r18)
 100ab24:	d9400315 	stw	r5,12(sp)
 100ab28:	d9000215 	stw	r4,8(sp)
 100ab2c:	993ff60e 	bge	r19,r4,100ab08 <___vfiprintf_internal_r+0x3e0>
 100ab30:	b009883a 	mov	r4,r22
 100ab34:	a80b883a 	mov	r5,r21
 100ab38:	d9800104 	addi	r6,sp,4
 100ab3c:	100a6d00 	call	100a6d0 <__sprint_r>
 100ab40:	1000981e 	bne	r2,zero,100ada4 <___vfiprintf_internal_r+0x67c>
 100ab44:	843ffc04 	addi	r16,r16,-16
 100ab48:	d9400317 	ldw	r5,12(sp)
 100ab4c:	d9000217 	ldw	r4,8(sp)
 100ab50:	dc800e04 	addi	r18,sp,56
 100ab54:	8c3fef16 	blt	r17,r16,100ab14 <___vfiprintf_internal_r+0x3ec>
 100ab58:	2c0b883a 	add	r5,r5,r16
 100ab5c:	21000044 	addi	r4,r4,1
 100ab60:	008001c4 	movi	r2,7
 100ab64:	95c00015 	stw	r23,0(r18)
 100ab68:	94000115 	stw	r16,4(r18)
 100ab6c:	d9400315 	stw	r5,12(sp)
 100ab70:	d9000215 	stw	r4,8(sp)
 100ab74:	11015616 	blt	r2,r4,100b0d0 <___vfiprintf_internal_r+0x9a8>
 100ab78:	94800204 	addi	r18,r18,8
 100ab7c:	00000206 	br	100ab88 <___vfiprintf_internal_r+0x460>
 100ab80:	d9400317 	ldw	r5,12(sp)
 100ab84:	d9000217 	ldw	r4,8(sp)
 100ab88:	d8800007 	ldb	r2,0(sp)
 100ab8c:	10000a26 	beq	r2,zero,100abb8 <___vfiprintf_internal_r+0x490>
 100ab90:	00800044 	movi	r2,1
 100ab94:	29400044 	addi	r5,r5,1
 100ab98:	21000044 	addi	r4,r4,1
 100ab9c:	90800115 	stw	r2,4(r18)
 100aba0:	008001c4 	movi	r2,7
 100aba4:	96c00015 	stw	sp,0(r18)
 100aba8:	d9400315 	stw	r5,12(sp)
 100abac:	d9000215 	stw	r4,8(sp)
 100abb0:	11013516 	blt	r2,r4,100b088 <___vfiprintf_internal_r+0x960>
 100abb4:	94800204 	addi	r18,r18,8
 100abb8:	d9813e17 	ldw	r6,1272(sp)
 100abbc:	30000b1e 	bne	r6,zero,100abec <___vfiprintf_internal_r+0x4c4>
 100abc0:	d8800044 	addi	r2,sp,1
 100abc4:	29400084 	addi	r5,r5,2
 100abc8:	21000044 	addi	r4,r4,1
 100abcc:	90800015 	stw	r2,0(r18)
 100abd0:	00c00084 	movi	r3,2
 100abd4:	008001c4 	movi	r2,7
 100abd8:	90c00115 	stw	r3,4(r18)
 100abdc:	d9400315 	stw	r5,12(sp)
 100abe0:	d9000215 	stw	r4,8(sp)
 100abe4:	11013116 	blt	r2,r4,100b0ac <___vfiprintf_internal_r+0x984>
 100abe8:	94800204 	addi	r18,r18,8
 100abec:	d8c13d17 	ldw	r3,1268(sp)
 100abf0:	00802004 	movi	r2,128
 100abf4:	18807126 	beq	r3,r2,100adbc <___vfiprintf_internal_r+0x694>
 100abf8:	d8813817 	ldw	r2,1248(sp)
 100abfc:	d8c13717 	ldw	r3,1244(sp)
 100ac00:	10e1c83a 	sub	r16,r2,r3
 100ac04:	0400240e 	bge	zero,r16,100ac98 <___vfiprintf_internal_r+0x570>
 100ac08:	00800404 	movi	r2,16
 100ac0c:	1402580e 	bge	r2,r16,100b570 <___vfiprintf_internal_r+0xe48>
 100ac10:	1023883a 	mov	r17,r2
 100ac14:	05c04074 	movhi	r23,257
 100ac18:	bdf2c704 	addi	r23,r23,-13540
 100ac1c:	04c001c4 	movi	r19,7
 100ac20:	00000306 	br	100ac30 <___vfiprintf_internal_r+0x508>
 100ac24:	843ffc04 	addi	r16,r16,-16
 100ac28:	94800204 	addi	r18,r18,8
 100ac2c:	8c00110e 	bge	r17,r16,100ac74 <___vfiprintf_internal_r+0x54c>
 100ac30:	29400404 	addi	r5,r5,16
 100ac34:	21000044 	addi	r4,r4,1
 100ac38:	95c00015 	stw	r23,0(r18)
 100ac3c:	94400115 	stw	r17,4(r18)
 100ac40:	d9400315 	stw	r5,12(sp)
 100ac44:	d9000215 	stw	r4,8(sp)
 100ac48:	993ff60e 	bge	r19,r4,100ac24 <___vfiprintf_internal_r+0x4fc>
 100ac4c:	b009883a 	mov	r4,r22
 100ac50:	a80b883a 	mov	r5,r21
 100ac54:	d9800104 	addi	r6,sp,4
 100ac58:	100a6d00 	call	100a6d0 <__sprint_r>
 100ac5c:	1000511e 	bne	r2,zero,100ada4 <___vfiprintf_internal_r+0x67c>
 100ac60:	843ffc04 	addi	r16,r16,-16
 100ac64:	d9400317 	ldw	r5,12(sp)
 100ac68:	d9000217 	ldw	r4,8(sp)
 100ac6c:	dc800e04 	addi	r18,sp,56
 100ac70:	8c3fef16 	blt	r17,r16,100ac30 <___vfiprintf_internal_r+0x508>
 100ac74:	2c0b883a 	add	r5,r5,r16
 100ac78:	21000044 	addi	r4,r4,1
 100ac7c:	008001c4 	movi	r2,7
 100ac80:	95c00015 	stw	r23,0(r18)
 100ac84:	94000115 	stw	r16,4(r18)
 100ac88:	d9400315 	stw	r5,12(sp)
 100ac8c:	d9000215 	stw	r4,8(sp)
 100ac90:	1100eb16 	blt	r2,r4,100b040 <___vfiprintf_internal_r+0x918>
 100ac94:	94800204 	addi	r18,r18,8
 100ac98:	d9813717 	ldw	r6,1244(sp)
 100ac9c:	d8813c17 	ldw	r2,1264(sp)
 100aca0:	21000044 	addi	r4,r4,1
 100aca4:	298b883a 	add	r5,r5,r6
 100aca8:	90800015 	stw	r2,0(r18)
 100acac:	008001c4 	movi	r2,7
 100acb0:	91800115 	stw	r6,4(r18)
 100acb4:	d9400315 	stw	r5,12(sp)
 100acb8:	d9000215 	stw	r4,8(sp)
 100acbc:	11006b16 	blt	r2,r4,100ae6c <___vfiprintf_internal_r+0x744>
 100acc0:	90c00204 	addi	r3,r18,8
 100acc4:	d9013b17 	ldw	r4,1260(sp)
 100acc8:	2080010c 	andi	r2,r4,4
 100accc:	10002726 	beq	r2,zero,100ad6c <___vfiprintf_internal_r+0x644>
 100acd0:	d9813917 	ldw	r6,1252(sp)
 100acd4:	3721c83a 	sub	r16,r6,fp
 100acd8:	0400240e 	bge	zero,r16,100ad6c <___vfiprintf_internal_r+0x644>
 100acdc:	00800404 	movi	r2,16
 100ace0:	1402790e 	bge	r2,r16,100b6c8 <___vfiprintf_internal_r+0xfa0>
 100ace4:	d9000217 	ldw	r4,8(sp)
 100ace8:	1023883a 	mov	r17,r2
 100acec:	05c04074 	movhi	r23,257
 100acf0:	bdf2cb04 	addi	r23,r23,-13524
 100acf4:	048001c4 	movi	r18,7
 100acf8:	00000306 	br	100ad08 <___vfiprintf_internal_r+0x5e0>
 100acfc:	843ffc04 	addi	r16,r16,-16
 100ad00:	18c00204 	addi	r3,r3,8
 100ad04:	8c00110e 	bge	r17,r16,100ad4c <___vfiprintf_internal_r+0x624>
 100ad08:	29400404 	addi	r5,r5,16
 100ad0c:	21000044 	addi	r4,r4,1
 100ad10:	1dc00015 	stw	r23,0(r3)
 100ad14:	1c400115 	stw	r17,4(r3)
 100ad18:	d9400315 	stw	r5,12(sp)
 100ad1c:	d9000215 	stw	r4,8(sp)
 100ad20:	913ff60e 	bge	r18,r4,100acfc <___vfiprintf_internal_r+0x5d4>
 100ad24:	b009883a 	mov	r4,r22
 100ad28:	a80b883a 	mov	r5,r21
 100ad2c:	d9800104 	addi	r6,sp,4
 100ad30:	100a6d00 	call	100a6d0 <__sprint_r>
 100ad34:	10001b1e 	bne	r2,zero,100ada4 <___vfiprintf_internal_r+0x67c>
 100ad38:	843ffc04 	addi	r16,r16,-16
 100ad3c:	d9400317 	ldw	r5,12(sp)
 100ad40:	d9000217 	ldw	r4,8(sp)
 100ad44:	d8c00e04 	addi	r3,sp,56
 100ad48:	8c3fef16 	blt	r17,r16,100ad08 <___vfiprintf_internal_r+0x5e0>
 100ad4c:	2c0b883a 	add	r5,r5,r16
 100ad50:	21000044 	addi	r4,r4,1
 100ad54:	008001c4 	movi	r2,7
 100ad58:	1dc00015 	stw	r23,0(r3)
 100ad5c:	1c000115 	stw	r16,4(r3)
 100ad60:	d9400315 	stw	r5,12(sp)
 100ad64:	d9000215 	stw	r4,8(sp)
 100ad68:	11005b16 	blt	r2,r4,100aed8 <___vfiprintf_internal_r+0x7b0>
 100ad6c:	d9013917 	ldw	r4,1252(sp)
 100ad70:	2700010e 	bge	r4,fp,100ad78 <___vfiprintf_internal_r+0x650>
 100ad74:	e009883a 	mov	r4,fp
 100ad78:	d8813a17 	ldw	r2,1256(sp)
 100ad7c:	1105883a 	add	r2,r2,r4
 100ad80:	d8813a15 	stw	r2,1256(sp)
 100ad84:	2800411e 	bne	r5,zero,100ae8c <___vfiprintf_internal_r+0x764>
 100ad88:	d9c13517 	ldw	r7,1236(sp)
 100ad8c:	dc800e04 	addi	r18,sp,56
 100ad90:	d8000215 	stw	zero,8(sp)
 100ad94:	003eb506 	br	100a86c <___vfiprintf_internal_r+0x144>
 100ad98:	d8800317 	ldw	r2,12(sp)
 100ad9c:	1002591e 	bne	r2,zero,100b704 <___vfiprintf_internal_r+0xfdc>
 100ada0:	d8000215 	stw	zero,8(sp)
 100ada4:	a880030b 	ldhu	r2,12(r21)
 100ada8:	1080100c 	andi	r2,r2,64
 100adac:	103e9a26 	beq	r2,zero,100a818 <___vfiprintf_internal_r+0xf0>
 100adb0:	00ffffc4 	movi	r3,-1
 100adb4:	d8c13a15 	stw	r3,1256(sp)
 100adb8:	003e9706 	br	100a818 <___vfiprintf_internal_r+0xf0>
 100adbc:	d9813917 	ldw	r6,1252(sp)
 100adc0:	3721c83a 	sub	r16,r6,fp
 100adc4:	043f8c0e 	bge	zero,r16,100abf8 <___vfiprintf_internal_r+0x4d0>
 100adc8:	00800404 	movi	r2,16
 100adcc:	1402530e 	bge	r2,r16,100b71c <___vfiprintf_internal_r+0xff4>
 100add0:	1023883a 	mov	r17,r2
 100add4:	05c04074 	movhi	r23,257
 100add8:	bdf2c704 	addi	r23,r23,-13540
 100addc:	04c001c4 	movi	r19,7
 100ade0:	00000306 	br	100adf0 <___vfiprintf_internal_r+0x6c8>
 100ade4:	843ffc04 	addi	r16,r16,-16
 100ade8:	94800204 	addi	r18,r18,8
 100adec:	8c00110e 	bge	r17,r16,100ae34 <___vfiprintf_internal_r+0x70c>
 100adf0:	29400404 	addi	r5,r5,16
 100adf4:	21000044 	addi	r4,r4,1
 100adf8:	95c00015 	stw	r23,0(r18)
 100adfc:	94400115 	stw	r17,4(r18)
 100ae00:	d9400315 	stw	r5,12(sp)
 100ae04:	d9000215 	stw	r4,8(sp)
 100ae08:	993ff60e 	bge	r19,r4,100ade4 <___vfiprintf_internal_r+0x6bc>
 100ae0c:	b009883a 	mov	r4,r22
 100ae10:	a80b883a 	mov	r5,r21
 100ae14:	d9800104 	addi	r6,sp,4
 100ae18:	100a6d00 	call	100a6d0 <__sprint_r>
 100ae1c:	103fe11e 	bne	r2,zero,100ada4 <___vfiprintf_internal_r+0x67c>
 100ae20:	843ffc04 	addi	r16,r16,-16
 100ae24:	d9400317 	ldw	r5,12(sp)
 100ae28:	d9000217 	ldw	r4,8(sp)
 100ae2c:	dc800e04 	addi	r18,sp,56
 100ae30:	8c3fef16 	blt	r17,r16,100adf0 <___vfiprintf_internal_r+0x6c8>
 100ae34:	2c0b883a 	add	r5,r5,r16
 100ae38:	21000044 	addi	r4,r4,1
 100ae3c:	008001c4 	movi	r2,7
 100ae40:	95c00015 	stw	r23,0(r18)
 100ae44:	94000115 	stw	r16,4(r18)
 100ae48:	d9400315 	stw	r5,12(sp)
 100ae4c:	d9000215 	stw	r4,8(sp)
 100ae50:	1100a816 	blt	r2,r4,100b0f4 <___vfiprintf_internal_r+0x9cc>
 100ae54:	94800204 	addi	r18,r18,8
 100ae58:	003f6706 	br	100abf8 <___vfiprintf_internal_r+0x4d0>
 100ae5c:	d9c13f15 	stw	r7,1276(sp)
 100ae60:	1001e580 	call	1001e58 <__sinit>
 100ae64:	d9c13f17 	ldw	r7,1276(sp)
 100ae68:	003e4006 	br	100a76c <___vfiprintf_internal_r+0x44>
 100ae6c:	b009883a 	mov	r4,r22
 100ae70:	a80b883a 	mov	r5,r21
 100ae74:	d9800104 	addi	r6,sp,4
 100ae78:	100a6d00 	call	100a6d0 <__sprint_r>
 100ae7c:	103fc91e 	bne	r2,zero,100ada4 <___vfiprintf_internal_r+0x67c>
 100ae80:	d9400317 	ldw	r5,12(sp)
 100ae84:	d8c00e04 	addi	r3,sp,56
 100ae88:	003f8e06 	br	100acc4 <___vfiprintf_internal_r+0x59c>
 100ae8c:	b009883a 	mov	r4,r22
 100ae90:	a80b883a 	mov	r5,r21
 100ae94:	d9800104 	addi	r6,sp,4
 100ae98:	100a6d00 	call	100a6d0 <__sprint_r>
 100ae9c:	103fba26 	beq	r2,zero,100ad88 <___vfiprintf_internal_r+0x660>
 100aea0:	003fc006 	br	100ada4 <___vfiprintf_internal_r+0x67c>
 100aea4:	b009883a 	mov	r4,r22
 100aea8:	a80b883a 	mov	r5,r21
 100aeac:	d9c13f15 	stw	r7,1276(sp)
 100aeb0:	1001a840 	call	1001a84 <__swsetup_r>
 100aeb4:	d9c13f17 	ldw	r7,1276(sp)
 100aeb8:	103e3126 	beq	r2,zero,100a780 <___vfiprintf_internal_r+0x58>
 100aebc:	003fbc06 	br	100adb0 <___vfiprintf_internal_r+0x688>
 100aec0:	00bfffc4 	movi	r2,-1
 100aec4:	d8813a15 	stw	r2,1256(sp)
 100aec8:	d880210b 	ldhu	r2,132(sp)
 100aecc:	1080100c 	andi	r2,r2,64
 100aed0:	103e4e1e 	bne	r2,zero,100a80c <___vfiprintf_internal_r+0xe4>
 100aed4:	003e5006 	br	100a818 <___vfiprintf_internal_r+0xf0>
 100aed8:	b009883a 	mov	r4,r22
 100aedc:	a80b883a 	mov	r5,r21
 100aee0:	d9800104 	addi	r6,sp,4
 100aee4:	100a6d00 	call	100a6d0 <__sprint_r>
 100aee8:	103fae1e 	bne	r2,zero,100ada4 <___vfiprintf_internal_r+0x67c>
 100aeec:	d9400317 	ldw	r5,12(sp)
 100aef0:	003f9e06 	br	100ad6c <___vfiprintf_internal_r+0x644>
 100aef4:	d8813b17 	ldw	r2,1260(sp)
 100aef8:	10800414 	ori	r2,r2,16
 100aefc:	d8813b15 	stw	r2,1260(sp)
 100af00:	d8c13b17 	ldw	r3,1260(sp)
 100af04:	1880080c 	andi	r2,r3,32
 100af08:	10009c1e 	bne	r2,zero,100b17c <___vfiprintf_internal_r+0xa54>
 100af0c:	d9413b17 	ldw	r5,1260(sp)
 100af10:	2880040c 	andi	r2,r5,16
 100af14:	1001b91e 	bne	r2,zero,100b5fc <___vfiprintf_internal_r+0xed4>
 100af18:	d9813b17 	ldw	r6,1260(sp)
 100af1c:	3080100c 	andi	r2,r6,64
 100af20:	1001b626 	beq	r2,zero,100b5fc <___vfiprintf_internal_r+0xed4>
 100af24:	3880000f 	ldh	r2,0(r7)
 100af28:	39c00104 	addi	r7,r7,4
 100af2c:	d9c13515 	stw	r7,1236(sp)
 100af30:	1023d7fa 	srai	r17,r2,31
 100af34:	1021883a 	mov	r16,r2
 100af38:	8801e716 	blt	r17,zero,100b6d8 <___vfiprintf_internal_r+0xfb0>
 100af3c:	01000044 	movi	r4,1
 100af40:	b8000416 	blt	r23,zero,100af54 <___vfiprintf_internal_r+0x82c>
 100af44:	d9413b17 	ldw	r5,1260(sp)
 100af48:	00bfdfc4 	movi	r2,-129
 100af4c:	288a703a 	and	r5,r5,r2
 100af50:	d9413b15 	stw	r5,1260(sp)
 100af54:	8444b03a 	or	r2,r16,r17
 100af58:	10012e1e 	bne	r2,zero,100b414 <___vfiprintf_internal_r+0xcec>
 100af5c:	b8012d1e 	bne	r23,zero,100b414 <___vfiprintf_internal_r+0xcec>
 100af60:	20803fcc 	andi	r2,r4,255
 100af64:	10018526 	beq	r2,zero,100b57c <___vfiprintf_internal_r+0xe54>
 100af68:	d8c00e04 	addi	r3,sp,56
 100af6c:	df000404 	addi	fp,sp,16
 100af70:	d8c13c15 	stw	r3,1264(sp)
 100af74:	d8c13c17 	ldw	r3,1264(sp)
 100af78:	ddc13815 	stw	r23,1248(sp)
 100af7c:	e0c5c83a 	sub	r2,fp,r3
 100af80:	10800a04 	addi	r2,r2,40
 100af84:	d8813715 	stw	r2,1244(sp)
 100af88:	df013817 	ldw	fp,1248(sp)
 100af8c:	d9413717 	ldw	r5,1244(sp)
 100af90:	e140010e 	bge	fp,r5,100af98 <___vfiprintf_internal_r+0x870>
 100af94:	2839883a 	mov	fp,r5
 100af98:	d8800007 	ldb	r2,0(sp)
 100af9c:	103ec426 	beq	r2,zero,100aab0 <___vfiprintf_internal_r+0x388>
 100afa0:	e7000044 	addi	fp,fp,1
 100afa4:	003ec206 	br	100aab0 <___vfiprintf_internal_r+0x388>
 100afa8:	d9813b17 	ldw	r6,1260(sp)
 100afac:	31800414 	ori	r6,r6,16
 100afb0:	d9813b15 	stw	r6,1260(sp)
 100afb4:	d8c13b17 	ldw	r3,1260(sp)
 100afb8:	1880080c 	andi	r2,r3,32
 100afbc:	1000681e 	bne	r2,zero,100b160 <___vfiprintf_internal_r+0xa38>
 100afc0:	d9413b17 	ldw	r5,1260(sp)
 100afc4:	2880040c 	andi	r2,r5,16
 100afc8:	10017e1e 	bne	r2,zero,100b5c4 <___vfiprintf_internal_r+0xe9c>
 100afcc:	d9813b17 	ldw	r6,1260(sp)
 100afd0:	3080100c 	andi	r2,r6,64
 100afd4:	10017b26 	beq	r2,zero,100b5c4 <___vfiprintf_internal_r+0xe9c>
 100afd8:	3c00000b 	ldhu	r16,0(r7)
 100afdc:	0009883a 	mov	r4,zero
 100afe0:	39c00104 	addi	r7,r7,4
 100afe4:	0023883a 	mov	r17,zero
 100afe8:	d9c13515 	stw	r7,1236(sp)
 100afec:	d8000005 	stb	zero,0(sp)
 100aff0:	003fd306 	br	100af40 <___vfiprintf_internal_r+0x818>
 100aff4:	d8813b17 	ldw	r2,1260(sp)
 100aff8:	10800414 	ori	r2,r2,16
 100affc:	d8813b15 	stw	r2,1260(sp)
 100b000:	d8c13b17 	ldw	r3,1260(sp)
 100b004:	1880080c 	andi	r2,r3,32
 100b008:	10004e1e 	bne	r2,zero,100b144 <___vfiprintf_internal_r+0xa1c>
 100b00c:	d9413b17 	ldw	r5,1260(sp)
 100b010:	2880040c 	andi	r2,r5,16
 100b014:	1001721e 	bne	r2,zero,100b5e0 <___vfiprintf_internal_r+0xeb8>
 100b018:	d9813b17 	ldw	r6,1260(sp)
 100b01c:	3080100c 	andi	r2,r6,64
 100b020:	10016f26 	beq	r2,zero,100b5e0 <___vfiprintf_internal_r+0xeb8>
 100b024:	3c00000b 	ldhu	r16,0(r7)
 100b028:	01000044 	movi	r4,1
 100b02c:	39c00104 	addi	r7,r7,4
 100b030:	0023883a 	mov	r17,zero
 100b034:	d9c13515 	stw	r7,1236(sp)
 100b038:	d8000005 	stb	zero,0(sp)
 100b03c:	003fc006 	br	100af40 <___vfiprintf_internal_r+0x818>
 100b040:	b009883a 	mov	r4,r22
 100b044:	a80b883a 	mov	r5,r21
 100b048:	d9800104 	addi	r6,sp,4
 100b04c:	100a6d00 	call	100a6d0 <__sprint_r>
 100b050:	103f541e 	bne	r2,zero,100ada4 <___vfiprintf_internal_r+0x67c>
 100b054:	d9400317 	ldw	r5,12(sp)
 100b058:	d9000217 	ldw	r4,8(sp)
 100b05c:	dc800e04 	addi	r18,sp,56
 100b060:	003f0d06 	br	100ac98 <___vfiprintf_internal_r+0x570>
 100b064:	b009883a 	mov	r4,r22
 100b068:	a80b883a 	mov	r5,r21
 100b06c:	d9800104 	addi	r6,sp,4
 100b070:	d9c13f15 	stw	r7,1276(sp)
 100b074:	100a6d00 	call	100a6d0 <__sprint_r>
 100b078:	d9c13f17 	ldw	r7,1276(sp)
 100b07c:	103f491e 	bne	r2,zero,100ada4 <___vfiprintf_internal_r+0x67c>
 100b080:	dc800e04 	addi	r18,sp,56
 100b084:	003e1006 	br	100a8c8 <___vfiprintf_internal_r+0x1a0>
 100b088:	b009883a 	mov	r4,r22
 100b08c:	a80b883a 	mov	r5,r21
 100b090:	d9800104 	addi	r6,sp,4
 100b094:	100a6d00 	call	100a6d0 <__sprint_r>
 100b098:	103f421e 	bne	r2,zero,100ada4 <___vfiprintf_internal_r+0x67c>
 100b09c:	d9400317 	ldw	r5,12(sp)
 100b0a0:	d9000217 	ldw	r4,8(sp)
 100b0a4:	dc800e04 	addi	r18,sp,56
 100b0a8:	003ec306 	br	100abb8 <___vfiprintf_internal_r+0x490>
 100b0ac:	b009883a 	mov	r4,r22
 100b0b0:	a80b883a 	mov	r5,r21
 100b0b4:	d9800104 	addi	r6,sp,4
 100b0b8:	100a6d00 	call	100a6d0 <__sprint_r>
 100b0bc:	103f391e 	bne	r2,zero,100ada4 <___vfiprintf_internal_r+0x67c>
 100b0c0:	d9400317 	ldw	r5,12(sp)
 100b0c4:	d9000217 	ldw	r4,8(sp)
 100b0c8:	dc800e04 	addi	r18,sp,56
 100b0cc:	003ec706 	br	100abec <___vfiprintf_internal_r+0x4c4>
 100b0d0:	b009883a 	mov	r4,r22
 100b0d4:	a80b883a 	mov	r5,r21
 100b0d8:	d9800104 	addi	r6,sp,4
 100b0dc:	100a6d00 	call	100a6d0 <__sprint_r>
 100b0e0:	103f301e 	bne	r2,zero,100ada4 <___vfiprintf_internal_r+0x67c>
 100b0e4:	d9400317 	ldw	r5,12(sp)
 100b0e8:	d9000217 	ldw	r4,8(sp)
 100b0ec:	dc800e04 	addi	r18,sp,56
 100b0f0:	003ea506 	br	100ab88 <___vfiprintf_internal_r+0x460>
 100b0f4:	b009883a 	mov	r4,r22
 100b0f8:	a80b883a 	mov	r5,r21
 100b0fc:	d9800104 	addi	r6,sp,4
 100b100:	100a6d00 	call	100a6d0 <__sprint_r>
 100b104:	103f271e 	bne	r2,zero,100ada4 <___vfiprintf_internal_r+0x67c>
 100b108:	d9400317 	ldw	r5,12(sp)
 100b10c:	d9000217 	ldw	r4,8(sp)
 100b110:	dc800e04 	addi	r18,sp,56
 100b114:	003eb806 	br	100abf8 <___vfiprintf_internal_r+0x4d0>
 100b118:	38800017 	ldw	r2,0(r7)
 100b11c:	39c00104 	addi	r7,r7,4
 100b120:	d8813915 	stw	r2,1252(sp)
 100b124:	1000b90e 	bge	r2,zero,100b40c <___vfiprintf_internal_r+0xce4>
 100b128:	0085c83a 	sub	r2,zero,r2
 100b12c:	d8813915 	stw	r2,1252(sp)
 100b130:	d9013b17 	ldw	r4,1260(sp)
 100b134:	a0c00007 	ldb	r3,0(r20)
 100b138:	21000114 	ori	r4,r4,4
 100b13c:	d9013b15 	stw	r4,1260(sp)
 100b140:	003ded06 	br	100a8f8 <___vfiprintf_internal_r+0x1d0>
 100b144:	3c000017 	ldw	r16,0(r7)
 100b148:	3c400117 	ldw	r17,4(r7)
 100b14c:	39000204 	addi	r4,r7,8
 100b150:	d9013515 	stw	r4,1236(sp)
 100b154:	01000044 	movi	r4,1
 100b158:	d8000005 	stb	zero,0(sp)
 100b15c:	003f7806 	br	100af40 <___vfiprintf_internal_r+0x818>
 100b160:	3c000017 	ldw	r16,0(r7)
 100b164:	3c400117 	ldw	r17,4(r7)
 100b168:	39000204 	addi	r4,r7,8
 100b16c:	d9013515 	stw	r4,1236(sp)
 100b170:	0009883a 	mov	r4,zero
 100b174:	d8000005 	stb	zero,0(sp)
 100b178:	003f7106 	br	100af40 <___vfiprintf_internal_r+0x818>
 100b17c:	3c000017 	ldw	r16,0(r7)
 100b180:	3c400117 	ldw	r17,4(r7)
 100b184:	39000204 	addi	r4,r7,8
 100b188:	d9013515 	stw	r4,1236(sp)
 100b18c:	003f6a06 	br	100af38 <___vfiprintf_internal_r+0x810>
 100b190:	d8800007 	ldb	r2,0(sp)
 100b194:	10009d1e 	bne	r2,zero,100b40c <___vfiprintf_internal_r+0xce4>
 100b198:	00800804 	movi	r2,32
 100b19c:	d8800005 	stb	r2,0(sp)
 100b1a0:	a0c00007 	ldb	r3,0(r20)
 100b1a4:	003dd406 	br	100a8f8 <___vfiprintf_internal_r+0x1d0>
 100b1a8:	0009883a 	mov	r4,zero
 100b1ac:	04000244 	movi	r16,9
 100b1b0:	01400284 	movi	r5,10
 100b1b4:	d9c13f15 	stw	r7,1276(sp)
 100b1b8:	1002dfc0 	call	1002dfc <__mulsi3>
 100b1bc:	9885883a 	add	r2,r19,r2
 100b1c0:	a4c00007 	ldb	r19,0(r20)
 100b1c4:	113ff404 	addi	r4,r2,-48
 100b1c8:	a5000044 	addi	r20,r20,1
 100b1cc:	98bff404 	addi	r2,r19,-48
 100b1d0:	d9c13f17 	ldw	r7,1276(sp)
 100b1d4:	80bff62e 	bgeu	r16,r2,100b1b0 <___vfiprintf_internal_r+0xa88>
 100b1d8:	d9013915 	stw	r4,1252(sp)
 100b1dc:	003dc806 	br	100a900 <___vfiprintf_internal_r+0x1d8>
 100b1e0:	d9413b17 	ldw	r5,1260(sp)
 100b1e4:	a0c00007 	ldb	r3,0(r20)
 100b1e8:	29402014 	ori	r5,r5,128
 100b1ec:	d9413b15 	stw	r5,1260(sp)
 100b1f0:	003dc106 	br	100a8f8 <___vfiprintf_internal_r+0x1d0>
 100b1f4:	a0c00007 	ldb	r3,0(r20)
 100b1f8:	00800a84 	movi	r2,42
 100b1fc:	a5000044 	addi	r20,r20,1
 100b200:	18817326 	beq	r3,r2,100b7d0 <___vfiprintf_internal_r+0x10a8>
 100b204:	1827883a 	mov	r19,r3
 100b208:	18bff404 	addi	r2,r3,-48
 100b20c:	00c00244 	movi	r3,9
 100b210:	18816d36 	bltu	r3,r2,100b7c8 <___vfiprintf_internal_r+0x10a0>
 100b214:	1821883a 	mov	r16,r3
 100b218:	0009883a 	mov	r4,zero
 100b21c:	01400284 	movi	r5,10
 100b220:	d9c13f15 	stw	r7,1276(sp)
 100b224:	1002dfc0 	call	1002dfc <__mulsi3>
 100b228:	14c5883a 	add	r2,r2,r19
 100b22c:	a4c00007 	ldb	r19,0(r20)
 100b230:	113ff404 	addi	r4,r2,-48
 100b234:	a5000044 	addi	r20,r20,1
 100b238:	98bff404 	addi	r2,r19,-48
 100b23c:	d9c13f17 	ldw	r7,1276(sp)
 100b240:	80bff62e 	bgeu	r16,r2,100b21c <___vfiprintf_internal_r+0xaf4>
 100b244:	202f883a 	mov	r23,r4
 100b248:	203dad0e 	bge	r4,zero,100a900 <___vfiprintf_internal_r+0x1d8>
 100b24c:	05ffffc4 	movi	r23,-1
 100b250:	003dab06 	br	100a900 <___vfiprintf_internal_r+0x1d8>
 100b254:	d9813b17 	ldw	r6,1260(sp)
 100b258:	a0c00007 	ldb	r3,0(r20)
 100b25c:	31800054 	ori	r6,r6,1
 100b260:	d9813b15 	stw	r6,1260(sp)
 100b264:	003da406 	br	100a8f8 <___vfiprintf_internal_r+0x1d0>
 100b268:	00800ac4 	movi	r2,43
 100b26c:	d8800005 	stb	r2,0(sp)
 100b270:	a0c00007 	ldb	r3,0(r20)
 100b274:	003da006 	br	100a8f8 <___vfiprintf_internal_r+0x1d0>
 100b278:	01404074 	movhi	r5,257
 100b27c:	2972b404 	addi	r5,r5,-13616
 100b280:	d9413615 	stw	r5,1240(sp)
 100b284:	d8c13b17 	ldw	r3,1260(sp)
 100b288:	1880080c 	andi	r2,r3,32
 100b28c:	1000c226 	beq	r2,zero,100b598 <___vfiprintf_internal_r+0xe70>
 100b290:	3c000017 	ldw	r16,0(r7)
 100b294:	3c400117 	ldw	r17,4(r7)
 100b298:	39000204 	addi	r4,r7,8
 100b29c:	d9013515 	stw	r4,1236(sp)
 100b2a0:	d8c13b17 	ldw	r3,1260(sp)
 100b2a4:	1880004c 	andi	r2,r3,1
 100b2a8:	1005003a 	cmpeq	r2,r2,zero
 100b2ac:	1000931e 	bne	r2,zero,100b4fc <___vfiprintf_internal_r+0xdd4>
 100b2b0:	8444b03a 	or	r2,r16,r17
 100b2b4:	10009126 	beq	r2,zero,100b4fc <___vfiprintf_internal_r+0xdd4>
 100b2b8:	18c00094 	ori	r3,r3,2
 100b2bc:	00800c04 	movi	r2,48
 100b2c0:	01000084 	movi	r4,2
 100b2c4:	d8c13b15 	stw	r3,1260(sp)
 100b2c8:	d8800045 	stb	r2,1(sp)
 100b2cc:	dcc00085 	stb	r19,2(sp)
 100b2d0:	d8000005 	stb	zero,0(sp)
 100b2d4:	003f1a06 	br	100af40 <___vfiprintf_internal_r+0x818>
 100b2d8:	38800017 	ldw	r2,0(r7)
 100b2dc:	07000044 	movi	fp,1
 100b2e0:	39c00104 	addi	r7,r7,4
 100b2e4:	d9800404 	addi	r6,sp,16
 100b2e8:	d9c13515 	stw	r7,1236(sp)
 100b2ec:	d9813c15 	stw	r6,1264(sp)
 100b2f0:	df013715 	stw	fp,1244(sp)
 100b2f4:	d8800405 	stb	r2,16(sp)
 100b2f8:	d8000005 	stb	zero,0(sp)
 100b2fc:	003deb06 	br	100aaac <___vfiprintf_internal_r+0x384>
 100b300:	00804074 	movhi	r2,257
 100b304:	10b2bb04 	addi	r2,r2,-13588
 100b308:	d8813615 	stw	r2,1240(sp)
 100b30c:	003fdd06 	br	100b284 <___vfiprintf_internal_r+0xb5c>
 100b310:	d8c13b17 	ldw	r3,1260(sp)
 100b314:	1880080c 	andi	r2,r3,32
 100b318:	1000e326 	beq	r2,zero,100b6a8 <___vfiprintf_internal_r+0xf80>
 100b31c:	d9013a17 	ldw	r4,1256(sp)
 100b320:	38800017 	ldw	r2,0(r7)
 100b324:	39c00104 	addi	r7,r7,4
 100b328:	2007d7fa 	srai	r3,r4,31
 100b32c:	11000015 	stw	r4,0(r2)
 100b330:	10c00115 	stw	r3,4(r2)
 100b334:	003d4d06 	br	100a86c <___vfiprintf_internal_r+0x144>
 100b338:	a0c00007 	ldb	r3,0(r20)
 100b33c:	00801b04 	movi	r2,108
 100b340:	1880f926 	beq	r3,r2,100b728 <___vfiprintf_internal_r+0x1000>
 100b344:	d9013b17 	ldw	r4,1260(sp)
 100b348:	21000414 	ori	r4,r4,16
 100b34c:	d9013b15 	stw	r4,1260(sp)
 100b350:	003d6906 	br	100a8f8 <___vfiprintf_internal_r+0x1d0>
 100b354:	d8000005 	stb	zero,0(sp)
 100b358:	39000017 	ldw	r4,0(r7)
 100b35c:	39c00104 	addi	r7,r7,4
 100b360:	d9c13515 	stw	r7,1236(sp)
 100b364:	d9013c15 	stw	r4,1264(sp)
 100b368:	20010226 	beq	r4,zero,100b774 <___vfiprintf_internal_r+0x104c>
 100b36c:	b800fc16 	blt	r23,zero,100b760 <___vfiprintf_internal_r+0x1038>
 100b370:	d9013c17 	ldw	r4,1264(sp)
 100b374:	000b883a 	mov	r5,zero
 100b378:	b80d883a 	mov	r6,r23
 100b37c:	10011bc0 	call	10011bc <memchr>
 100b380:	10000426 	beq	r2,zero,100b394 <___vfiprintf_internal_r+0xc6c>
 100b384:	d9813c17 	ldw	r6,1264(sp)
 100b388:	1185c83a 	sub	r2,r2,r6
 100b38c:	d8813715 	stw	r2,1244(sp)
 100b390:	b880010e 	bge	r23,r2,100b398 <___vfiprintf_internal_r+0xc70>
 100b394:	ddc13715 	stw	r23,1244(sp)
 100b398:	d8013815 	stw	zero,1248(sp)
 100b39c:	003efa06 	br	100af88 <___vfiprintf_internal_r+0x860>
 100b3a0:	d8813b17 	ldw	r2,1260(sp)
 100b3a4:	3c000017 	ldw	r16,0(r7)
 100b3a8:	00c04074 	movhi	r3,257
 100b3ac:	18f2b404 	addi	r3,r3,-13616
 100b3b0:	10800094 	ori	r2,r2,2
 100b3b4:	d8813b15 	stw	r2,1260(sp)
 100b3b8:	39c00104 	addi	r7,r7,4
 100b3bc:	d8c13615 	stw	r3,1240(sp)
 100b3c0:	00800c04 	movi	r2,48
 100b3c4:	00c01e04 	movi	r3,120
 100b3c8:	0023883a 	mov	r17,zero
 100b3cc:	01000084 	movi	r4,2
 100b3d0:	d9c13515 	stw	r7,1236(sp)
 100b3d4:	d8800045 	stb	r2,1(sp)
 100b3d8:	d8c00085 	stb	r3,2(sp)
 100b3dc:	d8000005 	stb	zero,0(sp)
 100b3e0:	003ed706 	br	100af40 <___vfiprintf_internal_r+0x818>
 100b3e4:	d9813b17 	ldw	r6,1260(sp)
 100b3e8:	a0c00007 	ldb	r3,0(r20)
 100b3ec:	31801014 	ori	r6,r6,64
 100b3f0:	d9813b15 	stw	r6,1260(sp)
 100b3f4:	003d4006 	br	100a8f8 <___vfiprintf_internal_r+0x1d0>
 100b3f8:	d9413b17 	ldw	r5,1260(sp)
 100b3fc:	a0c00007 	ldb	r3,0(r20)
 100b400:	29400814 	ori	r5,r5,32
 100b404:	d9413b15 	stw	r5,1260(sp)
 100b408:	003d3b06 	br	100a8f8 <___vfiprintf_internal_r+0x1d0>
 100b40c:	a0c00007 	ldb	r3,0(r20)
 100b410:	003d3906 	br	100a8f8 <___vfiprintf_internal_r+0x1d0>
 100b414:	20c03fcc 	andi	r3,r4,255
 100b418:	00800044 	movi	r2,1
 100b41c:	18802b26 	beq	r3,r2,100b4cc <___vfiprintf_internal_r+0xda4>
 100b420:	18800b36 	bltu	r3,r2,100b450 <___vfiprintf_internal_r+0xd28>
 100b424:	00800084 	movi	r2,2
 100b428:	18808426 	beq	r3,r2,100b63c <___vfiprintf_internal_r+0xf14>
 100b42c:	01004074 	movhi	r4,257
 100b430:	2132c004 	addi	r4,r4,-13568
 100b434:	ddc13815 	stw	r23,1248(sp)
 100b438:	100056c0 	call	100056c <strlen>
 100b43c:	d8813715 	stw	r2,1244(sp)
 100b440:	00804074 	movhi	r2,257
 100b444:	10b2c004 	addi	r2,r2,-13568
 100b448:	d8813c15 	stw	r2,1264(sp)
 100b44c:	003ece06 	br	100af88 <___vfiprintf_internal_r+0x860>
 100b450:	d8800e04 	addi	r2,sp,56
 100b454:	df000404 	addi	fp,sp,16
 100b458:	d8813c15 	stw	r2,1264(sp)
 100b45c:	880a977a 	slli	r5,r17,29
 100b460:	8004d0fa 	srli	r2,r16,3
 100b464:	8806d0fa 	srli	r3,r17,3
 100b468:	810001cc 	andi	r4,r16,7
 100b46c:	2884b03a 	or	r2,r5,r2
 100b470:	d9413c17 	ldw	r5,1264(sp)
 100b474:	21000c04 	addi	r4,r4,48
 100b478:	1021883a 	mov	r16,r2
 100b47c:	297fffc4 	addi	r5,r5,-1
 100b480:	d9413c15 	stw	r5,1264(sp)
 100b484:	29000005 	stb	r4,0(r5)
 100b488:	10cab03a 	or	r5,r2,r3
 100b48c:	1823883a 	mov	r17,r3
 100b490:	283ff21e 	bne	r5,zero,100b45c <___vfiprintf_internal_r+0xd34>
 100b494:	d9813b17 	ldw	r6,1260(sp)
 100b498:	3080004c 	andi	r2,r6,1
 100b49c:	1005003a 	cmpeq	r2,r2,zero
 100b4a0:	103eb41e 	bne	r2,zero,100af74 <___vfiprintf_internal_r+0x84c>
 100b4a4:	20803fcc 	andi	r2,r4,255
 100b4a8:	1080201c 	xori	r2,r2,128
 100b4ac:	10bfe004 	addi	r2,r2,-128
 100b4b0:	00c00c04 	movi	r3,48
 100b4b4:	10feaf26 	beq	r2,r3,100af74 <___vfiprintf_internal_r+0x84c>
 100b4b8:	d8813c17 	ldw	r2,1264(sp)
 100b4bc:	10bfffc4 	addi	r2,r2,-1
 100b4c0:	d8813c15 	stw	r2,1264(sp)
 100b4c4:	10c00005 	stb	r3,0(r2)
 100b4c8:	003eaa06 	br	100af74 <___vfiprintf_internal_r+0x84c>
 100b4cc:	88800068 	cmpgeui	r2,r17,1
 100b4d0:	10000d1e 	bne	r2,zero,100b508 <___vfiprintf_internal_r+0xde0>
 100b4d4:	8800021e 	bne	r17,zero,100b4e0 <___vfiprintf_internal_r+0xdb8>
 100b4d8:	00800244 	movi	r2,9
 100b4dc:	14000a36 	bltu	r2,r16,100b508 <___vfiprintf_internal_r+0xde0>
 100b4e0:	d9800dc4 	addi	r6,sp,55
 100b4e4:	df000404 	addi	fp,sp,16
 100b4e8:	d9813c15 	stw	r6,1264(sp)
 100b4ec:	d8c13c17 	ldw	r3,1264(sp)
 100b4f0:	80800c04 	addi	r2,r16,48
 100b4f4:	18800005 	stb	r2,0(r3)
 100b4f8:	003e9e06 	br	100af74 <___vfiprintf_internal_r+0x84c>
 100b4fc:	01000084 	movi	r4,2
 100b500:	d8000005 	stb	zero,0(sp)
 100b504:	003e8e06 	br	100af40 <___vfiprintf_internal_r+0x818>
 100b508:	df000404 	addi	fp,sp,16
 100b50c:	dcc00e04 	addi	r19,sp,56
 100b510:	8009883a 	mov	r4,r16
 100b514:	880b883a 	mov	r5,r17
 100b518:	01800284 	movi	r6,10
 100b51c:	000f883a 	mov	r7,zero
 100b520:	100be780 	call	100be78 <__umoddi3>
 100b524:	12000c04 	addi	r8,r2,48
 100b528:	9cffffc4 	addi	r19,r19,-1
 100b52c:	8009883a 	mov	r4,r16
 100b530:	880b883a 	mov	r5,r17
 100b534:	01800284 	movi	r6,10
 100b538:	000f883a 	mov	r7,zero
 100b53c:	9a000005 	stb	r8,0(r19)
 100b540:	100b80c0 	call	100b80c <__udivdi3>
 100b544:	1009883a 	mov	r4,r2
 100b548:	1021883a 	mov	r16,r2
 100b54c:	18800068 	cmpgeui	r2,r3,1
 100b550:	1823883a 	mov	r17,r3
 100b554:	103fee1e 	bne	r2,zero,100b510 <___vfiprintf_internal_r+0xde8>
 100b558:	1800021e 	bne	r3,zero,100b564 <___vfiprintf_internal_r+0xe3c>
 100b55c:	00800244 	movi	r2,9
 100b560:	113feb36 	bltu	r2,r4,100b510 <___vfiprintf_internal_r+0xde8>
 100b564:	9cffffc4 	addi	r19,r19,-1
 100b568:	dcc13c15 	stw	r19,1264(sp)
 100b56c:	003fdf06 	br	100b4ec <___vfiprintf_internal_r+0xdc4>
 100b570:	05c04074 	movhi	r23,257
 100b574:	bdf2c704 	addi	r23,r23,-13540
 100b578:	003dbe06 	br	100ac74 <___vfiprintf_internal_r+0x54c>
 100b57c:	d9013b17 	ldw	r4,1260(sp)
 100b580:	2080004c 	andi	r2,r4,1
 100b584:	1000421e 	bne	r2,zero,100b690 <___vfiprintf_internal_r+0xf68>
 100b588:	d9400e04 	addi	r5,sp,56
 100b58c:	df000404 	addi	fp,sp,16
 100b590:	d9413c15 	stw	r5,1264(sp)
 100b594:	003e7706 	br	100af74 <___vfiprintf_internal_r+0x84c>
 100b598:	d9413b17 	ldw	r5,1260(sp)
 100b59c:	2880040c 	andi	r2,r5,16
 100b5a0:	10001c1e 	bne	r2,zero,100b614 <___vfiprintf_internal_r+0xeec>
 100b5a4:	d9813b17 	ldw	r6,1260(sp)
 100b5a8:	3080100c 	andi	r2,r6,64
 100b5ac:	10001926 	beq	r2,zero,100b614 <___vfiprintf_internal_r+0xeec>
 100b5b0:	3c00000b 	ldhu	r16,0(r7)
 100b5b4:	0023883a 	mov	r17,zero
 100b5b8:	39c00104 	addi	r7,r7,4
 100b5bc:	d9c13515 	stw	r7,1236(sp)
 100b5c0:	003f3706 	br	100b2a0 <___vfiprintf_internal_r+0xb78>
 100b5c4:	3c000017 	ldw	r16,0(r7)
 100b5c8:	0009883a 	mov	r4,zero
 100b5cc:	39c00104 	addi	r7,r7,4
 100b5d0:	0023883a 	mov	r17,zero
 100b5d4:	d9c13515 	stw	r7,1236(sp)
 100b5d8:	d8000005 	stb	zero,0(sp)
 100b5dc:	003e5806 	br	100af40 <___vfiprintf_internal_r+0x818>
 100b5e0:	3c000017 	ldw	r16,0(r7)
 100b5e4:	01000044 	movi	r4,1
 100b5e8:	39c00104 	addi	r7,r7,4
 100b5ec:	0023883a 	mov	r17,zero
 100b5f0:	d9c13515 	stw	r7,1236(sp)
 100b5f4:	d8000005 	stb	zero,0(sp)
 100b5f8:	003e5106 	br	100af40 <___vfiprintf_internal_r+0x818>
 100b5fc:	38800017 	ldw	r2,0(r7)
 100b600:	39c00104 	addi	r7,r7,4
 100b604:	d9c13515 	stw	r7,1236(sp)
 100b608:	1023d7fa 	srai	r17,r2,31
 100b60c:	1021883a 	mov	r16,r2
 100b610:	003e4906 	br	100af38 <___vfiprintf_internal_r+0x810>
 100b614:	3c000017 	ldw	r16,0(r7)
 100b618:	0023883a 	mov	r17,zero
 100b61c:	39c00104 	addi	r7,r7,4
 100b620:	d9c13515 	stw	r7,1236(sp)
 100b624:	003f1e06 	br	100b2a0 <___vfiprintf_internal_r+0xb78>
 100b628:	d9400317 	ldw	r5,12(sp)
 100b62c:	d9000217 	ldw	r4,8(sp)
 100b630:	05c04074 	movhi	r23,257
 100b634:	bdf2cb04 	addi	r23,r23,-13524
 100b638:	003d4706 	br	100ab58 <___vfiprintf_internal_r+0x430>
 100b63c:	d9000e04 	addi	r4,sp,56
 100b640:	df000404 	addi	fp,sp,16
 100b644:	d9013c15 	stw	r4,1264(sp)
 100b648:	d9813617 	ldw	r6,1240(sp)
 100b64c:	880a973a 	slli	r5,r17,28
 100b650:	8004d13a 	srli	r2,r16,4
 100b654:	810003cc 	andi	r4,r16,15
 100b658:	3109883a 	add	r4,r6,r4
 100b65c:	2884b03a 	or	r2,r5,r2
 100b660:	21400003 	ldbu	r5,0(r4)
 100b664:	d9013c17 	ldw	r4,1264(sp)
 100b668:	8806d13a 	srli	r3,r17,4
 100b66c:	1021883a 	mov	r16,r2
 100b670:	213fffc4 	addi	r4,r4,-1
 100b674:	d9013c15 	stw	r4,1264(sp)
 100b678:	d9813c17 	ldw	r6,1264(sp)
 100b67c:	10c8b03a 	or	r4,r2,r3
 100b680:	1823883a 	mov	r17,r3
 100b684:	31400005 	stb	r5,0(r6)
 100b688:	203fef1e 	bne	r4,zero,100b648 <___vfiprintf_internal_r+0xf20>
 100b68c:	003e3906 	br	100af74 <___vfiprintf_internal_r+0x84c>
 100b690:	00800c04 	movi	r2,48
 100b694:	d9800dc4 	addi	r6,sp,55
 100b698:	df000404 	addi	fp,sp,16
 100b69c:	d8800dc5 	stb	r2,55(sp)
 100b6a0:	d9813c15 	stw	r6,1264(sp)
 100b6a4:	003e3306 	br	100af74 <___vfiprintf_internal_r+0x84c>
 100b6a8:	d9413b17 	ldw	r5,1260(sp)
 100b6ac:	2880040c 	andi	r2,r5,16
 100b6b0:	10002326 	beq	r2,zero,100b740 <___vfiprintf_internal_r+0x1018>
 100b6b4:	38800017 	ldw	r2,0(r7)
 100b6b8:	d9813a17 	ldw	r6,1256(sp)
 100b6bc:	39c00104 	addi	r7,r7,4
 100b6c0:	11800015 	stw	r6,0(r2)
 100b6c4:	003c6906 	br	100a86c <___vfiprintf_internal_r+0x144>
 100b6c8:	d9000217 	ldw	r4,8(sp)
 100b6cc:	05c04074 	movhi	r23,257
 100b6d0:	bdf2cb04 	addi	r23,r23,-13524
 100b6d4:	003d9d06 	br	100ad4c <___vfiprintf_internal_r+0x624>
 100b6d8:	0005883a 	mov	r2,zero
 100b6dc:	1409c83a 	sub	r4,r2,r16
 100b6e0:	1105803a 	cmpltu	r2,r2,r4
 100b6e4:	044bc83a 	sub	r5,zero,r17
 100b6e8:	2885c83a 	sub	r2,r5,r2
 100b6ec:	2021883a 	mov	r16,r4
 100b6f0:	1023883a 	mov	r17,r2
 100b6f4:	01000044 	movi	r4,1
 100b6f8:	00800b44 	movi	r2,45
 100b6fc:	d8800005 	stb	r2,0(sp)
 100b700:	003e0f06 	br	100af40 <___vfiprintf_internal_r+0x818>
 100b704:	b009883a 	mov	r4,r22
 100b708:	a80b883a 	mov	r5,r21
 100b70c:	d9800104 	addi	r6,sp,4
 100b710:	100a6d00 	call	100a6d0 <__sprint_r>
 100b714:	103da31e 	bne	r2,zero,100ada4 <___vfiprintf_internal_r+0x67c>
 100b718:	003da106 	br	100ada0 <___vfiprintf_internal_r+0x678>
 100b71c:	05c04074 	movhi	r23,257
 100b720:	bdf2c704 	addi	r23,r23,-13540
 100b724:	003dc306 	br	100ae34 <___vfiprintf_internal_r+0x70c>
 100b728:	d8813b17 	ldw	r2,1260(sp)
 100b72c:	a5000044 	addi	r20,r20,1
 100b730:	a0c00007 	ldb	r3,0(r20)
 100b734:	10800814 	ori	r2,r2,32
 100b738:	d8813b15 	stw	r2,1260(sp)
 100b73c:	003c6e06 	br	100a8f8 <___vfiprintf_internal_r+0x1d0>
 100b740:	d8c13b17 	ldw	r3,1260(sp)
 100b744:	1880100c 	andi	r2,r3,64
 100b748:	10001a26 	beq	r2,zero,100b7b4 <___vfiprintf_internal_r+0x108c>
 100b74c:	38800017 	ldw	r2,0(r7)
 100b750:	d9013a17 	ldw	r4,1256(sp)
 100b754:	39c00104 	addi	r7,r7,4
 100b758:	1100000d 	sth	r4,0(r2)
 100b75c:	003c4306 	br	100a86c <___vfiprintf_internal_r+0x144>
 100b760:	d9013c17 	ldw	r4,1264(sp)
 100b764:	100056c0 	call	100056c <strlen>
 100b768:	d8813715 	stw	r2,1244(sp)
 100b76c:	d8013815 	stw	zero,1248(sp)
 100b770:	003e0506 	br	100af88 <___vfiprintf_internal_r+0x860>
 100b774:	00800184 	movi	r2,6
 100b778:	15c00836 	bltu	r2,r23,100b79c <___vfiprintf_internal_r+0x1074>
 100b77c:	b839883a 	mov	fp,r23
 100b780:	b800010e 	bge	r23,zero,100b788 <___vfiprintf_internal_r+0x1060>
 100b784:	0039883a 	mov	fp,zero
 100b788:	01404074 	movhi	r5,257
 100b78c:	2972b904 	addi	r5,r5,-13596
 100b790:	ddc13715 	stw	r23,1244(sp)
 100b794:	d9413c15 	stw	r5,1264(sp)
 100b798:	003cc406 	br	100aaac <___vfiprintf_internal_r+0x384>
 100b79c:	01004074 	movhi	r4,257
 100b7a0:	2132b904 	addi	r4,r4,-13596
 100b7a4:	1039883a 	mov	fp,r2
 100b7a8:	d9013c15 	stw	r4,1264(sp)
 100b7ac:	d8813715 	stw	r2,1244(sp)
 100b7b0:	003cbe06 	br	100aaac <___vfiprintf_internal_r+0x384>
 100b7b4:	38800017 	ldw	r2,0(r7)
 100b7b8:	d9413a17 	ldw	r5,1256(sp)
 100b7bc:	39c00104 	addi	r7,r7,4
 100b7c0:	11400015 	stw	r5,0(r2)
 100b7c4:	003c2906 	br	100a86c <___vfiprintf_internal_r+0x144>
 100b7c8:	002f883a 	mov	r23,zero
 100b7cc:	003c4c06 	br	100a900 <___vfiprintf_internal_r+0x1d8>
 100b7d0:	3dc00017 	ldw	r23,0(r7)
 100b7d4:	39c00104 	addi	r7,r7,4
 100b7d8:	b83f0c0e 	bge	r23,zero,100b40c <___vfiprintf_internal_r+0xce4>
 100b7dc:	a0c00007 	ldb	r3,0(r20)
 100b7e0:	05ffffc4 	movi	r23,-1
 100b7e4:	003c4406 	br	100a8f8 <___vfiprintf_internal_r+0x1d0>

0100b7e8 <__vfiprintf_internal>:
 100b7e8:	00804074 	movhi	r2,257
 100b7ec:	10b9a904 	addi	r2,r2,-6492
 100b7f0:	2013883a 	mov	r9,r4
 100b7f4:	11000017 	ldw	r4,0(r2)
 100b7f8:	2805883a 	mov	r2,r5
 100b7fc:	300f883a 	mov	r7,r6
 100b800:	480b883a 	mov	r5,r9
 100b804:	100d883a 	mov	r6,r2
 100b808:	100a7281 	jmpi	100a728 <___vfiprintf_internal_r>

0100b80c <__udivdi3>:
 100b80c:	defff104 	addi	sp,sp,-60
 100b810:	0015883a 	mov	r10,zero
 100b814:	2005883a 	mov	r2,r4
 100b818:	3011883a 	mov	r8,r6
 100b81c:	df000d15 	stw	fp,52(sp)
 100b820:	dd400a15 	stw	r21,40(sp)
 100b824:	dcc00815 	stw	r19,32(sp)
 100b828:	dfc00e15 	stw	ra,56(sp)
 100b82c:	ddc00c15 	stw	r23,48(sp)
 100b830:	dd800b15 	stw	r22,44(sp)
 100b834:	dd000915 	stw	r20,36(sp)
 100b838:	dc800715 	stw	r18,28(sp)
 100b83c:	dc400615 	stw	r17,24(sp)
 100b840:	dc000515 	stw	r16,20(sp)
 100b844:	da800315 	stw	r10,12(sp)
 100b848:	4027883a 	mov	r19,r8
 100b84c:	1039883a 	mov	fp,r2
 100b850:	282b883a 	mov	r21,r5
 100b854:	da800415 	stw	r10,16(sp)
 100b858:	3800401e 	bne	r7,zero,100b95c <__udivdi3+0x150>
 100b85c:	2a006536 	bltu	r5,r8,100b9f4 <__udivdi3+0x1e8>
 100b860:	4000b526 	beq	r8,zero,100bb38 <__udivdi3+0x32c>
 100b864:	00bfffd4 	movui	r2,65535
 100b868:	14c0ad36 	bltu	r2,r19,100bb20 <__udivdi3+0x314>
 100b86c:	00803fc4 	movi	r2,255
 100b870:	14c15e36 	bltu	r2,r19,100bdec <__udivdi3+0x5e0>
 100b874:	000b883a 	mov	r5,zero
 100b878:	0005883a 	mov	r2,zero
 100b87c:	9884d83a 	srl	r2,r19,r2
 100b880:	01004074 	movhi	r4,257
 100b884:	2132cf04 	addi	r4,r4,-13508
 100b888:	01800804 	movi	r6,32
 100b88c:	1105883a 	add	r2,r2,r4
 100b890:	10c00003 	ldbu	r3,0(r2)
 100b894:	28c7883a 	add	r3,r5,r3
 100b898:	30e9c83a 	sub	r20,r6,r3
 100b89c:	a0010a1e 	bne	r20,zero,100bcc8 <__udivdi3+0x4bc>
 100b8a0:	982ed43a 	srli	r23,r19,16
 100b8a4:	acebc83a 	sub	r21,r21,r19
 100b8a8:	9dbfffcc 	andi	r22,r19,65535
 100b8ac:	05000044 	movi	r20,1
 100b8b0:	a809883a 	mov	r4,r21
 100b8b4:	b80b883a 	mov	r5,r23
 100b8b8:	100c6140 	call	100c614 <__udivsi3>
 100b8bc:	100b883a 	mov	r5,r2
 100b8c0:	b009883a 	mov	r4,r22
 100b8c4:	1021883a 	mov	r16,r2
 100b8c8:	1002dfc0 	call	1002dfc <__mulsi3>
 100b8cc:	a809883a 	mov	r4,r21
 100b8d0:	b80b883a 	mov	r5,r23
 100b8d4:	1023883a 	mov	r17,r2
 100b8d8:	100c61c0 	call	100c61c <__umodsi3>
 100b8dc:	1004943a 	slli	r2,r2,16
 100b8e0:	e006d43a 	srli	r3,fp,16
 100b8e4:	10c4b03a 	or	r2,r2,r3
 100b8e8:	1440042e 	bgeu	r2,r17,100b8fc <__udivdi3+0xf0>
 100b8ec:	14c5883a 	add	r2,r2,r19
 100b8f0:	843fffc4 	addi	r16,r16,-1
 100b8f4:	14c00136 	bltu	r2,r19,100b8fc <__udivdi3+0xf0>
 100b8f8:	14415c36 	bltu	r2,r17,100be6c <__udivdi3+0x660>
 100b8fc:	1463c83a 	sub	r17,r2,r17
 100b900:	8809883a 	mov	r4,r17
 100b904:	b80b883a 	mov	r5,r23
 100b908:	100c6140 	call	100c614 <__udivsi3>
 100b90c:	100b883a 	mov	r5,r2
 100b910:	b009883a 	mov	r4,r22
 100b914:	102b883a 	mov	r21,r2
 100b918:	1002dfc0 	call	1002dfc <__mulsi3>
 100b91c:	8809883a 	mov	r4,r17
 100b920:	b80b883a 	mov	r5,r23
 100b924:	1025883a 	mov	r18,r2
 100b928:	100c61c0 	call	100c61c <__umodsi3>
 100b92c:	1004943a 	slli	r2,r2,16
 100b930:	e0ffffcc 	andi	r3,fp,65535
 100b934:	10c4b03a 	or	r2,r2,r3
 100b938:	1480042e 	bgeu	r2,r18,100b94c <__udivdi3+0x140>
 100b93c:	9885883a 	add	r2,r19,r2
 100b940:	ad7fffc4 	addi	r21,r21,-1
 100b944:	14c00136 	bltu	r2,r19,100b94c <__udivdi3+0x140>
 100b948:	14813c36 	bltu	r2,r18,100be3c <__udivdi3+0x630>
 100b94c:	8004943a 	slli	r2,r16,16
 100b950:	a009883a 	mov	r4,r20
 100b954:	a884b03a 	or	r2,r21,r2
 100b958:	00001506 	br	100b9b0 <__udivdi3+0x1a4>
 100b95c:	380d883a 	mov	r6,r7
 100b960:	29c06c36 	bltu	r5,r7,100bb14 <__udivdi3+0x308>
 100b964:	00bfffd4 	movui	r2,65535
 100b968:	11c06436 	bltu	r2,r7,100bafc <__udivdi3+0x2f0>
 100b96c:	00803fc4 	movi	r2,255
 100b970:	11c11836 	bltu	r2,r7,100bdd4 <__udivdi3+0x5c8>
 100b974:	000b883a 	mov	r5,zero
 100b978:	0005883a 	mov	r2,zero
 100b97c:	3084d83a 	srl	r2,r6,r2
 100b980:	01004074 	movhi	r4,257
 100b984:	2132cf04 	addi	r4,r4,-13508
 100b988:	01c00804 	movi	r7,32
 100b98c:	1105883a 	add	r2,r2,r4
 100b990:	10c00003 	ldbu	r3,0(r2)
 100b994:	28c7883a 	add	r3,r5,r3
 100b998:	38edc83a 	sub	r22,r7,r3
 100b99c:	b000731e 	bne	r22,zero,100bb6c <__udivdi3+0x360>
 100b9a0:	35400136 	bltu	r6,r21,100b9a8 <__udivdi3+0x19c>
 100b9a4:	e4c05b36 	bltu	fp,r19,100bb14 <__udivdi3+0x308>
 100b9a8:	00800044 	movi	r2,1
 100b9ac:	0009883a 	mov	r4,zero
 100b9b0:	d8800315 	stw	r2,12(sp)
 100b9b4:	d9400317 	ldw	r5,12(sp)
 100b9b8:	2007883a 	mov	r3,r4
 100b9bc:	d9000415 	stw	r4,16(sp)
 100b9c0:	2805883a 	mov	r2,r5
 100b9c4:	dfc00e17 	ldw	ra,56(sp)
 100b9c8:	df000d17 	ldw	fp,52(sp)
 100b9cc:	ddc00c17 	ldw	r23,48(sp)
 100b9d0:	dd800b17 	ldw	r22,44(sp)
 100b9d4:	dd400a17 	ldw	r21,40(sp)
 100b9d8:	dd000917 	ldw	r20,36(sp)
 100b9dc:	dcc00817 	ldw	r19,32(sp)
 100b9e0:	dc800717 	ldw	r18,28(sp)
 100b9e4:	dc400617 	ldw	r17,24(sp)
 100b9e8:	dc000517 	ldw	r16,20(sp)
 100b9ec:	dec00f04 	addi	sp,sp,60
 100b9f0:	f800283a 	ret
 100b9f4:	00bfffd4 	movui	r2,65535
 100b9f8:	12005636 	bltu	r2,r8,100bb54 <__udivdi3+0x348>
 100b9fc:	00803fc4 	movi	r2,255
 100ba00:	12010036 	bltu	r2,r8,100be04 <__udivdi3+0x5f8>
 100ba04:	000b883a 	mov	r5,zero
 100ba08:	0005883a 	mov	r2,zero
 100ba0c:	9884d83a 	srl	r2,r19,r2
 100ba10:	01004074 	movhi	r4,257
 100ba14:	2132cf04 	addi	r4,r4,-13508
 100ba18:	01800804 	movi	r6,32
 100ba1c:	1105883a 	add	r2,r2,r4
 100ba20:	10c00003 	ldbu	r3,0(r2)
 100ba24:	28c7883a 	add	r3,r5,r3
 100ba28:	30cbc83a 	sub	r5,r6,r3
 100ba2c:	28000626 	beq	r5,zero,100ba48 <__udivdi3+0x23c>
 100ba30:	3145c83a 	sub	r2,r6,r5
 100ba34:	e084d83a 	srl	r2,fp,r2
 100ba38:	a946983a 	sll	r3,r21,r5
 100ba3c:	e178983a 	sll	fp,fp,r5
 100ba40:	9966983a 	sll	r19,r19,r5
 100ba44:	18aab03a 	or	r21,r3,r2
 100ba48:	982ed43a 	srli	r23,r19,16
 100ba4c:	a809883a 	mov	r4,r21
 100ba50:	9cbfffcc 	andi	r18,r19,65535
 100ba54:	b80b883a 	mov	r5,r23
 100ba58:	100c6140 	call	100c614 <__udivsi3>
 100ba5c:	100b883a 	mov	r5,r2
 100ba60:	9009883a 	mov	r4,r18
 100ba64:	1021883a 	mov	r16,r2
 100ba68:	1002dfc0 	call	1002dfc <__mulsi3>
 100ba6c:	a809883a 	mov	r4,r21
 100ba70:	b80b883a 	mov	r5,r23
 100ba74:	1023883a 	mov	r17,r2
 100ba78:	100c61c0 	call	100c61c <__umodsi3>
 100ba7c:	1004943a 	slli	r2,r2,16
 100ba80:	e006d43a 	srli	r3,fp,16
 100ba84:	10c4b03a 	or	r2,r2,r3
 100ba88:	1440042e 	bgeu	r2,r17,100ba9c <__udivdi3+0x290>
 100ba8c:	14c5883a 	add	r2,r2,r19
 100ba90:	843fffc4 	addi	r16,r16,-1
 100ba94:	14c00136 	bltu	r2,r19,100ba9c <__udivdi3+0x290>
 100ba98:	1440ea36 	bltu	r2,r17,100be44 <__udivdi3+0x638>
 100ba9c:	1463c83a 	sub	r17,r2,r17
 100baa0:	8809883a 	mov	r4,r17
 100baa4:	b80b883a 	mov	r5,r23
 100baa8:	100c6140 	call	100c614 <__udivsi3>
 100baac:	100b883a 	mov	r5,r2
 100bab0:	9009883a 	mov	r4,r18
 100bab4:	102b883a 	mov	r21,r2
 100bab8:	1002dfc0 	call	1002dfc <__mulsi3>
 100babc:	8809883a 	mov	r4,r17
 100bac0:	b80b883a 	mov	r5,r23
 100bac4:	1025883a 	mov	r18,r2
 100bac8:	100c61c0 	call	100c61c <__umodsi3>
 100bacc:	1004943a 	slli	r2,r2,16
 100bad0:	e0ffffcc 	andi	r3,fp,65535
 100bad4:	10c4b03a 	or	r2,r2,r3
 100bad8:	1480042e 	bgeu	r2,r18,100baec <__udivdi3+0x2e0>
 100badc:	9885883a 	add	r2,r19,r2
 100bae0:	ad7fffc4 	addi	r21,r21,-1
 100bae4:	14c00136 	bltu	r2,r19,100baec <__udivdi3+0x2e0>
 100bae8:	1480d936 	bltu	r2,r18,100be50 <__udivdi3+0x644>
 100baec:	8004943a 	slli	r2,r16,16
 100baf0:	0009883a 	mov	r4,zero
 100baf4:	a884b03a 	or	r2,r21,r2
 100baf8:	003fad06 	br	100b9b0 <__udivdi3+0x1a4>
 100bafc:	00804034 	movhi	r2,256
 100bb00:	10bfffc4 	addi	r2,r2,-1
 100bb04:	11c0b636 	bltu	r2,r7,100bde0 <__udivdi3+0x5d4>
 100bb08:	01400404 	movi	r5,16
 100bb0c:	2805883a 	mov	r2,r5
 100bb10:	003f9a06 	br	100b97c <__udivdi3+0x170>
 100bb14:	0005883a 	mov	r2,zero
 100bb18:	0009883a 	mov	r4,zero
 100bb1c:	003fa406 	br	100b9b0 <__udivdi3+0x1a4>
 100bb20:	00804034 	movhi	r2,256
 100bb24:	10bfffc4 	addi	r2,r2,-1
 100bb28:	14c0b336 	bltu	r2,r19,100bdf8 <__udivdi3+0x5ec>
 100bb2c:	01400404 	movi	r5,16
 100bb30:	2805883a 	mov	r2,r5
 100bb34:	003f5106 	br	100b87c <__udivdi3+0x70>
 100bb38:	01000044 	movi	r4,1
 100bb3c:	000b883a 	mov	r5,zero
 100bb40:	100c6140 	call	100c614 <__udivsi3>
 100bb44:	1027883a 	mov	r19,r2
 100bb48:	00bfffd4 	movui	r2,65535
 100bb4c:	14fff436 	bltu	r2,r19,100bb20 <__udivdi3+0x314>
 100bb50:	003f4606 	br	100b86c <__udivdi3+0x60>
 100bb54:	00804034 	movhi	r2,256
 100bb58:	10bfffc4 	addi	r2,r2,-1
 100bb5c:	1200ac36 	bltu	r2,r8,100be10 <__udivdi3+0x604>
 100bb60:	01400404 	movi	r5,16
 100bb64:	2805883a 	mov	r2,r5
 100bb68:	003fa806 	br	100ba0c <__udivdi3+0x200>
 100bb6c:	3d85c83a 	sub	r2,r7,r22
 100bb70:	3588983a 	sll	r4,r6,r22
 100bb74:	9886d83a 	srl	r3,r19,r2
 100bb78:	a8a2d83a 	srl	r17,r21,r2
 100bb7c:	e084d83a 	srl	r2,fp,r2
 100bb80:	20eeb03a 	or	r23,r4,r3
 100bb84:	b824d43a 	srli	r18,r23,16
 100bb88:	ad86983a 	sll	r3,r21,r22
 100bb8c:	8809883a 	mov	r4,r17
 100bb90:	900b883a 	mov	r5,r18
 100bb94:	1886b03a 	or	r3,r3,r2
 100bb98:	d8c00115 	stw	r3,4(sp)
 100bb9c:	bc3fffcc 	andi	r16,r23,65535
 100bba0:	100c6140 	call	100c614 <__udivsi3>
 100bba4:	100b883a 	mov	r5,r2
 100bba8:	8009883a 	mov	r4,r16
 100bbac:	1029883a 	mov	r20,r2
 100bbb0:	1002dfc0 	call	1002dfc <__mulsi3>
 100bbb4:	900b883a 	mov	r5,r18
 100bbb8:	8809883a 	mov	r4,r17
 100bbbc:	102b883a 	mov	r21,r2
 100bbc0:	100c61c0 	call	100c61c <__umodsi3>
 100bbc4:	d9400117 	ldw	r5,4(sp)
 100bbc8:	1004943a 	slli	r2,r2,16
 100bbcc:	9da6983a 	sll	r19,r19,r22
 100bbd0:	2806d43a 	srli	r3,r5,16
 100bbd4:	10c4b03a 	or	r2,r2,r3
 100bbd8:	1540032e 	bgeu	r2,r21,100bbe8 <__udivdi3+0x3dc>
 100bbdc:	15c5883a 	add	r2,r2,r23
 100bbe0:	a53fffc4 	addi	r20,r20,-1
 100bbe4:	15c0912e 	bgeu	r2,r23,100be2c <__udivdi3+0x620>
 100bbe8:	1563c83a 	sub	r17,r2,r21
 100bbec:	8809883a 	mov	r4,r17
 100bbf0:	900b883a 	mov	r5,r18
 100bbf4:	100c6140 	call	100c614 <__udivsi3>
 100bbf8:	100b883a 	mov	r5,r2
 100bbfc:	8009883a 	mov	r4,r16
 100bc00:	102b883a 	mov	r21,r2
 100bc04:	1002dfc0 	call	1002dfc <__mulsi3>
 100bc08:	8809883a 	mov	r4,r17
 100bc0c:	900b883a 	mov	r5,r18
 100bc10:	1021883a 	mov	r16,r2
 100bc14:	100c61c0 	call	100c61c <__umodsi3>
 100bc18:	da800117 	ldw	r10,4(sp)
 100bc1c:	1004943a 	slli	r2,r2,16
 100bc20:	50ffffcc 	andi	r3,r10,65535
 100bc24:	10c6b03a 	or	r3,r2,r3
 100bc28:	1c00032e 	bgeu	r3,r16,100bc38 <__udivdi3+0x42c>
 100bc2c:	1dc7883a 	add	r3,r3,r23
 100bc30:	ad7fffc4 	addi	r21,r21,-1
 100bc34:	1dc0792e 	bgeu	r3,r23,100be1c <__udivdi3+0x610>
 100bc38:	a004943a 	slli	r2,r20,16
 100bc3c:	982ed43a 	srli	r23,r19,16
 100bc40:	9cffffcc 	andi	r19,r19,65535
 100bc44:	a8a4b03a 	or	r18,r21,r2
 100bc48:	947fffcc 	andi	r17,r18,65535
 100bc4c:	902ad43a 	srli	r21,r18,16
 100bc50:	8809883a 	mov	r4,r17
 100bc54:	980b883a 	mov	r5,r19
 100bc58:	1c21c83a 	sub	r16,r3,r16
 100bc5c:	1002dfc0 	call	1002dfc <__mulsi3>
 100bc60:	8809883a 	mov	r4,r17
 100bc64:	b80b883a 	mov	r5,r23
 100bc68:	1029883a 	mov	r20,r2
 100bc6c:	1002dfc0 	call	1002dfc <__mulsi3>
 100bc70:	980b883a 	mov	r5,r19
 100bc74:	a809883a 	mov	r4,r21
 100bc78:	1023883a 	mov	r17,r2
 100bc7c:	1002dfc0 	call	1002dfc <__mulsi3>
 100bc80:	a809883a 	mov	r4,r21
 100bc84:	b80b883a 	mov	r5,r23
 100bc88:	1027883a 	mov	r19,r2
 100bc8c:	1002dfc0 	call	1002dfc <__mulsi3>
 100bc90:	1009883a 	mov	r4,r2
 100bc94:	a004d43a 	srli	r2,r20,16
 100bc98:	8ce3883a 	add	r17,r17,r19
 100bc9c:	1447883a 	add	r3,r2,r17
 100bca0:	1cc0022e 	bgeu	r3,r19,100bcac <__udivdi3+0x4a0>
 100bca4:	00800074 	movhi	r2,1
 100bca8:	2089883a 	add	r4,r4,r2
 100bcac:	1804d43a 	srli	r2,r3,16
 100bcb0:	2085883a 	add	r2,r4,r2
 100bcb4:	80804436 	bltu	r16,r2,100bdc8 <__udivdi3+0x5bc>
 100bcb8:	80803e26 	beq	r16,r2,100bdb4 <__udivdi3+0x5a8>
 100bcbc:	9005883a 	mov	r2,r18
 100bcc0:	0009883a 	mov	r4,zero
 100bcc4:	003f3a06 	br	100b9b0 <__udivdi3+0x1a4>
 100bcc8:	9d26983a 	sll	r19,r19,r20
 100bccc:	3505c83a 	sub	r2,r6,r20
 100bcd0:	a8a2d83a 	srl	r17,r21,r2
 100bcd4:	982ed43a 	srli	r23,r19,16
 100bcd8:	e084d83a 	srl	r2,fp,r2
 100bcdc:	ad06983a 	sll	r3,r21,r20
 100bce0:	8809883a 	mov	r4,r17
 100bce4:	b80b883a 	mov	r5,r23
 100bce8:	1886b03a 	or	r3,r3,r2
 100bcec:	d8c00015 	stw	r3,0(sp)
 100bcf0:	9dbfffcc 	andi	r22,r19,65535
 100bcf4:	100c6140 	call	100c614 <__udivsi3>
 100bcf8:	100b883a 	mov	r5,r2
 100bcfc:	b009883a 	mov	r4,r22
 100bd00:	d8800215 	stw	r2,8(sp)
 100bd04:	1002dfc0 	call	1002dfc <__mulsi3>
 100bd08:	8809883a 	mov	r4,r17
 100bd0c:	b80b883a 	mov	r5,r23
 100bd10:	102b883a 	mov	r21,r2
 100bd14:	100c61c0 	call	100c61c <__umodsi3>
 100bd18:	d9000017 	ldw	r4,0(sp)
 100bd1c:	1004943a 	slli	r2,r2,16
 100bd20:	2006d43a 	srli	r3,r4,16
 100bd24:	10c4b03a 	or	r2,r2,r3
 100bd28:	1540052e 	bgeu	r2,r21,100bd40 <__udivdi3+0x534>
 100bd2c:	d9400217 	ldw	r5,8(sp)
 100bd30:	14c5883a 	add	r2,r2,r19
 100bd34:	297fffc4 	addi	r5,r5,-1
 100bd38:	d9400215 	stw	r5,8(sp)
 100bd3c:	14c0462e 	bgeu	r2,r19,100be58 <__udivdi3+0x64c>
 100bd40:	1563c83a 	sub	r17,r2,r21
 100bd44:	8809883a 	mov	r4,r17
 100bd48:	b80b883a 	mov	r5,r23
 100bd4c:	100c6140 	call	100c614 <__udivsi3>
 100bd50:	100b883a 	mov	r5,r2
 100bd54:	b009883a 	mov	r4,r22
 100bd58:	1025883a 	mov	r18,r2
 100bd5c:	1002dfc0 	call	1002dfc <__mulsi3>
 100bd60:	8809883a 	mov	r4,r17
 100bd64:	b80b883a 	mov	r5,r23
 100bd68:	1021883a 	mov	r16,r2
 100bd6c:	100c61c0 	call	100c61c <__umodsi3>
 100bd70:	da800017 	ldw	r10,0(sp)
 100bd74:	1004943a 	slli	r2,r2,16
 100bd78:	50ffffcc 	andi	r3,r10,65535
 100bd7c:	10c6b03a 	or	r3,r2,r3
 100bd80:	1c00062e 	bgeu	r3,r16,100bd9c <__udivdi3+0x590>
 100bd84:	1cc7883a 	add	r3,r3,r19
 100bd88:	94bfffc4 	addi	r18,r18,-1
 100bd8c:	1cc00336 	bltu	r3,r19,100bd9c <__udivdi3+0x590>
 100bd90:	1c00022e 	bgeu	r3,r16,100bd9c <__udivdi3+0x590>
 100bd94:	94bfffc4 	addi	r18,r18,-1
 100bd98:	1cc7883a 	add	r3,r3,r19
 100bd9c:	d9000217 	ldw	r4,8(sp)
 100bda0:	e538983a 	sll	fp,fp,r20
 100bda4:	1c2bc83a 	sub	r21,r3,r16
 100bda8:	2004943a 	slli	r2,r4,16
 100bdac:	90a8b03a 	or	r20,r18,r2
 100bdb0:	003ebf06 	br	100b8b0 <__udivdi3+0xa4>
 100bdb4:	1804943a 	slli	r2,r3,16
 100bdb8:	e588983a 	sll	r4,fp,r22
 100bdbc:	a0ffffcc 	andi	r3,r20,65535
 100bdc0:	10c5883a 	add	r2,r2,r3
 100bdc4:	20bfbd2e 	bgeu	r4,r2,100bcbc <__udivdi3+0x4b0>
 100bdc8:	90bfffc4 	addi	r2,r18,-1
 100bdcc:	0009883a 	mov	r4,zero
 100bdd0:	003ef706 	br	100b9b0 <__udivdi3+0x1a4>
 100bdd4:	01400204 	movi	r5,8
 100bdd8:	2805883a 	mov	r2,r5
 100bddc:	003ee706 	br	100b97c <__udivdi3+0x170>
 100bde0:	01400604 	movi	r5,24
 100bde4:	2805883a 	mov	r2,r5
 100bde8:	003ee406 	br	100b97c <__udivdi3+0x170>
 100bdec:	01400204 	movi	r5,8
 100bdf0:	2805883a 	mov	r2,r5
 100bdf4:	003ea106 	br	100b87c <__udivdi3+0x70>
 100bdf8:	01400604 	movi	r5,24
 100bdfc:	2805883a 	mov	r2,r5
 100be00:	003e9e06 	br	100b87c <__udivdi3+0x70>
 100be04:	01400204 	movi	r5,8
 100be08:	2805883a 	mov	r2,r5
 100be0c:	003eff06 	br	100ba0c <__udivdi3+0x200>
 100be10:	01400604 	movi	r5,24
 100be14:	2805883a 	mov	r2,r5
 100be18:	003efc06 	br	100ba0c <__udivdi3+0x200>
 100be1c:	1c3f862e 	bgeu	r3,r16,100bc38 <__udivdi3+0x42c>
 100be20:	1dc7883a 	add	r3,r3,r23
 100be24:	ad7fffc4 	addi	r21,r21,-1
 100be28:	003f8306 	br	100bc38 <__udivdi3+0x42c>
 100be2c:	157f6e2e 	bgeu	r2,r21,100bbe8 <__udivdi3+0x3dc>
 100be30:	a53fffc4 	addi	r20,r20,-1
 100be34:	15c5883a 	add	r2,r2,r23
 100be38:	003f6b06 	br	100bbe8 <__udivdi3+0x3dc>
 100be3c:	ad7fffc4 	addi	r21,r21,-1
 100be40:	003ec206 	br	100b94c <__udivdi3+0x140>
 100be44:	843fffc4 	addi	r16,r16,-1
 100be48:	14c5883a 	add	r2,r2,r19
 100be4c:	003f1306 	br	100ba9c <__udivdi3+0x290>
 100be50:	ad7fffc4 	addi	r21,r21,-1
 100be54:	003f2506 	br	100baec <__udivdi3+0x2e0>
 100be58:	157fb92e 	bgeu	r2,r21,100bd40 <__udivdi3+0x534>
 100be5c:	297fffc4 	addi	r5,r5,-1
 100be60:	14c5883a 	add	r2,r2,r19
 100be64:	d9400215 	stw	r5,8(sp)
 100be68:	003fb506 	br	100bd40 <__udivdi3+0x534>
 100be6c:	843fffc4 	addi	r16,r16,-1
 100be70:	14c5883a 	add	r2,r2,r19
 100be74:	003ea106 	br	100b8fc <__udivdi3+0xf0>

0100be78 <__umoddi3>:
 100be78:	defff004 	addi	sp,sp,-64
 100be7c:	3011883a 	mov	r8,r6
 100be80:	000d883a 	mov	r6,zero
 100be84:	dd400b15 	stw	r21,44(sp)
 100be88:	dcc00915 	stw	r19,36(sp)
 100be8c:	dc000615 	stw	r16,24(sp)
 100be90:	dfc00f15 	stw	ra,60(sp)
 100be94:	df000e15 	stw	fp,56(sp)
 100be98:	ddc00d15 	stw	r23,52(sp)
 100be9c:	dd800c15 	stw	r22,48(sp)
 100bea0:	dd000a15 	stw	r20,40(sp)
 100bea4:	dc800815 	stw	r18,32(sp)
 100bea8:	dc400715 	stw	r17,28(sp)
 100beac:	2817883a 	mov	r11,r5
 100beb0:	d9800415 	stw	r6,16(sp)
 100beb4:	4027883a 	mov	r19,r8
 100beb8:	d9800515 	stw	r6,20(sp)
 100bebc:	2021883a 	mov	r16,r4
 100bec0:	282b883a 	mov	r21,r5
 100bec4:	38002c1e 	bne	r7,zero,100bf78 <__umoddi3+0x100>
 100bec8:	2a005636 	bltu	r5,r8,100c024 <__umoddi3+0x1ac>
 100becc:	40009a26 	beq	r8,zero,100c138 <__umoddi3+0x2c0>
 100bed0:	00bfffd4 	movui	r2,65535
 100bed4:	14c09236 	bltu	r2,r19,100c120 <__umoddi3+0x2a8>
 100bed8:	00803fc4 	movi	r2,255
 100bedc:	14c15c36 	bltu	r2,r19,100c450 <__umoddi3+0x5d8>
 100bee0:	000b883a 	mov	r5,zero
 100bee4:	0005883a 	mov	r2,zero
 100bee8:	9884d83a 	srl	r2,r19,r2
 100beec:	01004074 	movhi	r4,257
 100bef0:	2132cf04 	addi	r4,r4,-13508
 100bef4:	01800804 	movi	r6,32
 100bef8:	1105883a 	add	r2,r2,r4
 100befc:	10c00003 	ldbu	r3,0(r2)
 100bf00:	28c7883a 	add	r3,r5,r3
 100bf04:	30e5c83a 	sub	r18,r6,r3
 100bf08:	9000a41e 	bne	r18,zero,100c19c <__umoddi3+0x324>
 100bf0c:	982ed43a 	srli	r23,r19,16
 100bf10:	acebc83a 	sub	r21,r21,r19
 100bf14:	9d3fffcc 	andi	r20,r19,65535
 100bf18:	002d883a 	mov	r22,zero
 100bf1c:	a809883a 	mov	r4,r21
 100bf20:	b80b883a 	mov	r5,r23
 100bf24:	100c6140 	call	100c614 <__udivsi3>
 100bf28:	100b883a 	mov	r5,r2
 100bf2c:	a009883a 	mov	r4,r20
 100bf30:	1002dfc0 	call	1002dfc <__mulsi3>
 100bf34:	a809883a 	mov	r4,r21
 100bf38:	b80b883a 	mov	r5,r23
 100bf3c:	1023883a 	mov	r17,r2
 100bf40:	100c61c0 	call	100c61c <__umodsi3>
 100bf44:	1004943a 	slli	r2,r2,16
 100bf48:	8006d43a 	srli	r3,r16,16
 100bf4c:	10c4b03a 	or	r2,r2,r3
 100bf50:	1440032e 	bgeu	r2,r17,100bf60 <__umoddi3+0xe8>
 100bf54:	14c5883a 	add	r2,r2,r19
 100bf58:	14c00136 	bltu	r2,r19,100bf60 <__umoddi3+0xe8>
 100bf5c:	14415836 	bltu	r2,r17,100c4c0 <__umoddi3+0x648>
 100bf60:	1463c83a 	sub	r17,r2,r17
 100bf64:	8809883a 	mov	r4,r17
 100bf68:	b80b883a 	mov	r5,r23
 100bf6c:	100c6140 	call	100c614 <__udivsi3>
 100bf70:	a009883a 	mov	r4,r20
 100bf74:	00005306 	br	100c0c4 <__umoddi3+0x24c>
 100bf78:	380d883a 	mov	r6,r7
 100bf7c:	29c0132e 	bgeu	r5,r7,100bfcc <__umoddi3+0x154>
 100bf80:	d9000415 	stw	r4,16(sp)
 100bf84:	d9400515 	stw	r5,20(sp)
 100bf88:	d9400417 	ldw	r5,16(sp)
 100bf8c:	5813883a 	mov	r9,r11
 100bf90:	2811883a 	mov	r8,r5
 100bf94:	4005883a 	mov	r2,r8
 100bf98:	4807883a 	mov	r3,r9
 100bf9c:	dfc00f17 	ldw	ra,60(sp)
 100bfa0:	df000e17 	ldw	fp,56(sp)
 100bfa4:	ddc00d17 	ldw	r23,52(sp)
 100bfa8:	dd800c17 	ldw	r22,48(sp)
 100bfac:	dd400b17 	ldw	r21,44(sp)
 100bfb0:	dd000a17 	ldw	r20,40(sp)
 100bfb4:	dcc00917 	ldw	r19,36(sp)
 100bfb8:	dc800817 	ldw	r18,32(sp)
 100bfbc:	dc400717 	ldw	r17,28(sp)
 100bfc0:	dc000617 	ldw	r16,24(sp)
 100bfc4:	dec01004 	addi	sp,sp,64
 100bfc8:	f800283a 	ret
 100bfcc:	00bfffd4 	movui	r2,65535
 100bfd0:	11c06636 	bltu	r2,r7,100c16c <__umoddi3+0x2f4>
 100bfd4:	00803fc4 	movi	r2,255
 100bfd8:	11c12036 	bltu	r2,r7,100c45c <__umoddi3+0x5e4>
 100bfdc:	000b883a 	mov	r5,zero
 100bfe0:	0005883a 	mov	r2,zero
 100bfe4:	3084d83a 	srl	r2,r6,r2
 100bfe8:	01004074 	movhi	r4,257
 100bfec:	2132cf04 	addi	r4,r4,-13508
 100bff0:	01c00804 	movi	r7,32
 100bff4:	1105883a 	add	r2,r2,r4
 100bff8:	10c00003 	ldbu	r3,0(r2)
 100bffc:	28c7883a 	add	r3,r5,r3
 100c000:	38e5c83a 	sub	r18,r7,r3
 100c004:	9000941e 	bne	r18,zero,100c258 <__umoddi3+0x3e0>
 100c008:	35405e36 	bltu	r6,r21,100c184 <__umoddi3+0x30c>
 100c00c:	84c05d2e 	bgeu	r16,r19,100c184 <__umoddi3+0x30c>
 100c010:	8011883a 	mov	r8,r16
 100c014:	a813883a 	mov	r9,r21
 100c018:	dc000415 	stw	r16,16(sp)
 100c01c:	dd400515 	stw	r21,20(sp)
 100c020:	003fdc06 	br	100bf94 <__umoddi3+0x11c>
 100c024:	00bfffd4 	movui	r2,65535
 100c028:	12004a36 	bltu	r2,r8,100c154 <__umoddi3+0x2dc>
 100c02c:	00803fc4 	movi	r2,255
 100c030:	12010d36 	bltu	r2,r8,100c468 <__umoddi3+0x5f0>
 100c034:	000b883a 	mov	r5,zero
 100c038:	0005883a 	mov	r2,zero
 100c03c:	9884d83a 	srl	r2,r19,r2
 100c040:	01004074 	movhi	r4,257
 100c044:	2132cf04 	addi	r4,r4,-13508
 100c048:	01800804 	movi	r6,32
 100c04c:	1105883a 	add	r2,r2,r4
 100c050:	10c00003 	ldbu	r3,0(r2)
 100c054:	28c7883a 	add	r3,r5,r3
 100c058:	30c7c83a 	sub	r3,r6,r3
 100c05c:	1800dc1e 	bne	r3,zero,100c3d0 <__umoddi3+0x558>
 100c060:	002d883a 	mov	r22,zero
 100c064:	982ed43a 	srli	r23,r19,16
 100c068:	a809883a 	mov	r4,r21
 100c06c:	9cbfffcc 	andi	r18,r19,65535
 100c070:	b80b883a 	mov	r5,r23
 100c074:	100c6140 	call	100c614 <__udivsi3>
 100c078:	100b883a 	mov	r5,r2
 100c07c:	9009883a 	mov	r4,r18
 100c080:	1002dfc0 	call	1002dfc <__mulsi3>
 100c084:	a809883a 	mov	r4,r21
 100c088:	b80b883a 	mov	r5,r23
 100c08c:	1023883a 	mov	r17,r2
 100c090:	100c61c0 	call	100c61c <__umodsi3>
 100c094:	1004943a 	slli	r2,r2,16
 100c098:	8006d43a 	srli	r3,r16,16
 100c09c:	10c4b03a 	or	r2,r2,r3
 100c0a0:	1440032e 	bgeu	r2,r17,100c0b0 <__umoddi3+0x238>
 100c0a4:	14c5883a 	add	r2,r2,r19
 100c0a8:	14c00136 	bltu	r2,r19,100c0b0 <__umoddi3+0x238>
 100c0ac:	14410236 	bltu	r2,r17,100c4b8 <__umoddi3+0x640>
 100c0b0:	1463c83a 	sub	r17,r2,r17
 100c0b4:	8809883a 	mov	r4,r17
 100c0b8:	b80b883a 	mov	r5,r23
 100c0bc:	100c6140 	call	100c614 <__udivsi3>
 100c0c0:	9009883a 	mov	r4,r18
 100c0c4:	100b883a 	mov	r5,r2
 100c0c8:	1002dfc0 	call	1002dfc <__mulsi3>
 100c0cc:	8809883a 	mov	r4,r17
 100c0d0:	b80b883a 	mov	r5,r23
 100c0d4:	102b883a 	mov	r21,r2
 100c0d8:	100c61c0 	call	100c61c <__umodsi3>
 100c0dc:	1004943a 	slli	r2,r2,16
 100c0e0:	80ffffcc 	andi	r3,r16,65535
 100c0e4:	10c4b03a 	or	r2,r2,r3
 100c0e8:	1540042e 	bgeu	r2,r21,100c0fc <__umoddi3+0x284>
 100c0ec:	14c5883a 	add	r2,r2,r19
 100c0f0:	14c00236 	bltu	r2,r19,100c0fc <__umoddi3+0x284>
 100c0f4:	1540012e 	bgeu	r2,r21,100c0fc <__umoddi3+0x284>
 100c0f8:	14c5883a 	add	r2,r2,r19
 100c0fc:	1545c83a 	sub	r2,r2,r21
 100c100:	1584d83a 	srl	r2,r2,r22
 100c104:	0013883a 	mov	r9,zero
 100c108:	d8800415 	stw	r2,16(sp)
 100c10c:	d8c00417 	ldw	r3,16(sp)
 100c110:	0005883a 	mov	r2,zero
 100c114:	d8800515 	stw	r2,20(sp)
 100c118:	1811883a 	mov	r8,r3
 100c11c:	003f9d06 	br	100bf94 <__umoddi3+0x11c>
 100c120:	00804034 	movhi	r2,256
 100c124:	10bfffc4 	addi	r2,r2,-1
 100c128:	14c0c636 	bltu	r2,r19,100c444 <__umoddi3+0x5cc>
 100c12c:	01400404 	movi	r5,16
 100c130:	2805883a 	mov	r2,r5
 100c134:	003f6c06 	br	100bee8 <__umoddi3+0x70>
 100c138:	01000044 	movi	r4,1
 100c13c:	000b883a 	mov	r5,zero
 100c140:	100c6140 	call	100c614 <__udivsi3>
 100c144:	1027883a 	mov	r19,r2
 100c148:	00bfffd4 	movui	r2,65535
 100c14c:	14fff436 	bltu	r2,r19,100c120 <__umoddi3+0x2a8>
 100c150:	003f6106 	br	100bed8 <__umoddi3+0x60>
 100c154:	00804034 	movhi	r2,256
 100c158:	10bfffc4 	addi	r2,r2,-1
 100c15c:	1200c536 	bltu	r2,r8,100c474 <__umoddi3+0x5fc>
 100c160:	01400404 	movi	r5,16
 100c164:	2805883a 	mov	r2,r5
 100c168:	003fb406 	br	100c03c <__umoddi3+0x1c4>
 100c16c:	00804034 	movhi	r2,256
 100c170:	10bfffc4 	addi	r2,r2,-1
 100c174:	11c0c236 	bltu	r2,r7,100c480 <__umoddi3+0x608>
 100c178:	01400404 	movi	r5,16
 100c17c:	2805883a 	mov	r2,r5
 100c180:	003f9806 	br	100bfe4 <__umoddi3+0x16c>
 100c184:	84c9c83a 	sub	r4,r16,r19
 100c188:	8105803a 	cmpltu	r2,r16,r4
 100c18c:	a987c83a 	sub	r3,r21,r6
 100c190:	18abc83a 	sub	r21,r3,r2
 100c194:	2021883a 	mov	r16,r4
 100c198:	003f9d06 	br	100c010 <__umoddi3+0x198>
 100c19c:	9ca6983a 	sll	r19,r19,r18
 100c1a0:	3485c83a 	sub	r2,r6,r18
 100c1a4:	a8a2d83a 	srl	r17,r21,r2
 100c1a8:	982ed43a 	srli	r23,r19,16
 100c1ac:	ac86983a 	sll	r3,r21,r18
 100c1b0:	8084d83a 	srl	r2,r16,r2
 100c1b4:	8809883a 	mov	r4,r17
 100c1b8:	b80b883a 	mov	r5,r23
 100c1bc:	18b8b03a 	or	fp,r3,r2
 100c1c0:	9d3fffcc 	andi	r20,r19,65535
 100c1c4:	100c6140 	call	100c614 <__udivsi3>
 100c1c8:	100b883a 	mov	r5,r2
 100c1cc:	a009883a 	mov	r4,r20
 100c1d0:	1002dfc0 	call	1002dfc <__mulsi3>
 100c1d4:	8809883a 	mov	r4,r17
 100c1d8:	b80b883a 	mov	r5,r23
 100c1dc:	102b883a 	mov	r21,r2
 100c1e0:	100c61c0 	call	100c61c <__umodsi3>
 100c1e4:	1004943a 	slli	r2,r2,16
 100c1e8:	e006d43a 	srli	r3,fp,16
 100c1ec:	902d883a 	mov	r22,r18
 100c1f0:	10c4b03a 	or	r2,r2,r3
 100c1f4:	1540022e 	bgeu	r2,r21,100c200 <__umoddi3+0x388>
 100c1f8:	14c5883a 	add	r2,r2,r19
 100c1fc:	14c0ab2e 	bgeu	r2,r19,100c4ac <__umoddi3+0x634>
 100c200:	1563c83a 	sub	r17,r2,r21
 100c204:	8809883a 	mov	r4,r17
 100c208:	b80b883a 	mov	r5,r23
 100c20c:	100c6140 	call	100c614 <__udivsi3>
 100c210:	100b883a 	mov	r5,r2
 100c214:	a009883a 	mov	r4,r20
 100c218:	1002dfc0 	call	1002dfc <__mulsi3>
 100c21c:	8809883a 	mov	r4,r17
 100c220:	b80b883a 	mov	r5,r23
 100c224:	102b883a 	mov	r21,r2
 100c228:	100c61c0 	call	100c61c <__umodsi3>
 100c22c:	1004943a 	slli	r2,r2,16
 100c230:	e0ffffcc 	andi	r3,fp,65535
 100c234:	10c4b03a 	or	r2,r2,r3
 100c238:	1540042e 	bgeu	r2,r21,100c24c <__umoddi3+0x3d4>
 100c23c:	14c5883a 	add	r2,r2,r19
 100c240:	14c00236 	bltu	r2,r19,100c24c <__umoddi3+0x3d4>
 100c244:	1540012e 	bgeu	r2,r21,100c24c <__umoddi3+0x3d4>
 100c248:	14c5883a 	add	r2,r2,r19
 100c24c:	84a0983a 	sll	r16,r16,r18
 100c250:	156bc83a 	sub	r21,r2,r21
 100c254:	003f3106 	br	100bf1c <__umoddi3+0xa4>
 100c258:	3c8fc83a 	sub	r7,r7,r18
 100c25c:	3486983a 	sll	r3,r6,r18
 100c260:	99c4d83a 	srl	r2,r19,r7
 100c264:	a9e2d83a 	srl	r17,r21,r7
 100c268:	ac8c983a 	sll	r6,r21,r18
 100c26c:	18acb03a 	or	r22,r3,r2
 100c270:	b02ed43a 	srli	r23,r22,16
 100c274:	81c4d83a 	srl	r2,r16,r7
 100c278:	8809883a 	mov	r4,r17
 100c27c:	b80b883a 	mov	r5,r23
 100c280:	308cb03a 	or	r6,r6,r2
 100c284:	d9c00315 	stw	r7,12(sp)
 100c288:	d9800215 	stw	r6,8(sp)
 100c28c:	b53fffcc 	andi	r20,r22,65535
 100c290:	100c6140 	call	100c614 <__udivsi3>
 100c294:	100b883a 	mov	r5,r2
 100c298:	a009883a 	mov	r4,r20
 100c29c:	1039883a 	mov	fp,r2
 100c2a0:	1002dfc0 	call	1002dfc <__mulsi3>
 100c2a4:	8809883a 	mov	r4,r17
 100c2a8:	b80b883a 	mov	r5,r23
 100c2ac:	102b883a 	mov	r21,r2
 100c2b0:	100c61c0 	call	100c61c <__umodsi3>
 100c2b4:	d9000217 	ldw	r4,8(sp)
 100c2b8:	1004943a 	slli	r2,r2,16
 100c2bc:	9ca6983a 	sll	r19,r19,r18
 100c2c0:	2006d43a 	srli	r3,r4,16
 100c2c4:	84a0983a 	sll	r16,r16,r18
 100c2c8:	dcc00015 	stw	r19,0(sp)
 100c2cc:	10c4b03a 	or	r2,r2,r3
 100c2d0:	dc000115 	stw	r16,4(sp)
 100c2d4:	1540032e 	bgeu	r2,r21,100c2e4 <__umoddi3+0x46c>
 100c2d8:	1585883a 	add	r2,r2,r22
 100c2dc:	e73fffc4 	addi	fp,fp,-1
 100c2e0:	15806e2e 	bgeu	r2,r22,100c49c <__umoddi3+0x624>
 100c2e4:	1563c83a 	sub	r17,r2,r21
 100c2e8:	8809883a 	mov	r4,r17
 100c2ec:	b80b883a 	mov	r5,r23
 100c2f0:	100c6140 	call	100c614 <__udivsi3>
 100c2f4:	100b883a 	mov	r5,r2
 100c2f8:	a009883a 	mov	r4,r20
 100c2fc:	1021883a 	mov	r16,r2
 100c300:	1002dfc0 	call	1002dfc <__mulsi3>
 100c304:	b80b883a 	mov	r5,r23
 100c308:	8809883a 	mov	r4,r17
 100c30c:	1029883a 	mov	r20,r2
 100c310:	100c61c0 	call	100c61c <__umodsi3>
 100c314:	d9400217 	ldw	r5,8(sp)
 100c318:	1004943a 	slli	r2,r2,16
 100c31c:	28ffffcc 	andi	r3,r5,65535
 100c320:	10c4b03a 	or	r2,r2,r3
 100c324:	1500032e 	bgeu	r2,r20,100c334 <__umoddi3+0x4bc>
 100c328:	1585883a 	add	r2,r2,r22
 100c32c:	843fffc4 	addi	r16,r16,-1
 100c330:	1580562e 	bgeu	r2,r22,100c48c <__umoddi3+0x614>
 100c334:	d9800017 	ldw	r6,0(sp)
 100c338:	e022943a 	slli	r17,fp,16
 100c33c:	302ed43a 	srli	r23,r6,16
 100c340:	8462b03a 	or	r17,r16,r17
 100c344:	34ffffcc 	andi	r19,r6,65535
 100c348:	882ad43a 	srli	r21,r17,16
 100c34c:	8c7fffcc 	andi	r17,r17,65535
 100c350:	8809883a 	mov	r4,r17
 100c354:	980b883a 	mov	r5,r19
 100c358:	1521c83a 	sub	r16,r2,r20
 100c35c:	1002dfc0 	call	1002dfc <__mulsi3>
 100c360:	8809883a 	mov	r4,r17
 100c364:	b80b883a 	mov	r5,r23
 100c368:	1029883a 	mov	r20,r2
 100c36c:	1002dfc0 	call	1002dfc <__mulsi3>
 100c370:	980b883a 	mov	r5,r19
 100c374:	a809883a 	mov	r4,r21
 100c378:	1023883a 	mov	r17,r2
 100c37c:	1002dfc0 	call	1002dfc <__mulsi3>
 100c380:	a809883a 	mov	r4,r21
 100c384:	b80b883a 	mov	r5,r23
 100c388:	1027883a 	mov	r19,r2
 100c38c:	1002dfc0 	call	1002dfc <__mulsi3>
 100c390:	100b883a 	mov	r5,r2
 100c394:	a004d43a 	srli	r2,r20,16
 100c398:	8ce3883a 	add	r17,r17,r19
 100c39c:	1449883a 	add	r4,r2,r17
 100c3a0:	24c0022e 	bgeu	r4,r19,100c3ac <__umoddi3+0x534>
 100c3a4:	00800074 	movhi	r2,1
 100c3a8:	288b883a 	add	r5,r5,r2
 100c3ac:	2004d43a 	srli	r2,r4,16
 100c3b0:	2008943a 	slli	r4,r4,16
 100c3b4:	a0ffffcc 	andi	r3,r20,65535
 100c3b8:	288d883a 	add	r6,r5,r2
 100c3bc:	20c9883a 	add	r4,r4,r3
 100c3c0:	81800b36 	bltu	r16,r6,100c3f0 <__umoddi3+0x578>
 100c3c4:	81804026 	beq	r16,r6,100c4c8 <__umoddi3+0x650>
 100c3c8:	818dc83a 	sub	r6,r16,r6
 100c3cc:	00000f06 	br	100c40c <__umoddi3+0x594>
 100c3d0:	30c5c83a 	sub	r2,r6,r3
 100c3d4:	182d883a 	mov	r22,r3
 100c3d8:	8084d83a 	srl	r2,r16,r2
 100c3dc:	a8c6983a 	sll	r3,r21,r3
 100c3e0:	9da6983a 	sll	r19,r19,r22
 100c3e4:	85a0983a 	sll	r16,r16,r22
 100c3e8:	18aab03a 	or	r21,r3,r2
 100c3ec:	003f1d06 	br	100c064 <__umoddi3+0x1ec>
 100c3f0:	d8c00017 	ldw	r3,0(sp)
 100c3f4:	20c5c83a 	sub	r2,r4,r3
 100c3f8:	2089803a 	cmpltu	r4,r4,r2
 100c3fc:	3587c83a 	sub	r3,r6,r22
 100c400:	1907c83a 	sub	r3,r3,r4
 100c404:	80cdc83a 	sub	r6,r16,r3
 100c408:	1009883a 	mov	r4,r2
 100c40c:	d9400117 	ldw	r5,4(sp)
 100c410:	2905c83a 	sub	r2,r5,r4
 100c414:	2887803a 	cmpltu	r3,r5,r2
 100c418:	30c7c83a 	sub	r3,r6,r3
 100c41c:	d9800317 	ldw	r6,12(sp)
 100c420:	1484d83a 	srl	r2,r2,r18
 100c424:	1988983a 	sll	r4,r3,r6
 100c428:	1c86d83a 	srl	r3,r3,r18
 100c42c:	2088b03a 	or	r4,r4,r2
 100c430:	2011883a 	mov	r8,r4
 100c434:	1813883a 	mov	r9,r3
 100c438:	d9000415 	stw	r4,16(sp)
 100c43c:	d8c00515 	stw	r3,20(sp)
 100c440:	003ed406 	br	100bf94 <__umoddi3+0x11c>
 100c444:	01400604 	movi	r5,24
 100c448:	2805883a 	mov	r2,r5
 100c44c:	003ea606 	br	100bee8 <__umoddi3+0x70>
 100c450:	01400204 	movi	r5,8
 100c454:	2805883a 	mov	r2,r5
 100c458:	003ea306 	br	100bee8 <__umoddi3+0x70>
 100c45c:	01400204 	movi	r5,8
 100c460:	2805883a 	mov	r2,r5
 100c464:	003edf06 	br	100bfe4 <__umoddi3+0x16c>
 100c468:	01400204 	movi	r5,8
 100c46c:	2805883a 	mov	r2,r5
 100c470:	003ef206 	br	100c03c <__umoddi3+0x1c4>
 100c474:	01400604 	movi	r5,24
 100c478:	2805883a 	mov	r2,r5
 100c47c:	003eef06 	br	100c03c <__umoddi3+0x1c4>
 100c480:	01400604 	movi	r5,24
 100c484:	2805883a 	mov	r2,r5
 100c488:	003ed606 	br	100bfe4 <__umoddi3+0x16c>
 100c48c:	153fa92e 	bgeu	r2,r20,100c334 <__umoddi3+0x4bc>
 100c490:	843fffc4 	addi	r16,r16,-1
 100c494:	1585883a 	add	r2,r2,r22
 100c498:	003fa606 	br	100c334 <__umoddi3+0x4bc>
 100c49c:	157f912e 	bgeu	r2,r21,100c2e4 <__umoddi3+0x46c>
 100c4a0:	e73fffc4 	addi	fp,fp,-1
 100c4a4:	1585883a 	add	r2,r2,r22
 100c4a8:	003f8e06 	br	100c2e4 <__umoddi3+0x46c>
 100c4ac:	157f542e 	bgeu	r2,r21,100c200 <__umoddi3+0x388>
 100c4b0:	14c5883a 	add	r2,r2,r19
 100c4b4:	003f5206 	br	100c200 <__umoddi3+0x388>
 100c4b8:	14c5883a 	add	r2,r2,r19
 100c4bc:	003efc06 	br	100c0b0 <__umoddi3+0x238>
 100c4c0:	14c5883a 	add	r2,r2,r19
 100c4c4:	003ea606 	br	100bf60 <__umoddi3+0xe8>
 100c4c8:	d8800117 	ldw	r2,4(sp)
 100c4cc:	113fc836 	bltu	r2,r4,100c3f0 <__umoddi3+0x578>
 100c4d0:	000d883a 	mov	r6,zero
 100c4d4:	003fcd06 	br	100c40c <__umoddi3+0x594>

0100c4d8 <udivmodsi4>:
 100c4d8:	29001b2e 	bgeu	r5,r4,100c548 <udivmodsi4+0x70>
 100c4dc:	28001a16 	blt	r5,zero,100c548 <udivmodsi4+0x70>
 100c4e0:	00800044 	movi	r2,1
 100c4e4:	0007883a 	mov	r3,zero
 100c4e8:	01c007c4 	movi	r7,31
 100c4ec:	00000306 	br	100c4fc <udivmodsi4+0x24>
 100c4f0:	19c01326 	beq	r3,r7,100c540 <udivmodsi4+0x68>
 100c4f4:	18c00044 	addi	r3,r3,1
 100c4f8:	28000416 	blt	r5,zero,100c50c <udivmodsi4+0x34>
 100c4fc:	294b883a 	add	r5,r5,r5
 100c500:	1085883a 	add	r2,r2,r2
 100c504:	293ffa36 	bltu	r5,r4,100c4f0 <udivmodsi4+0x18>
 100c508:	10000d26 	beq	r2,zero,100c540 <udivmodsi4+0x68>
 100c50c:	0007883a 	mov	r3,zero
 100c510:	21400236 	bltu	r4,r5,100c51c <udivmodsi4+0x44>
 100c514:	2149c83a 	sub	r4,r4,r5
 100c518:	1886b03a 	or	r3,r3,r2
 100c51c:	1004d07a 	srli	r2,r2,1
 100c520:	280ad07a 	srli	r5,r5,1
 100c524:	103ffa1e 	bne	r2,zero,100c510 <udivmodsi4+0x38>
 100c528:	30000226 	beq	r6,zero,100c534 <udivmodsi4+0x5c>
 100c52c:	2005883a 	mov	r2,r4
 100c530:	f800283a 	ret
 100c534:	1809883a 	mov	r4,r3
 100c538:	2005883a 	mov	r2,r4
 100c53c:	f800283a 	ret
 100c540:	0007883a 	mov	r3,zero
 100c544:	003ff806 	br	100c528 <udivmodsi4+0x50>
 100c548:	00800044 	movi	r2,1
 100c54c:	0007883a 	mov	r3,zero
 100c550:	003fef06 	br	100c510 <udivmodsi4+0x38>

0100c554 <__divsi3>:
 100c554:	defffe04 	addi	sp,sp,-8
 100c558:	dc000015 	stw	r16,0(sp)
 100c55c:	dfc00115 	stw	ra,4(sp)
 100c560:	0021883a 	mov	r16,zero
 100c564:	20000c16 	blt	r4,zero,100c598 <__divsi3+0x44>
 100c568:	000d883a 	mov	r6,zero
 100c56c:	28000e16 	blt	r5,zero,100c5a8 <__divsi3+0x54>
 100c570:	100c4d80 	call	100c4d8 <udivmodsi4>
 100c574:	1007883a 	mov	r3,r2
 100c578:	8005003a 	cmpeq	r2,r16,zero
 100c57c:	1000011e 	bne	r2,zero,100c584 <__divsi3+0x30>
 100c580:	00c7c83a 	sub	r3,zero,r3
 100c584:	1805883a 	mov	r2,r3
 100c588:	dfc00117 	ldw	ra,4(sp)
 100c58c:	dc000017 	ldw	r16,0(sp)
 100c590:	dec00204 	addi	sp,sp,8
 100c594:	f800283a 	ret
 100c598:	0109c83a 	sub	r4,zero,r4
 100c59c:	04000044 	movi	r16,1
 100c5a0:	000d883a 	mov	r6,zero
 100c5a4:	283ff20e 	bge	r5,zero,100c570 <__divsi3+0x1c>
 100c5a8:	014bc83a 	sub	r5,zero,r5
 100c5ac:	8021003a 	cmpeq	r16,r16,zero
 100c5b0:	003fef06 	br	100c570 <__divsi3+0x1c>

0100c5b4 <__modsi3>:
 100c5b4:	deffff04 	addi	sp,sp,-4
 100c5b8:	dfc00015 	stw	ra,0(sp)
 100c5bc:	01800044 	movi	r6,1
 100c5c0:	2807883a 	mov	r3,r5
 100c5c4:	20000416 	blt	r4,zero,100c5d8 <__modsi3+0x24>
 100c5c8:	28000c16 	blt	r5,zero,100c5fc <__modsi3+0x48>
 100c5cc:	dfc00017 	ldw	ra,0(sp)
 100c5d0:	dec00104 	addi	sp,sp,4
 100c5d4:	100c4d81 	jmpi	100c4d8 <udivmodsi4>
 100c5d8:	0109c83a 	sub	r4,zero,r4
 100c5dc:	28000b16 	blt	r5,zero,100c60c <__modsi3+0x58>
 100c5e0:	180b883a 	mov	r5,r3
 100c5e4:	01800044 	movi	r6,1
 100c5e8:	100c4d80 	call	100c4d8 <udivmodsi4>
 100c5ec:	0085c83a 	sub	r2,zero,r2
 100c5f0:	dfc00017 	ldw	ra,0(sp)
 100c5f4:	dec00104 	addi	sp,sp,4
 100c5f8:	f800283a 	ret
 100c5fc:	014bc83a 	sub	r5,zero,r5
 100c600:	dfc00017 	ldw	ra,0(sp)
 100c604:	dec00104 	addi	sp,sp,4
 100c608:	100c4d81 	jmpi	100c4d8 <udivmodsi4>
 100c60c:	0147c83a 	sub	r3,zero,r5
 100c610:	003ff306 	br	100c5e0 <__modsi3+0x2c>

0100c614 <__udivsi3>:
 100c614:	000d883a 	mov	r6,zero
 100c618:	100c4d81 	jmpi	100c4d8 <udivmodsi4>

0100c61c <__umodsi3>:
 100c61c:	01800044 	movi	r6,1
 100c620:	100c4d81 	jmpi	100c4d8 <udivmodsi4>

0100c624 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 100c624:	defffd04 	addi	sp,sp,-12
 100c628:	df000215 	stw	fp,8(sp)
 100c62c:	df000204 	addi	fp,sp,8
 100c630:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 100c634:	e0bfff17 	ldw	r2,-4(fp)
 100c638:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100c63c:	e0bffe17 	ldw	r2,-8(fp)
 100c640:	1005003a 	cmpeq	r2,r2,zero
 100c644:	1000021e 	bne	r2,zero,100c650 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 100c648:	002af070 	cmpltui	zero,zero,43969
 100c64c:	00000106 	br	100c654 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 100c650:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 100c654:	e037883a 	mov	sp,fp
 100c658:	df000017 	ldw	fp,0(sp)
 100c65c:	dec00104 	addi	sp,sp,4
 100c660:	f800283a 	ret

0100c664 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100c664:	defffd04 	addi	sp,sp,-12
 100c668:	dfc00215 	stw	ra,8(sp)
 100c66c:	df000115 	stw	fp,4(sp)
 100c670:	df000104 	addi	fp,sp,4
 100c674:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 100c678:	e13fff17 	ldw	r4,-4(fp)
 100c67c:	100c6240 	call	100c624 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100c680:	003fff06 	br	100c680 <_exit+0x1c>

0100c684 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 100c684:	deffff04 	addi	sp,sp,-4
 100c688:	df000015 	stw	fp,0(sp)
 100c68c:	d839883a 	mov	fp,sp
  return 0;
 100c690:	0005883a 	mov	r2,zero
}
 100c694:	e037883a 	mov	sp,fp
 100c698:	df000017 	ldw	fp,0(sp)
 100c69c:	dec00104 	addi	sp,sp,4
 100c6a0:	f800283a 	ret

0100c6a4 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 100c6a4:	defffa04 	addi	sp,sp,-24
 100c6a8:	dfc00515 	stw	ra,20(sp)
 100c6ac:	df000415 	stw	fp,16(sp)
 100c6b0:	df000404 	addi	fp,sp,16
 100c6b4:	e13ffd15 	stw	r4,-12(fp)
 100c6b8:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 100c6bc:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 100c6c0:	e0bffd17 	ldw	r2,-12(fp)
 100c6c4:	10800048 	cmpgei	r2,r2,1
 100c6c8:	1000301e 	bne	r2,zero,100c78c <kill+0xe8>
  {
    switch (sig)
 100c6cc:	e0bffe17 	ldw	r2,-8(fp)
 100c6d0:	10800828 	cmpgeui	r2,r2,32
 100c6d4:	10002a1e 	bne	r2,zero,100c780 <kill+0xdc>
 100c6d8:	e0bffe17 	ldw	r2,-8(fp)
 100c6dc:	1085883a 	add	r2,r2,r2
 100c6e0:	1087883a 	add	r3,r2,r2
 100c6e4:	00804074 	movhi	r2,257
 100c6e8:	10b1be04 	addi	r2,r2,-14600
 100c6ec:	1885883a 	add	r2,r3,r2
 100c6f0:	10800017 	ldw	r2,0(r2)
 100c6f4:	1000683a 	jmp	r2
 100c6f8:	0100c7a0 	cmpeqi	r4,zero,798
 100c6fc:	0100c780 	call	100c78 <__alt_mem_onchip_memory2_0+0x100c78>
 100c700:	0100c780 	call	100c78 <__alt_mem_onchip_memory2_0+0x100c78>
 100c704:	0100c778 	rdprs	r4,zero,797
 100c708:	0100c778 	rdprs	r4,zero,797
 100c70c:	0100c778 	rdprs	r4,zero,797
 100c710:	0100c778 	rdprs	r4,zero,797
 100c714:	0100c780 	call	100c78 <__alt_mem_onchip_memory2_0+0x100c78>
 100c718:	0100c778 	rdprs	r4,zero,797
 100c71c:	0100c778 	rdprs	r4,zero,797
 100c720:	0100c778 	rdprs	r4,zero,797
 100c724:	0100c778 	rdprs	r4,zero,797
 100c728:	0100c778 	rdprs	r4,zero,797
 100c72c:	0100c778 	rdprs	r4,zero,797
 100c730:	0100c778 	rdprs	r4,zero,797
 100c734:	0100c778 	rdprs	r4,zero,797
 100c738:	0100c7a0 	cmpeqi	r4,zero,798
 100c73c:	0100c780 	call	100c78 <__alt_mem_onchip_memory2_0+0x100c78>
 100c740:	0100c780 	call	100c78 <__alt_mem_onchip_memory2_0+0x100c78>
 100c744:	0100c780 	call	100c78 <__alt_mem_onchip_memory2_0+0x100c78>
 100c748:	0100c7a0 	cmpeqi	r4,zero,798
 100c74c:	0100c780 	call	100c78 <__alt_mem_onchip_memory2_0+0x100c78>
 100c750:	0100c780 	call	100c78 <__alt_mem_onchip_memory2_0+0x100c78>
 100c754:	0100c778 	rdprs	r4,zero,797
 100c758:	0100c778 	rdprs	r4,zero,797
 100c75c:	0100c778 	rdprs	r4,zero,797
 100c760:	0100c778 	rdprs	r4,zero,797
 100c764:	0100c778 	rdprs	r4,zero,797
 100c768:	0100c780 	call	100c78 <__alt_mem_onchip_memory2_0+0x100c78>
 100c76c:	0100c780 	call	100c78 <__alt_mem_onchip_memory2_0+0x100c78>
 100c770:	0100c778 	rdprs	r4,zero,797
 100c774:	0100c778 	rdprs	r4,zero,797
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 100c778:	0009883a 	mov	r4,zero
 100c77c:	100c6640 	call	100c664 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 100c780:	00800584 	movi	r2,22
 100c784:	e0bffc15 	stw	r2,-16(fp)
 100c788:	00000506 	br	100c7a0 <kill+0xfc>
    }
  }

  else if (pid > 0)
 100c78c:	e0bffd17 	ldw	r2,-12(fp)
 100c790:	10800050 	cmplti	r2,r2,1
 100c794:	1000021e 	bne	r2,zero,100c7a0 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 100c798:	008000c4 	movi	r2,3
 100c79c:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 100c7a0:	e0bffc17 	ldw	r2,-16(fp)
 100c7a4:	1005003a 	cmpeq	r2,r2,zero
 100c7a8:	1000071e 	bne	r2,zero,100c7c8 <kill+0x124>
  {
    ALT_ERRNO = status;
 100c7ac:	100c7e40 	call	100c7e4 <alt_get_errno>
 100c7b0:	1007883a 	mov	r3,r2
 100c7b4:	e0bffc17 	ldw	r2,-16(fp)
 100c7b8:	18800015 	stw	r2,0(r3)
    return -1;
 100c7bc:	00bfffc4 	movi	r2,-1
 100c7c0:	e0bfff15 	stw	r2,-4(fp)
 100c7c4:	00000106 	br	100c7cc <kill+0x128>
  }

  return 0;
 100c7c8:	e03fff15 	stw	zero,-4(fp)
 100c7cc:	e0bfff17 	ldw	r2,-4(fp)
}
 100c7d0:	e037883a 	mov	sp,fp
 100c7d4:	dfc00117 	ldw	ra,4(sp)
 100c7d8:	df000017 	ldw	fp,0(sp)
 100c7dc:	dec00204 	addi	sp,sp,8
 100c7e0:	f800283a 	ret

0100c7e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100c7e4:	defffd04 	addi	sp,sp,-12
 100c7e8:	dfc00215 	stw	ra,8(sp)
 100c7ec:	df000115 	stw	fp,4(sp)
 100c7f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100c7f4:	00804074 	movhi	r2,257
 100c7f8:	10b9b204 	addi	r2,r2,-6456
 100c7fc:	10800017 	ldw	r2,0(r2)
 100c800:	1005003a 	cmpeq	r2,r2,zero
 100c804:	1000061e 	bne	r2,zero,100c820 <alt_get_errno+0x3c>
 100c808:	00804074 	movhi	r2,257
 100c80c:	10b9b204 	addi	r2,r2,-6456
 100c810:	10800017 	ldw	r2,0(r2)
 100c814:	103ee83a 	callr	r2
 100c818:	e0bfff15 	stw	r2,-4(fp)
 100c81c:	00000306 	br	100c82c <alt_get_errno+0x48>
 100c820:	00804074 	movhi	r2,257
 100c824:	10806204 	addi	r2,r2,392
 100c828:	e0bfff15 	stw	r2,-4(fp)
 100c82c:	e0bfff17 	ldw	r2,-4(fp)
}
 100c830:	e037883a 	mov	sp,fp
 100c834:	dfc00117 	ldw	ra,4(sp)
 100c838:	df000017 	ldw	fp,0(sp)
 100c83c:	dec00204 	addi	sp,sp,8
 100c840:	f800283a 	ret
 100c844:	0100a1b4 	movhi	r4,646
